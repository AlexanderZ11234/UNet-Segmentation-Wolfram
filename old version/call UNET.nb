(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1241358,      22848]
NotebookOptionsPosition[   1237777,      22778]
NotebookOutlinePosition[   1238151,      22794]
CellTagsIndexPosition[   1238108,      22791]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "\"\<C:\\\\Users\\\\aliha\\\\Desktop\\\\UNET\\\\UNET.m\>\""}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "dirimg", "=", 
    "\"\<C:\\\\Users\\\\aliha\\\\Downloads\\\\fabrice-ali\\\\deeplearning\\\\\
data\\\\train\\\\train_images_8bit\>\""}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
  "dirmasks", "=", 
   "\"\<C:\\\\Users\\\\aliha\\\\Downloads\\\\fabrice-ali\\\\deeplearning\\\\\
data\\\\train\\\\train_masks\>\""}], ";"}]}], "Input",
 CellChangeTimes->{{3.734426692086425*^9, 3.734426697739458*^9}, {
   3.734500346200738*^9, 3.734500365651823*^9}, 3.734505229293367*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"764bc3ad-cfce-4f4d-9183-c9c128d4b2b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNet", "=", "UNET"}]], "Input",
 CellChangeTimes->{{3.734426831135685*^9, 3.7344268602390823`*^9}, {
  3.734427046151739*^9, 3.7344270550062876`*^9}, {3.734427108752219*^9, 
  3.734427111030278*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"5441fa38-150b-4261-ac25-09501af2c5e9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["24", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-23., 1.4083438190194562`*^-15}, {-22., 
                    1.0531590455443747`*^-11}}], 
                    
                    LineBox[{{-22., 1.0531590455443747`*^-11}, {-21., 
                    0.4275835627189663}}], 
                    
                    LineBox[{{-22., 
                    1.0531590455443747`*^-11}, {-21., -0.5724164372402485}}], 
                    LineBox[CompressedData["
1:eJxN1n9Q03Ucx3FF88zRiToGsuFgbGwM2G+NLPlegTXtEiPP6w4prfBUzG7U
XSJYBmEdm4M5ILfKYiwwBaS8UMMfL1ATQhJUBEG9VOrAw5LcaZrcxT4f/ni/
bxz3PPh+77H358uP2Lfey8wJmTJlinfiI/iZz0JEXLHnfZY9KIzMb9k6fs+C
2f28wxOmZRz+04LRy7yLk/uLkvstaOjlbVAvFq9tt2DlJd5ySfACC/ov8F75
yJ/xyG/B0h7euNjwcJ3LgqrzvN/3pU3dWWhBZxfv9WwsGOrkzS7PsKD5V97O
WykTLwuiJr8epwiOBaGT1x9eK2peK7LA0c172TeBiZcZeye9168Fx4zUq7zz
ZGdtsrNmbBniPSOr6YmsJjN0f1GPGQfFDuIxY0mcg3jMOL7IQTwT12fwbmYe
M+ybeS9nHhMGnQ7iMUHa7CAeE16+6SAeE3Ln7SIeExrbeT9kHhMiQ5zEY4J1
iZN4TFiyzUk8Jtw/4iQeI2wPncRjxKFny4jHiJ8/LiMeI0rOlBGPEfOaysl+
jAgLlBOPEVq9izXjKIx4Y52LeIz4vtRFPAaEHXARjwHlbS7iMUDb4yIeA65f
dhGPAfmT3889BjScdBGPAZW/uMh+DND3UY8BhWO8K1JH3KkjehSE72Z9rCU4
eujSeLPbOfWo2MZbxG6gR2ML765zwdHhwFE36wB7IHVYFVrBOjr4dmw6zMjh
vTQ9ODq0neKd2yrZ3CrRoURTybqSeZKR6a4knmRoplexHmKeZMwo4B3KPMm4
86CKeJKQtm8P8SRht8pDPEnwujzEk4SsUd6bmScJ3Qu9ZD+JGH/XSzyJuFnh
JZ5EfLTfSzyJ6Gn0Eo8WL9i8xKPFP1m82XHbtEh5ifeLzKOFxOwlHi0+lfN2
M08CSkOpJwHKRx7iScCqYQ/xJCCqjzfjnNNgXzXve8yjQfnkPrhHg5Ai3oyT
rsHjPA85Lw12vOMh+1GjdLWHeNRYsIx61Fj8nIc8P2r8rveQ/cQjdJaH7Cce
W8TUE49Dy+l5xWOgnp5XPG4spuelQkeA7keFyoEviUeF50e/Ih4VzifsJR4l
+sd8xKOE/VU/eX6UuGX7jniUuJ5ZSzxKbA/UEk8c2lbXEU8c9ufXEU8cUrLr
yHnFYePUOnJeCvS1+sl5KdAu8ZP9KPCavYZ4FLDJa4hHAdVFH/HEYkutj3hi
scLjI55YnD7gI55YdF/zkf3EwDfLT/YTg7p11BODGzV+4onBKz1+4onBnRHe
mu0X1NsvyHHiDu+tHwZHjtNXebcHbyeTY7yZdwS7wQJsKuTt9QQnGjPf5u93
mP2ARKNYxPsZ9gtRhp1HuL/08+DIELaJd/CvfVGyDNIYH/FI0TRQTTxSdHiq
iUeKjdm8I5knCmWqauKZj0vF37I+VV8bCKTOR7E1RN6ZOij4xorXz/0jEkf/
VSurbg4IT28w/j1mj0RexZyiYeuAsCPsoNNtjkS99GRKm+2KUHj7cfqDwQjk
Og3WuOx+QXc/am50SQQOjuY0iUR9QpX5yfvT9RH4YNGbtoKCXuFH39m7jVck
OJErs+c1XhSK0laHSEsksDu+Hr9b0yN01T+4pI2XANaZw+kbfhM68xZaRV3h
yBgdzJ7b2yHkV85ecyw/HK3Tmtcsd54ResU7w1KTwhFeVjU06m4Vhu7uySkf
EuML2X+373W2CL4Ea9YhnxjnQy4vuDXzJ2HOSfdY7XoxKqsLOlYcbxAMPxRo
cg1iyJ7Kyf/E6xP4/2NivF7e7T2W6RL+BxAN0Ks=
                    "]], 
                    
                    LineBox[{{-21., -0.5724164372402485}, {-20., \
-0.5724164373051922}}], 
                    
                    LineBox[{{-21., -0.5724164372402485}, {-20., \
-1.5724164372620621`}}], 
                    LineBox[CompressedData["
1:eJxN1X9I3HUcx/Fb4RpTomhII134/d6P7/30+yOGzMMC9WBRWBusNSOmoLB0
ipnMsYmwQIjAbBo1KGVhZGvzPOXO+95X52uutihrAyNlMLE5Nc/NP+YYujHJ
7+ftH+8P3+N48r3vl8f38/ne95tXWX+g6hmHw3F882N/03gNTVWjkfC7d8bS
u63mp6sGclzU2d5ny4YXDDhmRkR/Gpw+E5w2kNtBrXr27Tr6m4FPCqlfFQcY
yJi1RL/zuLfsca+Bmy3UmLy0XvGlgX92UTd+X7yt7bSB7B9SoqvFMPBFiFoc
XmbgX5ii2+cKNjcDF2qoZckeBpZD1ImjmZubgfM7qd/sebi/56GOvzaSomdu
20NHYybt/zjnekPOdR3tKvX28oGM8gEdeXUm8+goPk+edeHRUfckxTw6Piq1
mEeH3moxj47f+yzm0aCOW8yjoeoPi3k0HPvFYh4N4UsW82h44RWLzY+GqWXu
0bBnlFpwJA1z7Snm0eCuSDGPikUjxTwqlOdSzKNi4RafHxVSlM+Pihdlk3lU
XFtLMo+KBzeSbH5UdPUlmUfFxTPUXUVLnUVL+dj3IfWIZY98FBVSi9O158Pc
TZ0pTpCPC+vDov+csEcIM19T21e3vyeEyZPUufblNIRQX05dWmKPEAbD1DVX
smuvZIdwLpf6K+EJwrORYJ4gPpihvis8Qey9TJ0lPEEMf5dgngDO6gnmCeDH
lxLME8CjtTjzBHD6DnWt8ARQcDPO5seP4Hicefw4kowzjx+jg3Hm8eP9WJx5
fIiMxZnHh8qr1GK5G3yY/pU6Ijw+9F3jHh9ubO3vFB4vDl7lHi/UMe7xotrk
Hi8ebXkEZ0JB51nqVeFR0N3BPQq+6aYWnBIFLSNxtl4K3krz+fFgh8LXy4OB
Jr5eHhRPJtj948H4G/z+cSOSTrL5cSN62GQeN5RzJlsvN4Z+Ntn8uPF2h8k8
LqxFTOZxYWjr/0AeF1p9/H52ofw97nEiODvEPE58OzXI7h8nHCsx5nHiiBxj
Hid+OjHAPDJW0lHmkaG0RJlHxqFQlK2XjFMb/aINMWR03acWr4vtMvR71K2H
e7PCtyXMp6krxAVJuLjUz57/Etr+o+6OfT71er2EpsV+9vyQ0LxA/bf9c11C
xzy1f+Kz5zNelmDdpab3l4Qnc9T/A+xmfIM=
                    "]], 
                    LineBox[CompressedData["
1:eJxN1FtIFGEYxvHtoBe5SEItJoqoF9nMHmbm8yLKtDBBO6CU5q67s3ggIzLM
uskwSqMlrRZCA4lwQUQICoxKkRV6hMgiFTJBk4xAKZWKQm8Uw3a+9+Z9mWX4
MTvDf75hJqOm4dTZrTabrTj2s/Y0OViP+rO6s9deL++JXv23IjCxQHbs21Yy
+F3gV1JA+pZrptU1I1BZQNb2HthV9U4gqYmcLk8QcLwgl673lqz3CtT9JePT
s7XqBwLbc0zpKz0FW0LNAj+vkevkCGS8JcvTSwRuJwalw/P7Y5vAxglyVqY1
AqEW8kBVQmwTSH9KPhZZLY6sGpgYI3+ds8ZAeJ58OXW0MXXUQNUfcry/P87f
b6BwJch6DBz8SF6TPQY+vOE9BpoHeY+B0ie8x8CRR7xHx5l23qOjvYn36Ph2
jvfoqCjnPTqKdgfZ+ujosfEeHdXLtH4yJ1NHaNJkPTp2DpmsR4Ot22Q9Gspa
TNajwV5rsh4NagF/XhruTAVYj4balwHWo6G9K8DWR8PGzQDr0fDqIrkzb6kj
b8mDaJA8HLXGA3sZWV4u7EHfSXKCvIAH946Tx8escaO5gmzdXXHEjR/l5DTr
dhpjx4vIhUetcSPPQ74w4qgfcbiRvYP8UPa4cPizn/W40PqYvCB7XPh9mmyX
PS6ENitZjxOXhnysx4mUoI/1OHE+2cd6nAgueqXrZY8TK+Netj4qPO+9rEdF
4qyX9ajosPlYj4rhXHKOsEZFW5icYr3u8So6F8k3vL323DkF1w9Rf41cYAX5
9yvZ+6vgyzQ58vzudH6DgrI0P3v+CvpM8pT1d0PBZBdZHWtLjEtWMDtBpu+P
guFN8n8zyj4A
                    "]], 
                    
                    LineBox[{{-20., -1.5724164372620621`}, {-19., \
-2.5724164373207246`}}], 
                    
                    LineBox[{{-19., -2.5724164373207246`}, {-18., \
-2.572416437334126}}], 
                    
                    LineBox[{{-18., -2.572416437334126}, {-17., \
-2.572416437299565}}], 
                    
                    LineBox[{{-17., -2.572416437299565}, {-16., \
-2.5724164372907543`}}], 
                    
                    LineBox[{{-16., -2.5724164372907543`}, {-15., \
-2.572416437280025}}], 
                    
                    LineBox[{{-15., -2.572416437280025}, {-14., \
-2.5724164372882248`}}], 
                    
                    LineBox[{{-14., -2.5724164372882248`}, {-13., \
-1.5724164372659137`}}], 
                    
                    LineBox[{{-13., -1.5724164372659137`}, {-12., \
-1.5724164372600449`}}], 
                    
                    LineBox[{{-12., -1.5724164372600449`}, {-11., \
-1.5724164372385296`}}], 
                    
                    LineBox[{{-11., -1.5724164372385296`}, {-10., \
-1.5724164373028338`}}], 
                    
                    LineBox[{{-10., -1.5724164373028338`}, {-9., \
-0.5724164371996489}}], 
                    
                    LineBox[{{-9., -0.5724164371996489}, {-8., \
-0.5724164372327176}}], 
                    
                    LineBox[{{-8., -0.5724164372327176}, {-7., \
-0.5724164372169436}}], 
                    
                    LineBox[{{-7., -0.5724164372169436}, {-6., \
-0.5724164371999475}}], 
                    
                    LineBox[{{-6., -0.5724164371999475}, {-5., 
                    0.0169171781054874}}], 
                    
                    LineBox[{{-5., 0.0169171781054874}, {-4., 
                    0.01691717810992113}}], 
                    
                    LineBox[{{-4., 0.01691717810992113}, {-3., 
                    0.016917178109935278`}}], 
                    
                    LineBox[{{-3., 0.016917178109935278`}, {-2., 
                    0.016917178109935215`}}], 
                    
                    LineBox[{{-2., 0.016917178109935215`}, {-1., 
                    0.01691717810984989}}], 
                    
                    LineBox[{{-1., 0.01691717810984989}, {
                    1.0358784011416632`*^-18, 0.01691717810984983}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    6.319517610793856*^-12}, {-0.25, 0}, 
                    Offset[8], {1., 1.0530182111624728`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"168\"", 
                    "\"168\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "168", "168"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-21.4, 
                    0.2565501376355924}, {-0.25, 0}, 
                    Offset[8], {1., 0.42758356270843473`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"83\"", "\"83\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "83", "83"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-21.4, -0.34344986233993646`}, {-0.25, 0}, 
                    Offset[8], {1., -0.5724164372507801}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"83\"", "\"83\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "83", "83"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.355555555555554`, 
                    0.4275835627404529}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888888857, -3.9745984281580604`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -0.5724164372792147}, {-0.25, 0}, 
                    Offset[8], {1., -6.494371707077562*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"41\"", "\"41\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "41", "41"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -1.1724164372533368`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000218137`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"41\"", "\"41\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "41", "41"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.955555555555556`, -0.572416437281963}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    2.5577318041314356`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.133333333333333`, -1.5724164373046317`}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.6615597786540093`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-19.4, -2.1724164372972594`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000586624`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.4, -2.5724164373287657`}, {-0.25, 0}, 
                    Offset[8], {1., -1.340128008564534*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.4, -2.5724164373133895`}, {-0.25, 0}, 
                    Offset[8], {1., 3.456079866737127*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -2.5724164372942786`}, {-0.25, 0}, 
                    Offset[8], {1., 8.810729923425242*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"5\"", "\"5\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "5", "5"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -2.572416437284317}, {-0.25, 0}, 
                    Offset[8], {1., 1.0729195309977513`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -2.5724164372849447`}, {-0.25, 0}, 
                    Offset[8], {1., -8.199663170671556*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"22\"", "\"22\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "22", "22"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -1.972416437274838}, {-0.25, 0}, 
                    Offset[8], {1., 1.000000000022311}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -1.5724164372623926`}, \
{-0.25, 0}, 
                    Offset[8], {1., 5.8688609527735025`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -1.5724164372471359`}, {-0.25, 0}, 
                    Offset[8], {1., 2.1515234038815834`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -1.5724164372771121`}, {-0.25, 0}, 
                    Offset[8], {1., -6.430411758628907*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -0.9724164372409227}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.000000000103185}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -0.5724164372194901}, {-0.25, 0}, 
                    Offset[8], {1., -3.3068769944577525`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -0.5724164372232532}, {-0.25, 0}, 
                    Offset[8], {1., 1.5774048733874224`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -0.572416437206746}, {-0.25, 0}, 
                    Offset[8], {1., 1.6996071217079134`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -0.21881626801668658`}, {-0.25, 0}, 
                    Offset[8], {1., 0.5893336153054349}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    0.016917178108147638`}, {-0.25, 0}, 
                    Offset[8], {1., 4.433727690544842*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.01691717810992962}, {-0.25, 0}, 
                    Offset[8], {1., 1.4148404670066839`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.01691717810993524}, {-0.25, 0}, 
                    Offset[8], {1., -6.245004513516506*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.01691717810988402}, {-0.25, 0}, 
                    Offset[8], {1., -8.532410888939523*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "160", "160"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    0.016917178109849853`}, {-0.25, 0}, 
                    Offset[8], {1., -6.245004513516506*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "160", "160"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-23., 1.4083438190194562`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 1.0531590455443747`*^-11}], 
                    Offset[{12, 12}, {-22., 1.0531590455443747`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-22., 
                    1.0531590455443747`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 0.4275835627189663}], 
                    Offset[{12, 12}, {-21., 0.4275835627189663}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-21., 0.4275835627189663}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -0.5724164372402485}], 
                    Offset[{12, 12}, {-21., -0.5724164372402485}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-21., -0.5724164372402485}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 0.0169171781054874}], 
                    Offset[{10, 10}, {-5., 0.0169171781054874}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 0.0169171781054874}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "80", ",", "80"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "80", ",", "80"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_3", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 80, 80}, {1, 80, 80}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -0.5724164373051922}], 
                    Offset[{12, 12}, {-20., -0.5724164373051922}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-20., -0.5724164373051922}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -1.5724164372620621`}], 
                    Offset[{12, 12}, {-20., -1.5724164372620621`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-20., -1.5724164372620621`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., -0.5724164371996489}], 
                    Offset[{10, 10}, {-9., -0.5724164371996489}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-9., -0.5724164371996489}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "40", ",", "40"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "40", ",", "40"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_2", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 40, 40}, {1, 40, 40}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., -1.5724164372659137`}], 
                    Offset[{10, 10}, {-13., -1.5724164372659137`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-13., -1.5724164372659137`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "20", ",", "20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "20", ",", "20"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_1", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 20, 20}, {1, 20, 20}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -2.5724164373207246`}], 
                    Offset[{12, 12}, {-19., -2.5724164373207246`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-19., -2.5724164373207246`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -2.572416437334126}], 
                    Offset[{10, 10}, {-18., -2.572416437334126}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-18., -2.572416437334126}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "10", ",", "10"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_1", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {1, 10, 10}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., -2.572416437299565}], 
                    Offset[{12, 12}, {-17., -2.572416437299565}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-17., -2.572416437299565}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -2.5724164372907543`}], 
                    Offset[{12, 12}, {-16., -2.5724164372907543`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-16., -2.5724164372907543`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -2.572416437280025}], 
                    Offset[{12, 12}, {-15., -2.572416437280025}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., -2.572416437280025}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -2.5724164372882248`}], 
                    Offset[{12, 12}, {-14., -2.5724164372882248`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-14., -2.5724164372882248`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., -1.5724164372600449`}], 
                    Offset[{10, 10}, {-12., -1.5724164372600449`}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., -1.5724164372600449`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "20", ",", "20"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_2", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 20, 20}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -1.5724164372385296`}], 
                    Offset[{12, 12}, {-11., -1.5724164372385296`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-11., -1.5724164372385296`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -1.5724164373028338`}], 
                    Offset[{12, 12}, {-10., -1.5724164373028338`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-10., -1.5724164373028338`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., -0.5724164372327176}], 
                    Offset[{10, 10}, {-8., -0.5724164372327176}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., -0.5724164372327176}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "40", ",", "40"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_3", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 40, 40}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -0.5724164372169436}], 
                    Offset[{12, 12}, {-7., -0.5724164372169436}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-7., -0.5724164372169436}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -0.5724164371999475}], 
                    Offset[{12, 12}, {-6., -0.5724164371999475}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-6., -0.5724164371999475}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 0.01691717810992113}], 
                    Offset[{10, 10}, {-4., 0.01691717810992113}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 0.01691717810992113}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "80", ",", "80"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_4", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 80, 80}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 0.016917178109935278`}], 
                    Offset[{12, 12}, {-3., 0.016917178109935278`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3., 0.016917178109935278`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 0.016917178109935215`}], 
                    Offset[{12, 12}, {-2., 0.016917178109935215`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-2., 0.016917178109935215`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., 0.01691717810984989}], 
                    Offset[{12, 12}, {-1., 0.01691717810984989}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-1., 0.01691717810984989}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.0358784011416632`*^-18, 0.01691717810984983}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQHmB7xccl9ei7tpA+GbHXhguET5kMZyWwjf9ID4
ze6i9tjb9jB+ScUWN5vAR/shfJEDERMuzNoTNBEqb3KgNHUvkrzJgV+7o5Xn
afyE8pUO/H68Dkle68Ce/8jyxgf+Plwv6D+F5QCEb3TgXvgGJL7hgXvqyPIG
B+JurUPi6x34V43M1zkgdwSZr3GgdgayfWoH/spGIfFVDth2xiHxFQ7U5G9G
cq/MgRqXjUh8iQO175D9I3DAXeAJUnhwHDBVQOYzHFBG4X/YL3TgMZjPtFpN
9Yy0sQ0DlA8ADNGDpA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 20, 24, 24, 20, 20, 24, 20, 24, 24, 
                    24, 24, 20, 24, 24, 20, 24, 24, 20, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {861., 151.00000000261025`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "crop_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "concat_3"], 
                    NeuralNetworks`NetPath["Nodes", "crop_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "concat_2"], 
                    NeuralNetworks`NetPath["Nodes", "concat_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "crop_1"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_2"], 
                    NeuralNetworks`NetPath["Nodes", "conv_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_3"], 
                    NeuralNetworks`NetPath["Nodes", "conv_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_4"], 
                    NeuralNetworks`NetPath["Nodes", "conv_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_5"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {168, 168}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]]], 
                    Association["Output" -> NetDecoder["Image", 
                    Association[
                    "ColorSpace" -> "Grayscale", "MeanImage" -> None, 
                    "VarianceImage" -> None, "$Dimensions" -> {160, 160}, 
                    "$Channels" -> 1], 
                    
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "enc_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {168, 168}, 
                    "$OutputSize" -> {166, 166}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 166, 166}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {166, 166}, 
                    "$OutputSize" -> {83, 83}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "crop_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 80], 
                    Span[1, 80]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 80, 80}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "enc_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {83, 83}, 
                    "$OutputSize" -> {83, 83}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 83, 83}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {83, 83}, 
                    "$OutputSize" -> {41, 41}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "crop_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 40], 
                    Span[1, 40]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 40, 40}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "enc_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {41, 41}, 
                    "$OutputSize" -> {41, 41}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 41, 41}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {41, 41}, 
                    "$OutputSize" -> {20, 20}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "enc_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {10, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "dropout_1" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "enc_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {5, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 5, 5}, NeuralNetworks`RealT]]],
                     "dec_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {5, 5}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "dec_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {22, 22}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 22, 22}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "crop_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 20], 
                    Span[1, 20]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 20, 20}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "concat_1" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]]], "dropout_2" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]]], "conv_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "dec_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "concat_2" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]]], "dropout_3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "dec_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "concat_3" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]]], "dropout_4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]]], "conv_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "dec_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "map" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1, 160, 160}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7344268375256786`*^9, 3.734426861138473*^9}, 
   3.734427061137633*^9, 3.734427115595419*^9, 3.734500376568697*^9, 
   3.7345004992236586`*^9, 3.734501419280098*^9, 3.7345023444974794`*^9, {
   3.7345040073868685`*^9, 3.7345040327426224`*^9}, 3.734504666075648*^9, 
   3.7345048774927464`*^9, 3.734506504055966*^9, 3.7345065973240023`*^9, {
   3.7345069465317125`*^9, 3.7345070008280783`*^9}, 3.7345079772644043`*^9, 
   3.734508100261501*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"a5cf08b6-b979-421e-96a7-60bb8ad0cbdf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"dat", ",", "validationdata", ",", "hidden"}], "}"}], "=", 
   RowBox[{"dataPrep", "[", 
    RowBox[{"dirimg", ",", "dirmasks"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7344271692470994`*^9, 3.734427244493208*^9}, {
  3.734500464931074*^9, 3.7345004710012712`*^9}, {3.7345040363487787`*^9, 
  3.7345040453956785`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"7891cbda-b487-462d-94b5-249297a92d6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetInfo", "=", 
  RowBox[{"trainNet", "[", 
   RowBox[{"nNet", ",", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"First", "@", "dat"}], ",", 
      RowBox[{"First", "@", "validationdata"}]}], "]"}], ",", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Last", "@", "dat"}], ",", 
      RowBox[{"Last", "@", "validationdata"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7344273022668505`*^9, 3.734427364643739*^9}, {
   3.7345005711395216`*^9, 3.734500572914296*^9}, {3.734502864997469*^9, 
   3.7345028669065466`*^9}, {3.7345030893380795`*^9, 3.734503089911604*^9}, {
   3.734503362850651*^9, 3.73450336347832*^9}, 3.7345036682234488`*^9, {
   3.734504054230184*^9, 3.734504081053206*^9}, {3.7345072114752407`*^9, 
   3.734507243779148*^9}, {3.734507307871603*^9, 3.7345073092332172`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a0b0f955-e14c-4f09-b35a-90d83cb33965"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"2.1 min\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["100", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["4700", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["8", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["0.15275468422654778`", "SummaryItem"]}}, 
              BaselinePosition -> Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw9yw8wFnYcx/FnKmNrzm6IyWRnJn+faSXy5+PxXw/P4/nvhG3Jo9af03Ln
uaFHMdXC4Yada7NjZy2NNJM9/rVEITQ8hRjlX1F0uTaOx7bb77vf3e9+97r3
72PzyTHRAT0OhxP/z/33pdOwMHK/wLOt5T8t+urGMvbFnb3NzIF6+cWh4OVu
ZgPEGnMdt0/3MhvD1XX662W/35lNoJSUpNZc62c2x/U72cXrMwPMW+Gcm+b8
DlfLvA3aAxdPJC7fY34XU/02bvu5D5htYVGfadd8+g9mO3Qb1QYuOY4z22PN
zHJtNoPsgPH7lr0mk2Qn3FO9vOW1fYLZBeKd6Wf4KjIXZQ4J2oUO8gdoGtni
kmz3kNkNf3bkl/IqyTtQpz7x/uQ4+UMo9e+WnvV/xLwTgry3/uLlkHfhu5xX
7PT7yO7wyVdbjhpPMu/GaoN5paEb2QMmw0fFFklkTzytX8gOqSDvwfCR/RsP
DZO9II7a+DLQaorZG+3ay50cM7IP3uyfWtMlk31hfPDHdW0qGTjsarqyoZ1Z
DZxPMO2teUbdD81Xnvnoc6dZ98Pol1nmUx8xc3goPWXp3ZJAnYfjedGZdaeo
++OC6Ga6oIq6P14LLdDZXKcegMT83dFJ/dQD8J7JcaWX4QzrgVhpTfvh47eZ
1YFINZx+9IJLPQhtyqjP/fjUg8B99aip6hj1YOh1z3byy6kHo2jU/kFJF/UQ
lMS5v/6wjnoIknLH27c0Ug/FnqGeAfki9VBUxybmbZqjHoaC9pX26iXqYTD/
VZQwETnL+l48t9DEnwxiVu+Fs7hgs5+EOh89XUZfdcqo83ElOkZjVkQ9HNZ9
1hXN31MPR4qtVXxROvUItMwX/zLbQT0C0Zeczo0MUhdAdbNHT9FHXYDxdn25
TkddCIPcBc8qJTOEqJiPM6n1of9CaCXuFpyDzK1CeO1KNvRbpH0kBu9I207z
HrN9JC4EXpPM85nVkchK83i8LmBujYRzs6b2qjMzR4TNV8Orn4bSXoTKpKJU
TRTtReA1nvHIzKa9CEcccppUl2gvRlbMdIppGe3FKIye+NSrl/ZiOB3+7bzV
AO3FUMU2xowN0l6CN6pcHd1/or0EpfYuHT9raS+B1Kus+dsvaC9BeXnhWMZt
2kshGV5Ks52ivRRWQzduBJHVUlgrZLqwWdpLYekbPGrdRHsZBDOfpTzvor0M
AYXD52qHaC+Dxr9hjjNKexnu1pae3HaL9nIIRhqWNcu0l2OwQ2n0DecJ28sR
UdOYI9zA3CpHsXCy/vIq7RWQeNtXCf/fKzBnsbrJwYD2Cuy7qOuq20F7Bcor
vNPqtz5p+Rv9GSV9
                    "]]}, {}}, {}}, ImageSize -> {132, 82}, Frame -> True, 
                  Axes -> None, AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRange -> {{0, 99}, {-1., 0.}}, 
                  GridLines -> {{20, 40, 60, 80, 100}, {{-1., 
                    GrayLevel[0.9]}, {-0.6989700043360187, 
                    GrayLevel[0.95]}, {-0.5228787452803375, 
                    GrayLevel[0.95]}, {-0.39794000867203755`, 
                    GrayLevel[0.95]}, {-0.30102999566398114`, 
                    GrayLevel[0.95]}, {-0.22184874961635626`, 
                    GrayLevel[0.95]}, {-0.1549019599857432, 
                    GrayLevel[0.95]}, {-0.09691001300805638, 
                    GrayLevel[0.95]}, {-0.04575749056067506, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.734504215327655*^9, 3.734504467983219*^9, 
  3.734504657277434*^9, 3.73450480530715*^9, 3.7345050007248693`*^9, 
  3.7345068106403036`*^9, 3.734507122192043*^9, 3.734507249497357*^9, 
  3.7345074310431786`*^9, 3.7345080491957283`*^9, 3.734508097906237*^9, 
  3.7345082306726055`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"74ffe01f-2f05-4c87-8111-6e867c68be5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetInfo", "[", "\"\<LossEvolutionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.734505066644539*^9, 3.7345050734986153`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"ea318cd3-342d-4270-afc4-a1d80932cd76"],

Cell[BoxData[
 GraphicsBox[
  {AbsoluteThickness[
   1.25], {{InsetBox["20", Offset[{-2, 0}, {940, 0.05}], {1., 1.}], 
     InsetBox["40", Offset[{-2, 0}, {1880, 0.05}], {1., 1.}], 
     InsetBox["60", Offset[{-2, 0}, {2820, 0.05}], {1., 1.}], 
     InsetBox["80", Offset[{-2, 0}, {3760, 0.05}], {1., 1.}], 
     InsetBox["100", Offset[{-2, 0}, {4700, 0.05}], {1., 1.}]}, InsetBox[
     TemplateBox[{"10","\"-1\""},
      "Superscript"], Offset[{3, 0}, {0, -1.}], {-1, -1.}]}, {
    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
      "]]}, {}}, {}},
  AspectRatio->Full,
  Axes->None,
  Background->GrayLevel[1],
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
    ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
  Frame->True,
  FrameLabel->{{
     FormBox["\"loss\"", TraditionalForm], None}, {None, 
     FormBox["\"rounds\"", TraditionalForm]}},
  FrameStyle->GrayLevel[0.5],
  FrameTicks->None,
  GridLines->{{940, 1880, 2820, 3760, 4700}, {{-1., 
      GrayLevel[0.3001]}, {-0.6989700043360187, 
      GrayLevel[0.8501]}, {-0.5228787452803375, 
      GrayLevel[0.8501]}, {-0.39794000867203755`, 
      GrayLevel[0.8501]}, {-0.30102999566398114`, 
      GrayLevel[0.8501]}, {-0.22184874961635626`, 
      GrayLevel[0.8501]}, {-0.1549019599857432, 
      GrayLevel[0.8501]}, {-0.09691001300805638, 
      GrayLevel[0.8501]}, {-0.04575749056067506, 
      GrayLevel[0.8501]}}},
  ImagePadding->{{20, 1}, {1, 20}},
  ImageSize->{471, 201},
  PlotRange->{{0, 4683}, {-1., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{0, 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{3.7345050741736608`*^9, 3.734506816934031*^9, 
  3.734507127909899*^9, 3.7345074519838476`*^9, 3.7345082340126805`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"f5428694-2e2d-4c51-9210-3744d19ba050"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetTrained", "=", 
  RowBox[{"nNetInfo", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.734503314120943*^9, 3.7345033963756385`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"9a0c1265-49d5-4df8-a747-70708854ccf4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["24", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-23., 1.4083438190194562`*^-15}, {-22., 
                    1.0531590455443747`*^-11}}], 
                    
                    LineBox[{{-22., 1.0531590455443747`*^-11}, {-21., 
                    0.4275835627189663}}], 
                    
                    LineBox[{{-22., 
                    1.0531590455443747`*^-11}, {-21., -0.5724164372402485}}], 
                    LineBox[CompressedData["
1:eJxN1n9Q03Ucx3FF88zRiToGsuFgbGwM2G+NLPlegTXtEiPP6w4prfBUzG7U
XSJYBmEdm4M5ILfKYiwwBaS8UMMfL1ATQhJUBEG9VOrAw5LcaZrcxT4f/ni/
bxz3PPh+77H358uP2Lfey8wJmTJlinfiI/iZz0JEXLHnfZY9KIzMb9k6fs+C
2f28wxOmZRz+04LRy7yLk/uLkvstaOjlbVAvFq9tt2DlJd5ySfACC/ov8F75
yJ/xyG/B0h7euNjwcJ3LgqrzvN/3pU3dWWhBZxfv9WwsGOrkzS7PsKD5V97O
WykTLwuiJr8epwiOBaGT1x9eK2peK7LA0c172TeBiZcZeye9168Fx4zUq7zz
ZGdtsrNmbBniPSOr6YmsJjN0f1GPGQfFDuIxY0mcg3jMOL7IQTwT12fwbmYe
M+ybeS9nHhMGnQ7iMUHa7CAeE16+6SAeE3Ln7SIeExrbeT9kHhMiQ5zEY4J1
iZN4TFiyzUk8Jtw/4iQeI2wPncRjxKFny4jHiJ8/LiMeI0rOlBGPEfOaysl+
jAgLlBOPEVq9izXjKIx4Y52LeIz4vtRFPAaEHXARjwHlbS7iMUDb4yIeA65f
dhGPAfmT3889BjScdBGPAZW/uMh+DND3UY8BhWO8K1JH3KkjehSE72Z9rCU4
eujSeLPbOfWo2MZbxG6gR2ML765zwdHhwFE36wB7IHVYFVrBOjr4dmw6zMjh
vTQ9ODq0neKd2yrZ3CrRoURTybqSeZKR6a4knmRoplexHmKeZMwo4B3KPMm4
86CKeJKQtm8P8SRht8pDPEnwujzEk4SsUd6bmScJ3Qu9ZD+JGH/XSzyJuFnh
JZ5EfLTfSzyJ6Gn0Eo8WL9i8xKPFP1m82XHbtEh5ifeLzKOFxOwlHi0+lfN2
M08CSkOpJwHKRx7iScCqYQ/xJCCqjzfjnNNgXzXve8yjQfnkPrhHg5Ai3oyT
rsHjPA85Lw12vOMh+1GjdLWHeNRYsIx61Fj8nIc8P2r8rveQ/cQjdJaH7Cce
W8TUE49Dy+l5xWOgnp5XPG4spuelQkeA7keFyoEviUeF50e/Ih4VzifsJR4l
+sd8xKOE/VU/eX6UuGX7jniUuJ5ZSzxKbA/UEk8c2lbXEU8c9ufXEU8cUrLr
yHnFYePUOnJeCvS1+sl5KdAu8ZP9KPCavYZ4FLDJa4hHAdVFH/HEYkutj3hi
scLjI55YnD7gI55YdF/zkf3EwDfLT/YTg7p11BODGzV+4onBKz1+4onBnRHe
mu0X1NsvyHHiDu+tHwZHjtNXebcHbyeTY7yZdwS7wQJsKuTt9QQnGjPf5u93
mP2ARKNYxPsZ9gtRhp1HuL/08+DIELaJd/CvfVGyDNIYH/FI0TRQTTxSdHiq
iUeKjdm8I5knCmWqauKZj0vF37I+VV8bCKTOR7E1RN6ZOij4xorXz/0jEkf/
VSurbg4IT28w/j1mj0RexZyiYeuAsCPsoNNtjkS99GRKm+2KUHj7cfqDwQjk
Og3WuOx+QXc/am50SQQOjuY0iUR9QpX5yfvT9RH4YNGbtoKCXuFH39m7jVck
OJErs+c1XhSK0laHSEsksDu+Hr9b0yN01T+4pI2XANaZw+kbfhM68xZaRV3h
yBgdzJ7b2yHkV85ecyw/HK3Tmtcsd54ResU7w1KTwhFeVjU06m4Vhu7uySkf
EuML2X+373W2CL4Ea9YhnxjnQy4vuDXzJ2HOSfdY7XoxKqsLOlYcbxAMPxRo
cg1iyJ7Kyf/E6xP4/2NivF7e7T2W6RL+BxAN0Ks=
                    "]], 
                    
                    LineBox[{{-21., -0.5724164372402485}, {-20., \
-0.5724164373051922}}], 
                    
                    LineBox[{{-21., -0.5724164372402485}, {-20., \
-1.5724164372620621`}}], 
                    LineBox[CompressedData["
1:eJxN1X9I3HUcx/Fb4RpTomhII134/d6P7/30+yOGzMMC9WBRWBusNSOmoLB0
ipnMsYmwQIjAbBo1KGVhZGvzPOXO+95X52uutihrAyNlMLE5Nc/NP+YYujHJ
7+ftH+8P3+N48r3vl8f38/ne95tXWX+g6hmHw3F882N/03gNTVWjkfC7d8bS
u63mp6sGclzU2d5ny4YXDDhmRkR/Gpw+E5w2kNtBrXr27Tr6m4FPCqlfFQcY
yJi1RL/zuLfsca+Bmy3UmLy0XvGlgX92UTd+X7yt7bSB7B9SoqvFMPBFiFoc
XmbgX5ii2+cKNjcDF2qoZckeBpZD1ImjmZubgfM7qd/sebi/56GOvzaSomdu
20NHYybt/zjnekPOdR3tKvX28oGM8gEdeXUm8+goPk+edeHRUfckxTw6Piq1
mEeH3moxj47f+yzm0aCOW8yjoeoPi3k0HPvFYh4N4UsW82h44RWLzY+GqWXu
0bBnlFpwJA1z7Snm0eCuSDGPikUjxTwqlOdSzKNi4RafHxVSlM+Pihdlk3lU
XFtLMo+KBzeSbH5UdPUlmUfFxTPUXUVLnUVL+dj3IfWIZY98FBVSi9O158Pc
TZ0pTpCPC+vDov+csEcIM19T21e3vyeEyZPUufblNIRQX05dWmKPEAbD1DVX
smuvZIdwLpf6K+EJwrORYJ4gPpihvis8Qey9TJ0lPEEMf5dgngDO6gnmCeDH
lxLME8CjtTjzBHD6DnWt8ARQcDPO5seP4Hicefw4kowzjx+jg3Hm8eP9WJx5
fIiMxZnHh8qr1GK5G3yY/pU6Ijw+9F3jHh9ubO3vFB4vDl7lHi/UMe7xotrk
Hi8ebXkEZ0JB51nqVeFR0N3BPQq+6aYWnBIFLSNxtl4K3krz+fFgh8LXy4OB
Jr5eHhRPJtj948H4G/z+cSOSTrL5cSN62GQeN5RzJlsvN4Z+Ntn8uPF2h8k8
LqxFTOZxYWjr/0AeF1p9/H52ofw97nEiODvEPE58OzXI7h8nHCsx5nHiiBxj
Hid+OjHAPDJW0lHmkaG0RJlHxqFQlK2XjFMb/aINMWR03acWr4vtMvR71K2H
e7PCtyXMp6krxAVJuLjUz57/Etr+o+6OfT71er2EpsV+9vyQ0LxA/bf9c11C
xzy1f+Kz5zNelmDdpab3l4Qnc9T/A+xmfIM=
                    "]], 
                    LineBox[CompressedData["
1:eJxN1FtIFGEYxvHtoBe5SEItJoqoF9nMHmbm8yLKtDBBO6CU5q67s3ggIzLM
uskwSqMlrRZCA4lwQUQICoxKkRV6hMgiFTJBk4xAKZWKQm8Uw3a+9+Z9mWX4
MTvDf75hJqOm4dTZrTabrTj2s/Y0OViP+rO6s9deL++JXv23IjCxQHbs21Yy
+F3gV1JA+pZrptU1I1BZQNb2HthV9U4gqYmcLk8QcLwgl673lqz3CtT9JePT
s7XqBwLbc0zpKz0FW0LNAj+vkevkCGS8JcvTSwRuJwalw/P7Y5vAxglyVqY1
AqEW8kBVQmwTSH9KPhZZLY6sGpgYI3+ds8ZAeJ58OXW0MXXUQNUfcry/P87f
b6BwJch6DBz8SF6TPQY+vOE9BpoHeY+B0ie8x8CRR7xHx5l23qOjvYn36Ph2
jvfoqCjnPTqKdgfZ+ujosfEeHdXLtH4yJ1NHaNJkPTp2DpmsR4Ot22Q9Gspa
TNajwV5rsh4NagF/XhruTAVYj4balwHWo6G9K8DWR8PGzQDr0fDqIrkzb6kj
b8mDaJA8HLXGA3sZWV4u7EHfSXKCvIAH946Tx8escaO5gmzdXXHEjR/l5DTr
dhpjx4vIhUetcSPPQ74w4qgfcbiRvYP8UPa4cPizn/W40PqYvCB7XPh9mmyX
PS6ENitZjxOXhnysx4mUoI/1OHE+2cd6nAgueqXrZY8TK+Netj4qPO+9rEdF
4qyX9ajosPlYj4rhXHKOsEZFW5icYr3u8So6F8k3vL323DkF1w9Rf41cYAX5
9yvZ+6vgyzQ58vzudH6DgrI0P3v+CvpM8pT1d0PBZBdZHWtLjEtWMDtBpu+P
guFN8n8zyj4A
                    "]], 
                    
                    LineBox[{{-20., -1.5724164372620621`}, {-19., \
-2.5724164373207246`}}], 
                    
                    LineBox[{{-19., -2.5724164373207246`}, {-18., \
-2.572416437334126}}], 
                    
                    LineBox[{{-18., -2.572416437334126}, {-17., \
-2.572416437299565}}], 
                    
                    LineBox[{{-17., -2.572416437299565}, {-16., \
-2.5724164372907543`}}], 
                    
                    LineBox[{{-16., -2.5724164372907543`}, {-15., \
-2.572416437280025}}], 
                    
                    LineBox[{{-15., -2.572416437280025}, {-14., \
-2.5724164372882248`}}], 
                    
                    LineBox[{{-14., -2.5724164372882248`}, {-13., \
-1.5724164372659137`}}], 
                    
                    LineBox[{{-13., -1.5724164372659137`}, {-12., \
-1.5724164372600449`}}], 
                    
                    LineBox[{{-12., -1.5724164372600449`}, {-11., \
-1.5724164372385296`}}], 
                    
                    LineBox[{{-11., -1.5724164372385296`}, {-10., \
-1.5724164373028338`}}], 
                    
                    LineBox[{{-10., -1.5724164373028338`}, {-9., \
-0.5724164371996489}}], 
                    
                    LineBox[{{-9., -0.5724164371996489}, {-8., \
-0.5724164372327176}}], 
                    
                    LineBox[{{-8., -0.5724164372327176}, {-7., \
-0.5724164372169436}}], 
                    
                    LineBox[{{-7., -0.5724164372169436}, {-6., \
-0.5724164371999475}}], 
                    
                    LineBox[{{-6., -0.5724164371999475}, {-5., 
                    0.0169171781054874}}], 
                    
                    LineBox[{{-5., 0.0169171781054874}, {-4., 
                    0.01691717810992113}}], 
                    
                    LineBox[{{-4., 0.01691717810992113}, {-3., 
                    0.016917178109935278`}}], 
                    
                    LineBox[{{-3., 0.016917178109935278`}, {-2., 
                    0.016917178109935215`}}], 
                    
                    LineBox[{{-2., 0.016917178109935215`}, {-1., 
                    0.01691717810984989}}], 
                    
                    LineBox[{{-1., 0.01691717810984989}, {
                    1.0358784011416632`*^-18, 0.01691717810984983}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    6.319517610793856*^-12}, {-0.25, 0}, 
                    Offset[8], {1., 1.0530182111624728`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"168\"", 
                    "\"168\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "168", "168"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-21.4, 
                    0.2565501376355924}, {-0.25, 0}, 
                    Offset[8], {1., 0.42758356270843473`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"83\"", "\"83\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "83", "83"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-21.4, -0.34344986233993646`}, {-0.25, 0}, 
                    Offset[8], {1., -0.5724164372507801}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"83\"", "\"83\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "83", "83"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.355555555555554`, 
                    0.4275835627404529}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888888857, -3.9745984281580604`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -0.5724164372792147}, {-0.25, 0}, 
                    Offset[8], {1., -6.494371707077562*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"41\"", "\"41\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "41", "41"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -1.1724164372533368`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000218137`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"41\"", "\"41\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "41", "41"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.955555555555556`, -0.572416437281963}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    2.5577318041314356`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.133333333333333`, -1.5724164373046317`}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.6615597786540093`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-19.4, -2.1724164372972594`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000586624`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.4, -2.5724164373287657`}, {-0.25, 0}, 
                    Offset[8], {1., -1.340128008564534*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.4, -2.5724164373133895`}, {-0.25, 0}, 
                    Offset[8], {1., 3.456079866737127*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -2.5724164372942786`}, {-0.25, 0}, 
                    Offset[8], {1., 8.810729923425242*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"5\"", "\"5\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "5", "5"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -2.572416437284317}, {-0.25, 0}, 
                    Offset[8], {1., 1.0729195309977513`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -2.5724164372849447`}, {-0.25, 0}, 
                    Offset[8], {1., -8.199663170671556*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"22\"", "\"22\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "22", "22"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -1.972416437274838}, {-0.25, 0}, 
                    Offset[8], {1., 1.000000000022311}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -1.5724164372623926`}, \
{-0.25, 0}, 
                    Offset[8], {1., 5.8688609527735025`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -1.5724164372471359`}, {-0.25, 0}, 
                    Offset[8], {1., 2.1515234038815834`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -1.5724164372771121`}, {-0.25, 0}, 
                    Offset[8], {1., -6.430411758628907*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -0.9724164372409227}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.000000000103185}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -0.5724164372194901}, {-0.25, 0}, 
                    Offset[8], {1., -3.3068769944577525`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -0.5724164372232532}, {-0.25, 0}, 
                    Offset[8], {1., 1.5774048733874224`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -0.572416437206746}, {-0.25, 0}, 
                    Offset[8], {1., 1.6996071217079134`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -0.21881626801668658`}, {-0.25, 0}, 
                    Offset[8], {1., 0.5893336153054349}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    0.016917178108147638`}, {-0.25, 0}, 
                    Offset[8], {1., 4.433727690544842*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.01691717810992962}, {-0.25, 0}, 
                    Offset[8], {1., 1.4148404670066839`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.01691717810993524}, {-0.25, 0}, 
                    Offset[8], {1., -6.245004513516506*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.01691717810988402}, {-0.25, 0}, 
                    Offset[8], {1., -8.532410888939523*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "160", "160"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    0.016917178109849853`}, {-0.25, 0}, 
                    Offset[8], {1., -6.245004513516506*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "160", "160"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-23., 1.4083438190194562`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 1.0531590455443747`*^-11}], 
                    Offset[{12, 12}, {-22., 1.0531590455443747`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-22., 
                    1.0531590455443747`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 0.4275835627189663}], 
                    Offset[{12, 12}, {-21., 0.4275835627189663}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-21., 0.4275835627189663}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -0.5724164372402485}], 
                    Offset[{12, 12}, {-21., -0.5724164372402485}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-21., -0.5724164372402485}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 0.0169171781054874}], 
                    Offset[{10, 10}, {-5., 0.0169171781054874}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 0.0169171781054874}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "80", ",", "80"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "80", ",", "80"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_3", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 80, 80}, {1, 80, 80}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -0.5724164373051922}], 
                    Offset[{12, 12}, {-20., -0.5724164373051922}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-20., -0.5724164373051922}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -1.5724164372620621`}], 
                    Offset[{12, 12}, {-20., -1.5724164372620621`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-20., -1.5724164372620621`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., -0.5724164371996489}], 
                    Offset[{10, 10}, {-9., -0.5724164371996489}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-9., -0.5724164371996489}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "40", ",", "40"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "40", ",", "40"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_2", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 40, 40}, {1, 40, 40}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., -1.5724164372659137`}], 
                    Offset[{10, 10}, {-13., -1.5724164372659137`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-13., -1.5724164372659137`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "20", ",", "20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "20", ",", "20"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_1", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 20, 20}, {1, 20, 20}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -2.5724164373207246`}], 
                    Offset[{12, 12}, {-19., -2.5724164373207246`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-19., -2.5724164373207246`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -2.572416437334126}], 
                    Offset[{10, 10}, {-18., -2.572416437334126}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-18., -2.572416437334126}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "10", ",", "10"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_1", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {1, 10, 10}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., -2.572416437299565}], 
                    Offset[{12, 12}, {-17., -2.572416437299565}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-17., -2.572416437299565}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -2.5724164372907543`}], 
                    Offset[{12, 12}, {-16., -2.5724164372907543`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-16., -2.5724164372907543`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -2.572416437280025}], 
                    Offset[{12, 12}, {-15., -2.572416437280025}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., -2.572416437280025}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -2.5724164372882248`}], 
                    Offset[{12, 12}, {-14., -2.5724164372882248`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-14., -2.5724164372882248`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., -1.5724164372600449`}], 
                    Offset[{10, 10}, {-12., -1.5724164372600449`}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., -1.5724164372600449`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "20", ",", "20"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_2", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 20, 20}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -1.5724164372385296`}], 
                    Offset[{12, 12}, {-11., -1.5724164372385296`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-11., -1.5724164372385296`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -1.5724164373028338`}], 
                    Offset[{12, 12}, {-10., -1.5724164373028338`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-10., -1.5724164373028338`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., -0.5724164372327176}], 
                    Offset[{10, 10}, {-8., -0.5724164372327176}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., -0.5724164372327176}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "40", ",", "40"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_3", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 40, 40}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -0.5724164372169436}], 
                    Offset[{12, 12}, {-7., -0.5724164372169436}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-7., -0.5724164372169436}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -0.5724164371999475}], 
                    Offset[{12, 12}, {-6., -0.5724164371999475}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-6., -0.5724164371999475}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 0.01691717810992113}], 
                    Offset[{10, 10}, {-4., 0.01691717810992113}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 0.01691717810992113}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "80", ",", "80"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_4", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 80, 80}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 0.016917178109935278`}], 
                    Offset[{12, 12}, {-3., 0.016917178109935278`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3., 0.016917178109935278`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 0.016917178109935215`}], 
                    Offset[{12, 12}, {-2., 0.016917178109935215`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-2., 0.016917178109935215`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., 0.01691717810984989}], 
                    Offset[{12, 12}, {-1., 0.01691717810984989}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-1., 0.01691717810984989}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.0358784011416632`*^-18, 0.01691717810984983}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQHmB7xccl9ei7tpA+GbHXhguET5kMZyWwjf9ID4
ze6i9tjb9jB+ScUWN5vAR/shfJEDERMuzNoTNBEqb3KgNHUvkrzJgV+7o5Xn
afyE8pUO/H68Dkle68Ce/8jyxgf+Plwv6D+F5QCEb3TgXvgGJL7hgXvqyPIG
B+JurUPi6x34V43M1zkgdwSZr3GgdgayfWoH/spGIfFVDth2xiHxFQ7U5G9G
cq/MgRqXjUh8iQO175D9I3DAXeAJUnhwHDBVQOYzHFBG4X/YL3TgMZjPtFpN
9Yy0sQ0DlA8ADNGDpA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 20, 24, 24, 20, 20, 24, 20, 24, 24, 
                    24, 24, 20, 24, 24, 20, 24, 24, 20, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {861., 151.00000000261025`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "crop_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "concat_3"], 
                    NeuralNetworks`NetPath["Nodes", "crop_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "concat_2"], 
                    NeuralNetworks`NetPath["Nodes", "concat_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "crop_1"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_2"], 
                    NeuralNetworks`NetPath["Nodes", "conv_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_3"], 
                    NeuralNetworks`NetPath["Nodes", "conv_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_4"], 
                    NeuralNetworks`NetPath["Nodes", "conv_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_5"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {168, 168}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]]], 
                    Association["Output" -> NetDecoder["Image", 
                    Association[
                    "ColorSpace" -> "Grayscale", "MeanImage" -> None, 
                    "VarianceImage" -> None, "$Dimensions" -> {160, 160}, 
                    "$Channels" -> 1], 
                    
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "enc_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {168, 168}, 
                    "$OutputSize" -> {166, 166}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 166, 166}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {166, 166}, 
                    "$OutputSize" -> {83, 83}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "crop_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 80], 
                    Span[1, 80]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 80, 80}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "enc_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {83, 83}, 
                    "$OutputSize" -> {83, 83}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 83, 83}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {83, 83}, 
                    "$OutputSize" -> {41, 41}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "crop_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 40], 
                    Span[1, 40]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 40, 40}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "enc_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {41, 41}, 
                    "$OutputSize" -> {41, 41}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 41, 41}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {41, 41}, 
                    "$OutputSize" -> {20, 20}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "enc_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {10, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "dropout_1" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "enc_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {5, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 5, 5}, NeuralNetworks`RealT]]],
                     "dec_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {5, 5}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "dec_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {22, 22}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 22, 22}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "crop_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 20], 
                    Span[1, 20]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 20, 20}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "concat_1" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]]], "dropout_2" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]]], "conv_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "dec_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "concat_2" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]]], "dropout_3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "dec_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "concat_3" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]]], "dropout_4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]]], "conv_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "dec_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "map" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1, 160, 160}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7345033195318513`*^9, 3.734503338435007*^9}, {
   3.7345033786575785`*^9, 3.73450341867851*^9}, {3.734504220366514*^9, 
   3.7345042329870358`*^9}, 3.7345044738686523`*^9, 3.7345048102411356`*^9, 
   3.7345050065961137`*^9, 3.734506819301328*^9, 3.7345071301130066`*^9, 
   3.7345074546790156`*^9, 3.734508236013119*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"f9d503e3-8d29-4092-b0f2-da1d0473aadf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"img", "=", 
  RowBox[{"hidden", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7345012817651043`*^9, 3.7345013043541775`*^9}, {
  3.7345020120578413`*^9, 3.7345020296756945`*^9}, {3.7345020719932337`*^9, 
  3.7345020722378836`*^9}, {3.7345024989080925`*^9, 3.734502555309085*^9}, {
  3.7345026226331406`*^9, 3.734502622696309*^9}, {3.7345027446658545`*^9, 
  3.734502778160941*^9}, {3.7345054515623093`*^9, 3.7345054855733767`*^9}, {
  3.7345068484969697`*^9, 3.734506855263966*^9}, {3.7345071519288225`*^9, 
  3.73450716358698*^9}, {3.734508248725981*^9, 3.734508252908126*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"dc004a3a-02b4-41b9-b12a-68ad236add4c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxkvPdTo+mWJth7K/EeJBBOAuFBgPBe3iHvvfcGSYAA4T1JJi4N6X1mmazM
MjersuytutXXdN+evrdnN6J7ZyZ2ftmdmIn5ZSM2NmL3D9jzvp/IrN39EoQg
QXq+Y57znNc1epPa4G/+7u/+LpULD1pPmjs/71nRlcI3hkQqEkoE/NOJhUAo
MD/qRb/2aeZzYHhkbHR8dGx8cmqKJxTyptgCkUTI53G4PL6Az+NxWFOTE1Ms
+BYuPp8vFApFYrFYMj0NjyL4RiQRCwToN+ESoIvPhwehgPg9Efzi9LQULplC
pZBJZDqL2aDWmqwmtVwmk05L4WWE8EZcNrzP2OjwILOnq6O9raWpiU5vQldz
SytcbW0jY2Ojo2NjE1Nsvkgs4PDEcqmQxwGM6K3ZLNbkJGDkCwV8AcBEby6C
B6FYKBAJMTj0wOVwOFz8weHCBT9Fjxm8IgRXijBNyxVSkVCiMpp0Gr3VqlfK
5ARQEXozLmtyYmxsZLC/l9HZ3tba3NTUSKcjsM0tLS2tTSOj2JZsnkgCCKbl
MjGgFKK/5LDgFtlcHkaE3lQogn9CsBS8Kh8BYiNoLPhj+FU2mz3FQhcb/WNz
sAP4fHTD8BdgVgxIIpXwuWK1Qa9SG20WrVwug59LwC+Ak8uemhwfBaA93V1t
rS1NdDqBE5u0eXQUULK4QvhlkVQBKMF44An4KxZg5GNkGXeLxPg5shaHjfw0
BR+TcE3gJxOTxHeT6CuLlbExNiwfBQG8g4AnEIPTOGK1XqtUm2wmlQyFBRhc
KIBXZU1NjIPr+3oZHa3Y8/RGeASkLa3NYyj4+BKJSCRTKcRcrkAsAXvBy4NV
wQDYyxgkPBXwIG45bGTn8YnxsbHxcfiYgH/oyRgOoHH8Y/gp3MQU2JUFlsW2
5YvQawjAWSIBd4otVmlVMo3VplVii0okGCmE2cTo0EBfd2c7Mmgj4Xnk+6ZJ
FpsHtyqWKZUSsKV4WoycLBQIxNNSCcoUsYjAKMCuQd6dQmAgXkZQzIyihxF8
wU+GR/FXwDw2PgF3AKaFu2KjOODh2OEDFi6fx5rgSLVqmVxvM6khdCHZEFCw
AgtcPzzA7O7CQAFpE5FNdBZPJEa2VMuF4BSpFJCJ4PYgReFPEVCxRIQ9zyMM
iWMI0AwPDw8NDQ3jD3wNDg4RPxgaHh4Zhl8AvKMILQoL+FMwKpfL53M5kJlw
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
UKDApED6zT2j4zze+AgoE6zemUiUIJk3BoJJbVZCn4Y8PzUxMjbU1w0ZVAs+
LynEPkdvQzg9m0h1BJxwfNZFOGZoHv04D+mogkKMsYAQVUixFKJ2JP8iNnMJ
aZKPSR9JaYhSyHtKbVPP8OD41DAw6cgw1E88ftHdNzrcPwX9h8GIhpGESOGN
DEMGNdNqKoHZEcxMRBE2APGbk5vzq4R6Xxiz83IIdZSXhxuO/DzwJijUwuIy
CgVuGUR1WVklhVxSkEc44lJWXi6hE7Dqx3kPnUltY0fvwMhQH3wi4Qx2BbnZ
OzQ2NMiTi6ZNOqlYIBBy2ezRfkZ7E7WmqqKESHOC9HJzMiI9k/UZisx+H5mY
rHIxf+cjFVBURQUp3ArZSKPToCOtrq4sKyosqyRXoPvPy8WphhM043skTcvJ
QKW0lk5CPg0hYQQqqg83d0PDIqVIBZ5Hw2Nc9nh3O0p0lEG4SmYq0Dtiyc7w
J0Ev2ReZRGh33LzlISNWNbXQGls7mMO97V09bY0tbX0CnWKKQakgU0hgWsJX
+UjV4MDKQ14oBKDge0h7kM/dSOUPIk0KVoXnY2ODEzKFWG+SStC4K2cCwSQj
KZxRHASvZPIIAcJRhep49kW+E/kNKOGdisGD5RX1He1N9PbekdEp7tgUf2JU
bIoc3rm2M68aaGxorK0CtU2CXpVUVlxIZBpyFQIKuhSlPfgBZEkfauxwdwdm
HUZUpJbLLHoomDw+b4peV01CMN/neaamZ9jyorK8uzL9BaIXCMDahoZ6Kr13
eKhvcHRCZPImVg+u37n94etv/+mb5y/uX1u0KHijfYwmMFpLM51WU1WaeacL
zi8rJ0PzBL1TF6MXNSNDeEhysH9gdHJ0TKyRgefFIjSIV4/5CNz3Kza6QIX9
TfBlLlYeF3QE5oA8qKhr6RgTs4anpk0Bm1zn9K/eff7dP31+fvf1m5//+Paz
P/3bP3z93Z/f3F31WnVTfUDgjM725vqq0kJUtTBNQZRC2oNFaVDtwfV4MBKP
RQLiianRKYVGqjdK0UDzFLIm3CKRu5milzEa4WhCcmTEEs53ZE2g6io6c5yn
tis1jmhyaWP34Vdv//D973767tOTxYXDp599+Om//PMvX3//129++cPXn9zY
DClGGa0NrYwWal1FPkH7mL3AohVkVJpa2pHroWtC47sgOIdGpqZG+dAKG7TA
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
SNDjvUBosUcNtEfdCCeLKxTw2fl42T3aZ0mrRz1e+/hAbX3FYIhdS6WUlpDI
5WUVFdXNHa2trUwBW3322Q9fPd+4sh7xGOc25j2RWY9erg2mduMzNq5ApPWJ
2RKVRCDV2Ewau99ttdr9Zn3YIlYrvPuRxVVvct25db6zuvX4i6+unb5Yv7rJ
rycVZl1sBMzKysiQXNS/Qxp19vSDCmFz0c4jjDMf8p1cR62sqqmmMLpIddW9
mk4qtQrQQxsKvqfUt/aARulSPf/i+aMXHx0uzMd84a2DhNdpjoUckfiWW6mF
m542m5RoV63SaJBw5WK+SuMxyjW+gMmi1D+4moi45uaDV25eOb379OT+7uqV
q0d2RmVpPrFxICsrgzML0zzgpLd1QRc3Dn5Hm8fxUDJe31aJ9jmXo43BpCpS
dQ0FMUVlWUkJ/KiirqWrq6u3nbd5fvPpF9/dOt1KzoaCMX9kK7y06jG7w0a1
W6022NUymZgnkVus0olhLmdKbNCJ5YFwDGrW/P2l9YVE2BJfWH/57Ref3Lp1
tLV1f5VPLS8kfI2RXrqE7YnGwUhV9fQ2FJ5opQCPy2YXEPsyCtEaktpaci0F
eB1tv68j44JaXFiABntojU3NtKaeDk5878bm9adPznbSofmwPXItMR822/Wo
dZMqVDq0LZynsjrc0xw2j80T67USrSPm1hi8m5vLp9sJ31zM5X309es7d55d
2z89tnVWFeOuCO8AvIQuhBnTUjW1CW2jGp1gcZE5cXzi/aBoyQMF5EhtHY1W
T6PRKouLSqAfQbsNSJTaOiqVUt3R3SacjSfXbz27v+WPrsxEZ8+OQcwZPDat
z2dRyDRSmdKgUdjdMoGKNyqSSJTyaYPc6Vf74+uXV8Ib6+nD1Ez6k+dXNw5f
PPvwupZBwSuVL6IT4wS/5xUUlZGqIY16+kfQihselzXFxmsRCYtCjNbUUnu6
muhNLa2NNWRI9rLS4pLiEko1pbqmjlJZz2Ayp73p49uvfni4Pr+UiM1tnywt
eo0eszK14dAJJXIdyDiFgM/iyoUcMRtUqJotsAS8ltjxWnR2aWHldGHt1Q/P
j1b2bj85NXVTivBWnEx8XvrgNx9kZV10HTW01k7m4Cgxuzk1yc2/uBDQikpy
dU8braG1vamRVleLNr6UFBcVk1AkANL6hs7eAUH4+MPPvv7LV9dPTvYWo9Er
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
yv81cBZt
    "], {{0, 168}, {168, 0}}, {0, 255},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, MetaInformation -> 
    Association[
     "Exif" -> Association[
       "ImageWidth" -> 218, "ImageLength" -> 226, "BitsPerSample" -> 8, 
        "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
        "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
        "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\nloop=false\n\
min=1262.0\nmax=14462.0", 
        "StripOffsets" -> {650, 4138, 7626, 11114, 14602, 18090, 21578, 25066,
          28554, 32042, 35530, 39018, 42506, 45994, 49482}, "SamplesPerPixel" -> 
        1, "RowsPerStrip" -> 16, 
        "StripByteCounts" -> {3488, 3488, 3488, 3488, 3488, 3488, 3488, 3488, 
         3488, 3488, 3488, 3488, 3488, 3488, 436}, "XResolution" -> 72, 
        "YResolution" -> 72, "PlanarConfiguration" -> 2, "ResolutionUnit" -> 
        "inch", "Software" -> 
        "Created with the Wolfram Language for Students - Personal Use Only : \
www.wolfram.com", "DateTime" -> 
        DateObject[{2018, 3, 10, 1, 59, 49.}, "Instant", "Gregorian", 2.], 
        "Artist" -> 
        "Created with the Wolfram Language for Students - Personal Use Only : \
www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{168, 168},
  PlotRange->{{0, 168}, {0, 168}}]], "Output",
 CellChangeTimes->{{3.7345012722017064`*^9, 3.734501304973852*^9}, {
   3.7345020124629197`*^9, 3.734502072476551*^9}, 3.7345022708977504`*^9, {
   3.734502489341663*^9, 3.734502550918409*^9}, 3.7345026230863447`*^9, {
   3.734502749315219*^9, 3.734502792005766*^9}, {3.7345029394685497`*^9, 
   3.734502962448666*^9}, 3.7345032529359417`*^9, 3.7345033042666836`*^9, 
   3.7345034161097937`*^9, {3.7345042175372486`*^9, 3.734504240897419*^9}, {
   3.7345042713728757`*^9, 3.734504275644356*^9}, {3.7345044709165373`*^9, 
   3.7345045058928437`*^9}, {3.7345048072346926`*^9, 
   3.7345048353479767`*^9}, {3.7345050040618877`*^9, 
   3.7345050338394756`*^9}, {3.734505357565895*^9, 3.734505452121926*^9}, {
   3.7345054859295626`*^9, 3.7345055041531773`*^9}, {3.7345068136282406`*^9, 
   3.7345068556059113`*^9}, 3.734507125987837*^9, {3.7345071599279246`*^9, 
   3.734507163902829*^9}, {3.734507437502371*^9, 3.7345074633961973`*^9}, {
   3.73450823238945*^9, 3.7345082535985355`*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"d3820418-7780-4454-8b98-bd0e9aeb3f8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"img", ",", "#", ",", 
     RowBox[{"HighlightImage", "[", 
      RowBox[{"img", ",", 
       RowBox[{"MorphologicalPerimeter", "@", 
        RowBox[{"Binarize", "@", "#"}]}]}], "]"}]}], "}"}], "&"}], "[", 
  RowBox[{"ImageResize", "[", 
   RowBox[{
    RowBox[{"nNetTrained", "[", 
     RowBox[{"img", ",", 
      RowBox[{"TargetDevice", "\[Rule]", " ", "\"\<GPU\>\""}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"168", ",", "168"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.734427522949519*^9, 3.734427547454689*^9}, {
  3.734427630603815*^9, 3.734427645892473*^9}, {3.734427689977141*^9, 
  3.734427715931163*^9}, {3.7344284873696413`*^9, 3.7344285079032483`*^9}, {
  3.73450112545341*^9, 3.734501125514572*^9}, {3.734501156352583*^9, 
  3.7345011850659432`*^9}, {3.7345012300044656`*^9, 3.7345012860064173`*^9}, {
  3.7345026444953127`*^9, 3.734502664772205*^9}, {3.734503295865015*^9, 
  3.7345033010217943`*^9}, {3.734506876940613*^9, 3.73450688323435*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"1efc66cb-cc20-43db-8f7e-a77a260498b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxkvPdTo+mWJth7K/EeJBBOAuFBgPBe3iHvvfcGSYAA4T1JJi4N6X1mmazM
MjersuytutXXdN+evrdnN6J7ZyZ2ftmdmIn5ZSM2NmL3D9jzvp/IrN39EoQg
QXq+Y57znNc1epPa4G/+7u/+LpULD1pPmjs/71nRlcI3hkQqEkoE/NOJhUAo
MD/qRb/2aeZzYHhkbHR8dGx8cmqKJxTyptgCkUTI53G4PL6Az+NxWFOTE1Ms
+BYuPp8vFApFYrFYMj0NjyL4RiQRCwToN+ESoIvPhwehgPg9Efzi9LQULplC
pZBJZDqL2aDWmqwmtVwmk05L4WWE8EZcNrzP2OjwILOnq6O9raWpiU5vQldz
SytcbW0jY2Ojo2NjE1Nsvkgs4PDEcqmQxwGM6K3ZLNbkJGDkCwV8AcBEby6C
B6FYKBAJMTj0wOVwOFz8weHCBT9Fjxm8IgRXijBNyxVSkVCiMpp0Gr3VqlfK
5ARQEXozLmtyYmxsZLC/l9HZ3tba3NTUSKcjsM0tLS2tTSOj2JZsnkgCCKbl
MjGgFKK/5LDgFtlcHkaE3lQogn9CsBS8Kh8BYiNoLPhj+FU2mz3FQhcb/WNz
sAP4fHTD8BdgVgxIIpXwuWK1Qa9SG20WrVwug59LwC+Ak8uemhwfBaA93V1t
rS1NdDqBE5u0eXQUULK4QvhlkVQBKMF44An4KxZg5GNkGXeLxPg5shaHjfw0
BR+TcE3gJxOTxHeT6CuLlbExNiwfBQG8g4AnEIPTOGK1XqtUm2wmlQyFBRhc
KIBXZU1NjIPr+3oZHa3Y8/RGeASkLa3NYyj4+BKJSCRTKcRcrkAsAXvBy4NV
wQDYyxgkPBXwIG45bGTn8YnxsbHxcfiYgH/oyRgOoHH8Y/gp3MQU2JUFlsW2
5YvQawjAWSIBd4otVmlVMo3VplVii0okGCmE2cTo0EBfd2c7Mmgj4Xnk+6ZJ
FpsHtyqWKZUSsKV4WoycLBQIxNNSCcoUsYjAKMCuQd6dQmAgXkZQzIyihxF8
wU+GR/FXwDw2PgF3AKaFu2KjOODh2OEDFi6fx5rgSLVqmVxvM6khdCHZEFCw
AgtcPzzA7O7CQAFpE5FNdBZPJEa2VMuF4BSpFJCJ4PYgReFPEVCxRIQ9zyMM
iWMI0AwPDw8NDQ3jD3wNDg4RPxgaHh4Zhl8AvKMILQoL+FMwKpfL53M5kJlw
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
UKDApED6zT2j4zze+AgoE6zemUiUIJk3BoJJbVZCn4Y8PzUxMjbU1w0ZVAs+
LynEPkdvQzg9m0h1BJxwfNZFOGZoHv04D+mogkKMsYAQVUixFKJ2JP8iNnMJ
aZKPSR9JaYhSyHtKbVPP8OD41DAw6cgw1E88ftHdNzrcPwX9h8GIhpGESOGN
DEMGNdNqKoHZEcxMRBE2APGbk5vzq4R6Xxiz83IIdZSXhxuO/DzwJijUwuIy
CgVuGUR1WVklhVxSkEc44lJWXi6hE7Dqx3kPnUltY0fvwMhQH3wi4Qx2BbnZ
OzQ2NMiTi6ZNOqlYIBBy2ezRfkZ7E7WmqqKESHOC9HJzMiI9k/UZisx+H5mY
rHIxf+cjFVBURQUp3ArZSKPToCOtrq4sKyosqyRXoPvPy8WphhM043skTcvJ
QKW0lk5CPg0hYQQqqg83d0PDIqVIBZ5Hw2Nc9nh3O0p0lEG4SmYq0Dtiyc7w
J0Ev2ReZRGh33LzlISNWNbXQGls7mMO97V09bY0tbX0CnWKKQakgU0hgWsJX
+UjV4MDKQ14oBKDge0h7kM/dSOUPIk0KVoXnY2ODEzKFWG+SStC4K2cCwSQj
KZxRHASvZPIIAcJRhep49kW+E/kNKOGdisGD5RX1He1N9PbekdEp7tgUf2JU
bIoc3rm2M68aaGxorK0CtU2CXpVUVlxIZBpyFQIKuhSlPfgBZEkfauxwdwdm
HUZUpJbLLHoomDw+b4peV01CMN/neaamZ9jyorK8uzL9BaIXCMDahoZ6Kr13
eKhvcHRCZPImVg+u37n94etv/+mb5y/uX1u0KHijfYwmMFpLM51WU1WaeacL
zi8rJ0PzBL1TF6MXNSNDeEhysH9gdHJ0TKyRgefFIjSIV4/5CNz3Kza6QIX9
TfBlLlYeF3QE5oA8qKhr6RgTs4anpk0Bm1zn9K/eff7dP31+fvf1m5//+Paz
P/3bP3z93Z/f3F31WnVTfUDgjM725vqq0kJUtTBNQZRC2oNFaVDtwfV4MBKP
RQLiianRKYVGqjdK0UDzFLIm3CKRu5milzEa4WhCcmTEEs53ZE2g6io6c5yn
tis1jmhyaWP34Vdv//D973767tOTxYXDp599+Om//PMvX3//129++cPXn9zY
DClGGa0NrYwWal1FPkH7mL3AohVkVJpa2pHroWtC47sgOIdGpqZG+dAKG7TA
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
SNDjvUBosUcNtEfdCCeLKxTw2fl42T3aZ0mrRz1e+/hAbX3FYIhdS6WUlpDI
5WUVFdXNHa2trUwBW3322Q9fPd+4sh7xGOc25j2RWY9erg2mduMzNq5ApPWJ
2RKVRCDV2Ewau99ttdr9Zn3YIlYrvPuRxVVvct25db6zuvX4i6+unb5Yv7rJ
rycVZl1sBMzKysiQXNS/Qxp19vSDCmFz0c4jjDMf8p1cR62sqqmmMLpIddW9
mk4qtQrQQxsKvqfUt/aARulSPf/i+aMXHx0uzMd84a2DhNdpjoUckfiWW6mF
m542m5RoV63SaJBw5WK+SuMxyjW+gMmi1D+4moi45uaDV25eOb379OT+7uqV
q0d2RmVpPrFxICsrgzML0zzgpLd1QRc3Dn5Hm8fxUDJe31aJ9jmXo43BpCpS
dQ0FMUVlWUkJ/KiirqWrq6u3nbd5fvPpF9/dOt1KzoaCMX9kK7y06jG7w0a1
W6022NUymZgnkVus0olhLmdKbNCJ5YFwDGrW/P2l9YVE2BJfWH/57Ref3Lp1
tLV1f5VPLS8kfI2RXrqE7YnGwUhV9fQ2FJ5opQCPy2YXEPsyCtEaktpaci0F
eB1tv68j44JaXFiABntojU3NtKaeDk5878bm9adPznbSofmwPXItMR822/Wo
dZMqVDq0LZynsjrc0xw2j80T67USrSPm1hi8m5vLp9sJ31zM5X309es7d55d
2z89tnVWFeOuCO8AvIQuhBnTUjW1CW2jGp1gcZE5cXzi/aBoyQMF5EhtHY1W
T6PRKouLSqAfQbsNSJTaOiqVUt3R3SacjSfXbz27v+WPrsxEZ8+OQcwZPDat
z2dRyDRSmdKgUdjdMoGKNyqSSJTyaYPc6Vf74+uXV8Ib6+nD1Ez6k+dXNw5f
PPvwupZBwSuVL6IT4wS/5xUUlZGqIY16+kfQihselzXFxmsRCYtCjNbUUnu6
muhNLa2NNWRI9rLS4pLiEko1pbqmjlJZz2Ayp73p49uvfni4Pr+UiM1tnywt
eo0eszK14dAJJXIdyDiFgM/iyoUcMRtUqJotsAS8ltjxWnR2aWHldGHt1Q/P
j1b2bj85NXVTivBWnEx8XvrgNx9kZV10HTW01k7m4Cgxuzk1yc2/uBDQikpy
dU8braG1vamRVleLNr6UFBcVk1AkANL6hs7eAUH4+MPPvv7LV9dPTvYWo9Er
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
yv81cBZt
      "], {{0, 168}, {168, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "Grayscale", Interleaving -> None, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "ImageWidth" -> 218, "ImageLength" -> 226, "BitsPerSample" -> 8, 
          "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
          "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
          "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\nloop=false\n\
min=1262.0\nmax=14462.0", 
          "StripOffsets" -> {650, 4138, 7626, 11114, 14602, 18090, 21578, 
           25066, 28554, 32042, 35530, 39018, 42506, 45994, 49482}, 
          "SamplesPerPixel" -> 1, "RowsPerStrip" -> 16, 
          "StripByteCounts" -> {3488, 3488, 3488, 3488, 3488, 3488, 3488, 
           3488, 3488, 3488, 3488, 3488, 3488, 3488, 436}, "XResolution" -> 
          72, "YResolution" -> 72, "PlanarConfiguration" -> 2, 
          "ResolutionUnit" -> "inch", "Software" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "DateTime" -> 
          DateObject[{2018, 3, 10, 1, 59, 49.}, "Instant", "Gregorian", 2.], 
          "Artist" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{168, 168},
    PlotRange->{{0, 168}, {0, 168}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
NfbATuE4NLHcG768rw6eMDkLRRu+6wRkRcOnuNSzAXJ6MPXpZk/8Mxk4Fr1S
eJnREuo13hcXA7TwVBXBorsdpU7UkdHBmptMVtQJntAj2mEaVN++iKN6zmLU
wQ9tQjnNDtRn3cMun6McqSslecQvlylT93yqGt1eu5mafvDY5MM3llTrVzWp
jWMuVLLsrgnKPSXqsSJqmfIWKWpbsNveCTcCNT3s4Cad/S7UTWFFGlpa2lTX
6dUnymbFqbs2neRfxy1KXVFvpd086ECV6ecLeUsxoJbKH6pjthKhBgf0r7qy
XxK2sJx9eitkD3Wz2a3lwU9MqN74Y8d3JUhQqa6+LIZ9O+Cr9alHfg4mVB7H
N0+WelhR48Zn0ne37KD2WgYR6ss2A0v3uh/MJgQqO/ZsPHuHLXV7XorlA1sl
6ts1wdfkc5jh7MUDweK4nVTxw7vSbYNsqfVPzyZKCWlR77ku0YzM+Fx7cbx4
pcshHrjBNixiN2NFXdU9GN/RTqQ68clN5qRdr92/1eGoXIQ8fKr/LM8cYEzF
4ma4M16SqWw2rLeeJn1VK7GNNHKfUgPXvBrx4E04KmcLdW7fSUOqodRrpeWV
k7VbxB9JLKpVB9l8s6LVT7dQC+N3GHAwG1Jtl2y2Y9MTo9ZMrbasbwao5j93
4BinEFScO3/BaDuZaidpic8/L0/tP3hPeHylEoRE6LNk8iqA8sYGXb0WXar0
QXuWFjZNqq8IYde4tyxs1hDgJBeqQ7wNZ8NZJR1qb2TrufKVeKoTUNkmOsVg
08CSgbnVWrD25BfNbY2K1GkpzZuXK/SoQ7MmZeq4Z7VbPNlG+nI14atWrFPG
PWHqirFe1+QQA6qWg5BkZ+Zmqpqph+anQoChJ/cjJPBCYJn5Xuo0B5malH3q
gAGXErVhD7H24lZ5eCsxdsNgSg56LqU3V/eRqIst3D9vn9Wm2p6IjWCtFoNF
j9Zl9uaoAK7cdCrRV4/Kchc5F8kk6ua0jJftLDxU6gY7D8GdKqDso/tq4x08
1WiWo/rTRWOqZcke25sFO6jNL27x7PiyExq6S5tHFTSoFtufLSt+aUFdkDpc
vMZLjfpRCVTEXnGA8SqJnHuzO6jZcw9WWl/dQz2z3kF0+CWOytu/Rbfs2Haq
RyU1jn+ej0pwjf28xGwvtVyDT1VrikK11DmwN09ag8rceVi7bnYxlcydu39f
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
GNxqU9CNu4eD4rQo1jzEl7NyYVZ9D3Hgvu9G/2AmioMfD7LYclAg9WFTsX2a
EUzNppE03lHg3vG9viQBIiy/Vt69PN4AimfJTpttjWFHLf/7zlhDGPBwu7FS
Ww8ymceJTpsIIJBSzbxmggQHkvwnb7noQ/8zmclCXiIU/RDblxuD/Mi4txZQ
Jg+BhiM9Cf/D/qeVwnpnDsSfrfXyYbcRf9Kuc/TWHXrzRe8cj1Zf/lX+JyOc
v8vXtPpID+fv+p+/yi+09RnZ2e/i/LP+EiM/6v+K//mr8v53+5//Lpz0yn+V
Bxjpe7/A11dXUWp9IsPUCMW3PjHCYiyIP6vvbQ050qcDDaMzXZJiGKTX5Xua
hGHQrLogk74cB605YctJQ1owxgEi9q+1oPymj8tcGg5+BIaPBXbpwUsZt81i
eThgOzM90qmvDsfv5bjHZ2hDwaXWQ4sHKKCZJdrYs88Q+gUjX1OitKHj7ENJ
s3ZN2JIudhC7oQ+XeouwOhTfBzlljZ6R0ofc7jgl3NAu2Dd3Z7XC2/9+f+mP
83drGv6kd++CVg/oyZ3ePgqjexWL6PRHL6W9D0cP5+/qNT1eZsTzjOyY0XpD
T76/uo79Kk5G8mQ0D4y+52ekJ4zqM8L7V3HSkw+jdf5fjZOeff27cdIrp2df
jHDSvi9wTKr55+8+pzO/MuNDceydVby2qeg5pvug+BIp5M+u2OUmJ4HB8Jnk
GH0U33MWRXJEGmGQe1dtlfMyDF67vOiTiMDB53VDrHE3iKAiYpfmTNQFgTD/
u+YkPNjm2UhuT9WHlQeFbyyztoCuS2lcI7zWYG45ncjeYAjH2hQustbqQ1bY
QquJlQlEGx7J3nrIEibN5E/v22MELrr46jkuPZBcLNY+ZSYPfi81iUav/+v7
TVr/0/If/PmIhj9peYmW/+jNHz3+pLVzeu/5z/35/xnHX8XJSJ6M5uE/9+f/
NTjp2de/Gye9cnr2xQgn7fs8CUlxP/dHw6y3Cv+M53kCzT9/RGmqqpGAtToG
3+LzRB0Bg+5Qd8VeNRTni/g+ykXlpGNe2bIPMVhntm3RxXgiTMgJdvZ91ofH
ovhHXgf04Mn5OXKNPw6O1yZQc9lM4ISQ/LHYXgcIt2ObNTthDw53erl5N1Dg
qkpH9Kk9ZODfY5ddGmYHK72Yzhv37gW/x/K7RUuMIFB7xvMtGw5Om78iRzop
wOS2I1+tnv33+P0P/9Ocxv+k3degt09Me++M0b4bvXLa9rT9Mernz+L83fEw
yv/Ven8Wz78K55+V51+dn1+t/7vj/A/Ofy1OeuW/al+M3rcqZtvDn/ujz0j6
+j/PR0buMx35ef6cmjE1wYFSPir3Kn+UFpdXirAj/mwTrSJs1EZ8zPqkNsUR
+amiwUd38RCg6zqheqsnEQSLJV2udRIgYSB/R0A9apfg1+/VRQHd43z7N+hb
gHrMZpnaM6agRCLfuSqjD6Js6eJrJ/UhkFAv+D7GDFJGnb12fzMBs7MiN9WT
SfD5QXb+53AMMod0NpnwKQCbNqcOsZP+/ucf8Xsbzf4nvTjgV8vpxRW/Gm8w
SunFr4z2C+jFGfT2oej1w8gP/VWcjOIeen7Fn8X5u/srjFJ68d7v7lP+ahzz
V3HSkw9t+d+Nk1Gc/b8F5+/q9e/uI9DjC7dzcd/lUfx+y3NCKJSIwd03/x97
3xkW1bJtKwgqmABBDKASRImCJCVNEFhNzhmRJDmIYCCKJFGQJCgGQBAEQVFR
SYoSlaSCSBYkSupWwEAUfNX3u373vD67T6N3n3PPe3f/Gl+tUGuuWjVHjVlV
q6rkFM8zZbjyIAEXgPRpVlCa9sE6DLLHMm7PVeKAxz9l3elYJZgwkzq5dqci
UF2L7zRH971N5398Vl4LnuUyHu8O1ARDmxXeD3gOwBrt24H9mgfgxSZQwO/X
hIWYMx9sivVBs2GB59MqLdhUPc8NTeJgOcR43m2Q/P5Hpv/Jny9J9CepX5K+
N7nvRw7JXU+u/3mp+f41/v7n2knpO5Dz46V+X0rX/7Pt/Gv8/c8t59+t15Ts
nVT1Ijjvx4DmrpC2L4rr28Jo0sqoMaBPbtu4dVAZ9rF1TTXxYJB/TmbN5WwM
uBYIO8yPKUPxmDD7MZR+Fx31gm9OCxxbyt+W7NSDnZrZ6WZTmlDo6avDck0V
wi50n8zKNwDDCVpZdk4L2PTl9MO+B0aA484ICijUgv1FdQ9Y10lAXjG7L9PQ
f82fJzf+Tqo/yfXPUOq/Jofkrv/d/s+fuEDBzl+1++f5P3tftv9t+8ft4L/J
24iQP2ilPHG+Cp8OmwVxnQOdF9siziK/wDmXvI1CyKVmcjJDBgO65RaCBShe
u6brsEJVFoOrSsvriP1iIbbr11Yi/MAvwt3yJ9j5z9o/7lfLk1L/5/+Unb9a
H363XlOyF6ror0pKY5CobLFCAtWTsFKf5NtIT/a3qFXG62Jwti7qSK8hBmwn
Pu1pOICBtovpOsYbGKgJZJnfeqENC7N8ribtKG5PXZA889YQFtZs33W5Uh1O
Hbgkl/pODxzdrz59jT8MK6p7hdZWOsBc0EWp2lIjsI190j7QgAOJL7eeHoiX
hPb1W2x1O8jH76ZL5E/Sdohc+/G7/LmM5DsttT2kZOev6l1y35fSfZR00K/q
b3J2/HftXKq+WOq4Njk9seHE+DCRNxPtj70LRMiYZHrsJPKHlXPf5N1QfRfr
uCFyC8Ngk37Usw3o/M176zZpC2Jwm6cn6rowBh4VeGt7dJyrKYCRuK+l5cyl
0rp/gp3kypvS9ZTKlZKd5Ort/7Sd5M4vlQeWWt8p8Wck2/pL5Qinr4y/2YW+
f70hG0OfJAb+o1IXTVFcXzVeJ7VTHbXHBhxN8oeQDuWM2W0hgEEC00qrrBea
UNleOC6yUR9qrpSrTK/TA7YEPpj9oAo7r91R54nWhcp82xrhQCtw/7J4clra
Cp65tQXnbdcD5+3nd87mKwOtx1m9klBJkPwQ+jGm+e//P2ok4c96Ev4kFxeT
nl8qf5IbfybXT71Ufye3vxq5fCg97+f5v/aP+7/T0Oqpko3QK43ZxRHVZ35J
9yEvVI9TDF96CYkivkyTqjsnhkEJt6D2MNKPnQfPGssqYDDy6oeNJbpO9ksT
Gz/SERblw0URxHHVgUjOPh0M7id30pXfw6DjhPydXf0Y0KZE2nVNYjC3a2Ng
Yi4GA5/9zcpeYCCzYpBfPxOD/XcUzfneYCDs17brczkG2f0ZCfvmMHiYt+ps
11cMtPJsAgqocSBkV3FQvAf527KY8A0vMdi7Tki34jVKO8ty26diYL+fnmk0
FAMJpyhmDiMM2tf0VFgjf6T25uSTQ3a+VNccN5Em/31+lZfIfT9K35VSvaA0
3vNn8Se591nqvmyk70eOD8g9h/T4yp4tOv2o3o2ttozWccWgZ3Z+1YqDynDz
x4On3EMYlInZmgcWqoBVyLcHhFJV8PE5ESbFjYPWyYar1ncUIc2ePWaOAena
6vft/as04LiGlALLdT3YM2bQFh+qAQXbbCVd6STg7tU8Gdu+v4/fm0ji95cU
+JO0vSDX//K7/ElOR5HDpdpJeh+l51EaHyV3HyXdSK68yOVLzo7/rp2UypNc
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
YDAzUFy58xUk7H59g/myElBn6L7W0DGA8B37BPWrzoGaxY7uJ+mnQNOMnTrL
WRX29WpLxLHKwitdtrJBSUl4KN249xPqt5UPm4Lref7v19/J8dXfu/7ORYY/
F+ZPJsef5OYfFvv+d/lzmviZb04A8adnyx02cfSe7T8kMg4TIJ3iTaCKhiTo
sD2POkl/FDR9h2ej3x2C3Gf1V4oldkFSnr2Y8ZtDRaf8rrP4SB+Doi7R2Fex
akUHK6hy7x3wgvuph/jGUsPgCCdDB1fUI+CO/PwsKuQJGIwerj2Z/AJO+gp5
yRvUwecVT/iitZvBtVNH+vydDkhL1zMVsHkD+0SutNCe7gNGRnHn1BVD8NbJ
ZhOz6TiEmZscLi4ch8vfR667jREBQoorbVhJcLJ9xdFj6P8pVWCSJIP407tw
V+ehX+iG0H4xWlOEsSWidXg/UHDzm3U16LkHWXEHcHyll/SmohWo/727FxxU
jfzdUxq8n1cfJ4HBkXXPPnEivz3uGGMiC9IZu6SlxAmIxywEi18gXhKe66C0
Q3y3/Yd17Bjqr2r7taa1cH+9G2T4HZW7JyKocBvitViub9nvEP+2HxlKo1Mi
gWuJSrkjer6X279aCPESbZ28yhPEn7MPsoqqUXk/Dl6crUDltNpf4ziL7MwT
HnPcgHROs+uBr5/RfdnUnrEHPZAOcthFL494WNDKbDIY6a9UIdFnIhaIh3ds
pD6D4+y5UiLFkV5UDJrypEL9XLzosRUeX5jGrhv8Ki7hJxamccji+J93hlmc
OA/96cBv0lvQ+21ZJymwBdmTU79l2VJkZzX/3tsm6D2rN5amGyPkjxK7gPOV
jkZqbWBDz4nvaKXC+fplopjL/4yvF4tfmhWNOYUxW0OyDZ+vp8t4TYUNtU8f
Zyv/FvR+Ke2k9dxoXJn5MEyH+fN1QZv4DmRfwIBTryO67ypPQ/bpP6mX3PVC
3PY+Xwiff1XV/IkZn2Mdn6CTOj9fnRD/YxzHN2gREgJQO7EHKLj4Il4vXGF0
/VUeGt+T9bnSVEbgfLVpodpsH1Q/tYxwW9MG6dZeR0npPRBmw7Hj/tdKULa0
1L/j6FpUVdYr0ptvAuW7NAINabTAXvLJffEvMrD9lVMS4Ys8nJla78RxQQme
OJVuJzHKQMgJoY2WL6TAvpc3INBocf34V+OQyOnVxeZRya3nLOSxxfKH/Lud
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
8gpo4qufk+p5z44e0nzcvTtZ80jzIMy/erWR6jPsHW5VDv3PV1ZT6W0s4q2v
uNK53YkwYUo1WaWDzrvI8sYLIj2/fDg2g7SfNu1VDcMTBFiQ4XtViPqT564X
Y6nJx2G400RgSmsMFB7RPW9eGgbbts6s1xcbwEqoWW7xZglEePS9cL0SCC0s
dz7rigaCXnVQlICbFbwoeZBxuc4WUoSfOYoL6MEOeb/Pw79Uwc3uiZo5HQae
Hq8sy1fa2N82Gsf4T/64v5Y/7nf5+Eb4+Y/q7o3Kufa6jZ73x3kXrY+n2pF1
YuOVwSIr/LSf99ZRDJRV5t2W1caAXtWh9FJuxPc7/GTI4hTBkItD351PBY42
YiJz5zRh6FHHcZEjXiDM9XN5vjQYGq2N2V6HP4b6pMydGt3lgJvAMmR96oTN
Pz8zaR//DCpWerV0MA5Jzbz7XQ7gYUeS6ml+XTzEHfXOWsknQOGHGjVWBiLU
ntF0mc8nwog3TQX5LSJ0BudanCggwkdvKX/xVCIYnLJ60oj8cUvUmycv/gT/
ZBvusr+FbJ/7lhBbZHc27LsRf5MINGbp73ai5zSUZ3ysNSQCe4hJvwgt4r30
Z3QeXCJAZna7+uwEHnL521olTuGBqcXGfLIcB1puYSs993Hw87Q387VHOJC8
FWyIncbBwLxEpN09HHx8k76l2A8Hj43M6yQQ3r5OZuDp0sYBxY2JwZppLFTt
Pzlq3YiFlMC52PggLDjvoIw6FIYFDfOT+pnUWHh+d+m8/bcJoP/5vTVLewLd
X+3AU9EJqFFKFy6gmYCHyayaqmcm4Ij4hM8zeSwIxzc90ybDQcGU+lm7Ehxs
1ayXucqEB4tBfFBWHR7Seivi3KwJ0Dk+yvqZlO+zQOOR8EnE+wdv7RQLQTh6
S5t4DtXHz1NXw2NJ43h1ysueqJ6qXfmeJSGbKL6ZohX9/mwLlt8H2fL59oZJ
dN1MPvPPrGQi3EkQ7GFA/J1HraWV6y4BtoQzLPP7EkDQVO6hsSvqpzalhx6X
wMPecdNqm+dj0Lvwejn3xxDYzH9ge7pvCIzMS5JE/PqhxfEl2Uh+BVw+WZZ+
J7wAxKU/N9Ac9YYl55hnXygvQe1Zm1SLRBtwno+Y+rJ4EnKexh89DxpQpoLT
DN+JARO1D/biQhgItJJVkZT/8/G439XFv7v/0j9bv//Vcv6r88etrY/13mu9
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
Ms+hwaEgNVDvmAmOnZRR+biAjrxVmTufv6Mgus+fO1zNCptnJhZfmuMFYcbS
jj0HvODgq8NIz7SClNDstrHvDCF4dvz9UAV1BG4ZL259xhqM7dneH+r//P6d
1flPZr0Ndn/ie/czhso3hzP1x2DLscPNij9Z5ZekXyH9vrGJW2ZZkPM9VKgl
poO0o57DkuXEHxnA9FC50JhRBng5VXKNKo8uBH2fH5s2zwIrtA95xseYoOfg
3C47ZUPIV6jEON7QR593b8KoJGNM+TjGTYDDBFWdsul7IwjYnJs+7AUXBd6n
WyXvNhIos6YMXxhGxT69qLDSQwTMVtPvBcwm8YnOkNfTY/2d/mD197379+z2
R4e6n/pP4WSln8Hy4r8LJ6v59atxDlXP7HCy4+/fi0exv+nyADn/Iq5P4Rnu
RK6T5qPURLdTMKmz76YolQKFk76ju15S4Lv70Cue6TQcNmVkVY8zwhUl7WEn
VxEocs/z03lrhFoxTbnsT3SU3B1jsabcCl0NNyILhUxwylBMsv3NPAh78YRU
jLaB1MH85TdC1/2OH8eiHuZ05vhxc9rW3Ggi/aUNRZvDrpqRdrSb5+0Xkgdq
cz1qvHlYDzszE7OELhOob7GbMa/MGZKpzZEvdntCwWIKev3skLpl6fbKdgqm
yarM3CZjCaEnd0Q6djqimqH46sNWGxyfXJRfIkIDt9uMrHm9BLjWlzwSn2OC
iZy7rS+soOOolvlivX4qsg4cShd7T8HMu9f7tlr9GSerOFmD1Se7fmC+z4rv
sepfdvnZ4f1RnOziiDHz0Z+Fk9X8+tU4WaWzml+/Kn5cmSSHK12aQIbxvDOm
SSRvaXOQek/6HTOu9FY96DYAkfRmZSuvMR7m+d5XPs9Atv46PoerZrh9a5by
nRw9RIi/PxQVaoZtUYnCU6iuuFldPLO2zxXJFhehYG2JNvluWqq3Mqi8de5B
220xUrjuMj1mPcvz8w1M9pOd3/Cz5FDbG+r5+aHW+8d1zXRFrqUkn1voK3D9
m/9Xm6PncauTgre5m6V7+Mwwr/tSpcOOAPRntvKOyY/FhuRXORMZIZB4eKxD
VtEGD9dzUV+aOWHH6ic1E3cE4XTB1MtvDvlCZPvsh8eNrOB4hHcOLYKOoB3n
SlqKGFiwmKGTkEzKUM6wEQp0VIsu5Ug5TvJSedqYUaTfmdLearqQ+vP4Ozt/
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
h03S/kjeOvwvqKQx9g==
      "], {{0, 168}, {168, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{168, 168},
    PlotRange->{{0, 168}, {0, 168}}], ",", 
   GraphicsBox[{InsetBox[
      FormBox[
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
MPFb7qOhHrNNpuZxoHxEaSbeh99V+v8XXxsn9Q==
          "], {{0, 168}, {168, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag[
         "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
          Association[
           "Exif" -> Association[
             "ImageWidth" -> 218, "ImageLength" -> 226, "BitsPerSample" -> 8, 
              "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
              "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
              "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\n\
loop=false\nmin=1262.0\nmax=14462.0", 
              "StripOffsets" -> {650, 4138, 7626, 11114, 14602, 18090, 21578, 
               25066, 28554, 32042, 35530, 39018, 42506, 45994, 49482}, 
              "SamplesPerPixel" -> 1, "RowsPerStrip" -> 16, 
              "StripByteCounts" -> {3488, 3488, 3488, 3488, 3488, 3488, 3488, 
               3488, 3488, 3488, 3488, 3488, 3488, 3488, 436}, "XResolution" -> 
              72, "YResolution" -> 72, "PlanarConfiguration" -> 2, 
              "ResolutionUnit" -> "inch", "Software" -> 
              "Created with the Wolfram Language for Students - Personal Use \
Only : www.wolfram.com", "DateTime" -> 
              DateObject[{2018, 3, 10, 1, 59, 49.}, "Instant", "Gregorian", 
                2.], "Artist" -> 
              "Created with the Wolfram Language for Students - Personal Use \
Only : www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{168, 168},
        PlotRange->{{0, 168}, {0, 168}}],
       TraditionalForm], {0, 0}, {0, 0}, {168, 168}], 
     GraphicsComplexBox[CompressedData["
1:eJyFmF1yE0EMhAUnMTcR+TUhCSEmTuLYsYsqnrnCHIIDzdEownRT+tZb5GXr
2+mVHe+oJc2H7z/vf7yPiF/vIv5c3/5a5tu1P2ThNjg+/r3munLnOjgUT/p1
5QQ36JPPf4MenKvKIT4Z64/gdWV/vtbBAe734/7puP9UWZ8npj4GN/GmsuK1
GX1+HXyG5we358rU97vx3Pm4v6kcYOpzcJP+pbLitRl9+4Lnwe123L+oerH1
F1Vvvhm6y8Evlf19xdvKDeuKZ/48nluO/29b2fGWVS8OPf9p3N9WTvBEj2vf
4j4ZV8e9GtddZcXzOvT8P3JXOcCT/xu/S99VdrzrqjfrvY33kq+VFS9ujusD
+6S9Vna8sa86WHrtw9xX7ljnvg3mwb6y4zHPZvKw7ysrXoy8j0PlzvVzsHxi
8OJQWfFy+FKCrZfvnVW2j62Os311+PzhUFmfp7pgn1VdOBm6h7o+8fXHGk+8
ANuH4ev2/bPK0venGk8cYPsy4sXwcb8f+Lp8XvHEer+sA9ajbng/yLfJM3XB
deOisvQd8cTe3zO+7HgvVW8fBzfo9XyHXqz89PoSjLrgfJavkuH7rAvSi+Uv
9P2GeB16864y64D9elf1MXdFHXC9gE6s79lnOLgOn/fn4XcU+z2Kr8GqE9CL
E8w6oXgder/nTeVGX1cdQZ6Ynyu7f4LPd+jNT5U7fNvxDlUf8C37wqoyfX3i
e+vK8tUF4smX1e8eEE+s/t96cID7jO97fVV18u/G+oPvrT46oHc9Y328r9xQ
X91Xo14n9In3HtB7X6C/cH+A/sP7mKx9Cb157Hvn8Q2Y/dt15Yb+0HmNftE+
RmZ/e1WZPup+Fb4qn27k4dsJX0/WhU3Vd84rqGvJeei56jvqaqJui93noM4n
5se5viORT553NZ+fgk+G7gHMvFHfhPxS3qgvS7DiBfQdfWFn3sF/xMwb65En
c313Y73YV07mAdh5gvrCOcf78hWsvPlU9cE5bVn1bWaO7GDOqUlGP9TBfp79
EebsSf+mfcw5H/PMJE/AiX6085wC5xgxl1d4PtA/O2+Qd8F5gOc0zEOeC+Ec
qfE8TDrkXwcn9J5jtI45KMA+r9P/wfMk6f/T93sdc5/iTebC86r3PuCcKr32
3V1l62fOc6xXH34L1r7jucASevWxOD9x/vNcg/qr4zrfx/lIm4nDcyDr9T0u
wdKrPvO8QnqcLzT8jjx3S7wHngsm3iv3kc9VtW8wvzfuO+Rb475FXZv0kWPf
LsCuK5h/O/SJ+db+pHjyM8yjHfNigq2XP4OlT8yPCX3DfNig59xlVrzd8av0
HXNi5zzI78U5E3NyQt8wfzXog7875nb/Ts9gvKfEfJN8z5hfEucugf6F/dRk
H66h1z7/p/8NJyDDoQ==
      "], FilledCurveBox[{{Line[CompressedData["
1:eJwt01VTF1EcBuA/gpQB0t3SUoqIoiAGYqGUARYGIWUhYGGBGCCjXwlv4Nbv
43NmvHhm3509s/vO+Z0tHpnpnY6KRCJ/CdcdJJDITmJJJY1Mssglj0KKKKWM
CiqpoZYqqjlAHQc5RAtHOEYb7XRwitN0cY4LXKSHK1zjOvsVLWFIHuYeI4wy
xjgTTDEdvmttAzPybOggN9JEHfXUUEsl76xZCr3lKqopp4JSyijghzVrFMuF
FJFHPjnkkkU2GWSSRjoppJLMPvaSxG72kMgu4kkgljh+sU40MUSxpcN2mJ38
m035Dz/ljdCTNb7xnVW+ssIXPrPMRz7xng9hH1jiDW95xWsWWOQl87xgjmc8
5wlPw34zyxThkD1mknEmwr2OkzzkEfd5wB3ucovb3OAmAwzSRz9X6eUSl+nm
PGc4y0k6Oc4JWjlKM4dppIl6GsK5ojzMkxLyKQjnU9eOMEc5h3QySCI5vMuz
ljAfOZ5oYv7/T/8AWqU8AA==
          "]]}, {Line[{11, 12, 256, 313, 11}]}, {
        Line[{13, 14, 261, 314, 13}]}, {Line[{18, 17, 255, 312, 18}]}, {
        Line[CompressedData["
1:eJwt0ulPzwEAx/GvP8Uf4RHa3JUkPzlKQkSPshwhtLlC2ipHyq1LKYXkzFU9
qS0qJMqtJDflHPPaePB6/vls75FJy0OpI4IgOMMK0mjjNrfooJ07dHKPu9yn
iwd008NDHtHLEx7zjKe84Dl9vOQV/bxmgDcM8o63fOA9n/jIFz4zzBDf+MoP
vvOLn/zhN6OcGsNowhjLeMYxkQlMZhLhTCGSCKKYSjTTiGE6IWYQy0xmM4u5
zCGeOBKYRyLzWcgCkljEEhazlGRSWMYqu1eSzmoyWMcG1rOVLWSxjWx2spt8
CtjHAYo4wmGKOU4FJ6imitPUco46LnKBBq5wg+s000QrLTRyk2tc5TKXOE89
Z//3VMMpTlJJOWWUUsIxjnKIgxSyn73sIY9cctjFDrazmU1kspG1rAn+9fsX
yxZvYQ==
          "]]}, {Line[{200, 199, 252, 402, 200}]}}]]},
    DefaultBaseStyle->{"Graphics", 
      RGBColor[1, 0, 0], 
      FaceForm[
       Opacity[0.2]], 
      Thickness[0.006], 
      PointSize[0.018], 
      EdgeForm[{
        Thickness[0.004], 
        RGBColor[1, 0, 0]}]},
    ImageSizeRaw->{168, 168},
    Method->{Automatic, "GridLinesInFront" -> True},
    PlotRange->{{0, 168}, {0, 168}},
    PlotRangePadding->None]}], "}"}]], "Output",
 CellChangeTimes->{{3.7344275286968293`*^9, 3.7344275499844403`*^9}, {
   3.734427636112464*^9, 3.73442764637676*^9}, {3.7344277016792603`*^9, 
   3.734427716337242*^9}, 3.73442851080697*^9, 3.734501073716978*^9, {
   3.734501114968526*^9, 3.7345011187375493`*^9}, {3.734501277327305*^9, 
   3.7345013065249496`*^9}, {3.734502014518385*^9, 3.734502031857496*^9}, 
   3.734502062288424*^9, {3.7345024942256384`*^9, 3.7345025528716016`*^9}, {
   3.7345026251327887`*^9, 3.734502665117121*^9}, {3.7345027391662264`*^9, 
   3.734502740728381*^9}, {3.734502780454027*^9, 3.734502793710281*^9}, {
   3.7345029409253917`*^9, 3.734502964106038*^9}, 3.734503255601392*^9, {
   3.734503301866028*^9, 3.7345033072167253`*^9}, {3.7345034027735453`*^9, 
   3.7345034203070126`*^9}, {3.7345042221886926`*^9, 3.734504243655456*^9}, 
   3.734504278327917*^9, {3.734504475256804*^9, 3.7345045152103386`*^9}, {
   3.734504811610355*^9, 3.7345048371249523`*^9}, {3.7345050079697657`*^9, 
   3.7345050360314317`*^9}, {3.734505362504715*^9, 3.734505420494813*^9}, 
   3.7345054551420803`*^9, {3.73450548860542*^9, 3.7345055066711435`*^9}, {
   3.734506820583762*^9, 3.73450682880363*^9}, {3.7345068590269985`*^9, 
   3.7345068868198895`*^9}, 3.734507131918925*^9, 3.7345071677180133`*^9, {
   3.7345074566643224`*^9, 3.734507465227092*^9}, {3.7345082372896457`*^9, 
   3.734508256039448*^9}},
 CellLabel->"Out[16]=",ExpressionUUID->"830d71da-aaa0-4e80-90c3-332ea9de5c40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measureModelAccuracy", "[", 
  RowBox[{"nNetTrained", ",", 
   RowBox[{"First", "@", "hidden"}], ",", 
   RowBox[{"Last", "@", "hidden"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.734501855417742*^9, 3.7345018902995343`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5896264e-4c99-470b-94b1-be892b1f72df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.967267578125`", ",", 
   TagBox[GridBox[{
      {"1", "0.9500390625`"},
      {"2", "0.9864453125`"},
      {"3", "0.9746484375`"},
      {"4", "0.9861328125`"},
      {"5", "0.966171875`"},
      {"6", "0.9694140625`"},
      {"7", "0.966953125`"},
      {"8", "0.9659375`"},
      {"9", "0.97890625`"},
      {"10", "0.914609375`"},
      {"11", "0.9444921875`"},
      {"12", "0.9621484375`"},
      {"13", "0.9665234375`"},
      {"14", "0.97015625`"},
      {"15", "0.9878515625`"},
      {"16", "0.98234375`"},
      {"17", "0.9628515625`"},
      {"18", "0.9794921875`"},
      {"19", "0.9684375`"},
      {"20", "0.961796875`"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7345018909101286`*^9, 3.734501957652155*^9, 3.7345025413359237`*^9, 
   3.73450262719427*^9, 3.7345026670622945`*^9, 3.734502797576563*^9, {
   3.7345029448167405`*^9, 3.7345029698112097`*^9}, {3.7345034062385015`*^9, 
   3.7345034229207697`*^9}, 3.734504247416438*^9, 3.734504283340578*^9, 
   3.734504497432866*^9, 3.7345048413635063`*^9, {3.734505018332336*^9, 
   3.734505042540975*^9}, 3.7345054596559196`*^9, 3.734506831338338*^9, 
   3.7345071356481028`*^9, 3.7345071707208586`*^9, 3.7345074684566545`*^9, 
   3.7345082395438175`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"896864d3-284f-4ae7-9136-296ddc85472c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["with validation set", "Section",
 CellChangeTimes->{{3.7345083024207153`*^9, 
  3.7345083140098825`*^9}},ExpressionUUID->"5b7f071b-b347-419f-80ab-\
22f68697062a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetInfo", "=", 
  RowBox[{"trainNetwithValidation", "[", 
   RowBox[{"nNet", ",", 
    RowBox[{"First", "@", "dat"}], ",", 
    RowBox[{"Last", "@", "dat"}], ",", 
    RowBox[{"First", "@", "validationdata"}], ",", 
    RowBox[{"Last", "@", "validationdata"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7345083183937225`*^9, 3.734508368519498*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"45219e52-f95e-4e78-8c6e-e245c46c110b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"1.9 min\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["100", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["3700", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["8", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["0.16432028153055425`", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final validation loss\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["0.12448211163282395`", "SummaryItem"]}}, 
              BaselinePosition -> Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw1zglMk3ccxvGOhQlzOgWBgY7DMKlFWRWkQ44+3GDBHpSCJssMV1BEUTbk
mEAwOnUOJ5txE+yYOlEDjOAYh467GVCYiFxq1iGU0joBgaJ4ELdl/9+bvHnz
yfd9/u/rFLdflmjC4XAS/r3/e9KlcDMf5Da2Nf2vJ8KShtoXK0w6mDnY+6xv
qbNUzWwG/enOS2dSe5hXQGIaViVxv828Cictw/MvNfcyvwfdOn2dlaCPeQ1O
1SlmW1zvMjuCrzvLsdWS10LdLsvyLOhndkb187b6sA8GmNfhnXT7vlkDmYuk
mvr0j8cGmXnI+5sfqZMMM29AT2bINw57HzC7IfH1D3WpSX8x8/F72tkOo9cI
8yY0XMvIHvuWvBkDnmatLkNkd2iPfngq2e4hswf8lDndWjl5Cxpa1y/eOE/2
xM/fl9mMT5MFSPhqd/wyt1Hmj7A812Bcn0r2QrC13/3mevJWzMem2PpOkr3R
VdXe2sIfY/bBTFtC9fVDZF8IVeZHZq+S/TA0ltw1oCMLMdXjt2vBVssMHFD5
WuZuYc4H/phyKknPoe6PSe/eg3bF1P0R9UYtL6yZegC8bp9OzF06znoAVq82
intcmTmBqL5lSHuVSD0QyUbtwrv7qAeh8It7FSPHqQdhRvfYquMa9WCoAuWq
h6Y61oOR+GalUWnCzAmB4GrexsNe1ENwjD/l/NibeiheW7zYut+Heig00yXV
pSLqYQhI0Qw8OE49DEMmmbzsC9TDsSy4pPHiderhELZ8rtdUUt+GuIvO6vQ7
1Lch57OMT7jD1EUQrjrmkGYywboIBb05gSc8mTkROHFEX/ybgHoERoOU2c0e
1CPheyetuf996pH4Thw05JdEfTsUGkufnSLq23EvXN83H09djF1x/s/iDlEX
o7z7zBVDIXUJbiw5ya0sYoYEUzsmjo6W0/sSzLnrFh9NMjdL8Kj7yz0LE7SX
4laoVVFvO+2lmDK7a63opL0ULmuHf5qz07O9FNPnxi0OWjNzZPhT/Isy25IZ
Mijts2u8TZnzZVA7us8JHGkvQ+ZkxoW3hLSPgtHG46kqgvZRqEial74spn0U
uip2ixvyaB8FXopAO1ZGeznOvV1bYy6mvRwFqg1rss7TXo6b6RZfCztoL8eB
TRbD8b/SPhoiF95MqYb20cisK1TtuUL7aDi8nH6iHKR9NJY72mctqaK9Aq07
bl7erKW9AmUdqp0i+l6+AgEtn1o3cgxsr4DkaZH7j+20j4GmsZTL66N9DDbe
V9upX9E+BoctnfaVu9I+BrZOtQP8RdrHYqrgcucInY9YrHRybHJYyZwfi8J2
rpvXc/r/WNgklPcvtzU0/QMB9ya/
                    "]]}, {}}, {{
                    Hue[0.59, 0.5, 0.9], 
                    
                    LineBox[{{1, -0.17941658213523834`}, {
                    2, -0.2055858558824645}, {3, -0.2268911410276295}, {
                    4, -0.2419861368420834}, {5, -0.26114150094656097`}, {
                    6, -0.28768222992484455`}, {7, -0.3072699974919279}, {
                    8, -0.31908417837431574`}, {9, -0.3293215434248327}, {
                    10, -0.33861949484310155`}, {11, -0.3485855784348089}, {
                    12, -0.35947068207739413`}, {13, -0.3752658167483684}, {
                    14, -0.3996152815493616}, {15, -0.48501241516497173`}, {
                    16, -0.532558262013625}, {17, -0.5480712678338175}, {
                    18, -0.5606260694267302}, {19, -0.573198531949306}, {
                    20, -0.5795372375228267}, {21, -0.5902095763154153}, {
                    22, -0.6021687285950196}, {23, -0.6113293829949967}, {
                    24, -0.6247637610526174}, {25, -0.630852178124075}, {
                    26, -0.6393949272306523}, {27, -0.6418442869640446}, {
                    28, -0.6529533463834469}, {29, -0.6624755204876205}, {
                    30, -0.6750874610257726}, {31, -0.6788900724444733}, {
                    32, -0.6869502943709503}, {33, -0.6895720488730602}, {
                    34, -0.6892477168424179}, {35, -0.6993403120979403}, {
                    36, -0.6970957878437811}, {37, -0.7097780836528661}, {
                    38, -0.7081201725618322}, {39, -0.7175961507066296}, {
                    40, -0.7019177713032866}, {41, -0.7392282237425554}, {
                    42, -0.7524455945918263}, {43, -0.7402127518173784}, {
                    44, -0.7273240741734229}, {45, -0.7703286838347609}, {
                    46, -0.7389335678579736}, {47, -0.7322732233968983}, {
                    48, -0.7440665511989163}, {49, -0.7502699991034718}, {
                    50, -0.7743544369228553}, {51, -0.7451419658945576}, {
                    52, -0.76839014917078}, {53, -0.7638317911021625}, {
                    54, -0.7834843699550965}, {55, -0.7621546295350572}, {
                    56, -0.7943764536773745}, {57, -0.7774229513541457}, {
                    58, -0.7940610971116919}, {59, -0.7643304300724686}, {
                    60, -0.7893804518919381}, {61, -0.7865468583955858}, {
                    62, -0.7689173722694179}, {63, -0.7864893939227823}, {
                    64, -0.8022974501033656}, {65, -0.7882978235098692}, {
                    66, -0.8086974623436914}, {67, -0.8113808836352207}, {
                    68, -0.7748911054050963}, {69, -0.8172031960186065}, {
                    70, -0.810862245857793}, {71, -0.786111359860307}, {
                    72, -0.8126528740601178}, {73, -0.8154674709260508}, {
                    74, -0.7908147199900486}, {75, -0.837546830398419}, {
                    76, -0.8325646407467008}, {77, -0.8325059945908311}, {
                    78, -0.8145723609552469}, {79, -0.8207099952358605}, {
                    80, -0.8514292511527676}, {81, -0.8045382451014891}, {
                    82, -0.8304554442638568}, {83, -0.8714664142606375}, {
                    84, -0.8413417677772687}, {85, -0.8246060428467682}, {
                    86, -0.8465246660857099}, {87, -0.8544595783925637}, {
                    88, -0.8295624124725677}, {89, -0.8720631122488065}, {
                    90, -0.8393023133388734}, {91, -0.8604273686259767}, {
                    92, -0.8612494067566977}, {93, -0.856708926806382}, {
                    94, -0.8787562394384645}, {95, -0.8130879524668909}, {
                    96, -0.90315832614765}, {97, -0.8612100154480572}, {
                    98, -0.8721008731425078}, {99, -0.8564817254248863}, {
                    100, -0.9048930532054072}}]}, {}}}, 
                  ImageSize -> {132, 82}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRange -> {{0, 99}, {-1., 0.}}, 
                  GridLines -> {{20, 40, 60, 80, 100}, {{-1., 
                    GrayLevel[0.9]}, {-0.6989700043360187, 
                    GrayLevel[0.95]}, {-0.5228787452803375, 
                    GrayLevel[0.95]}, {-0.39794000867203755`, 
                    GrayLevel[0.95]}, {-0.30102999566398114`, 
                    GrayLevel[0.95]}, {-0.22184874961635626`, 
                    GrayLevel[0.95]}, {-0.1549019599857432, 
                    GrayLevel[0.95]}, {-0.09691001300805638, 
                    GrayLevel[0.95]}, {-0.04575749056067506, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7345083482261205`*^9, 3.734508482258021*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"f8ad09b4-1e6b-4ea7-b781-e41926f17d10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetInfo", "[", "\"\<LossEvolutionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.734505066644539*^9, 3.7345050734986153`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"99a8fcac-2d06-4be0-a25d-a840743d9691"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{
     AbsoluteThickness[1.25], {{
       InsetBox[
        FormBox["20", TraditionalForm], 
        Offset[{-2, 0}, {740, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["40", TraditionalForm], 
        Offset[{-2, 0}, {1480, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["60", TraditionalForm], 
        Offset[{-2, 0}, {2220, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["80", TraditionalForm], 
        Offset[{-2, 0}, {2960, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["100", TraditionalForm], 
        Offset[{-2, 0}, {3700, 0.05}], {1., 1.}]}, {
       InsetBox[
        FormBox[
         TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
          SuperscriptBox], TraditionalForm], 
        Offset[{3, 0}, {0, -1.}], {-1, -1.}]}}, {{
       Hue[0.083, 1., 1.], 
       LineBox[CompressedData["
1:eJw90gs0lPsax/F02VEqtR3KFumqEkWne/rpfkKlpHYulVsltxoiUkhSEUOD
kcsMZsaYaXRR7BSySyIRheRSJIm2Qm2R7M55H2fWmjXrs77/51n/d82rZeu2
w2H4sGHDXv78/veX+Whhqtt1S+cxf+b9j/7LcW6VcNb9mQ8YYwNUKj1vv+UU
Ms43hW+pTHuUXRHjaTuxfrrl2Ya1xYz374b+X/4qnIISxjxLZE8KHdE79wnj
1/vQ6bjscFtuKWMlW3gPqxaKJeSF9hDwpml6cMoYb3cE18ztvKUZ2f0Q1JfU
JPYklzOOcMLTfXI9KyrJ15wR1egSkDW/gnG5KzwzRv39SI7s7Y5PmxXDl8ys
ZBxyFJku7awbRuTYY4jxfSwvOEJOY8Egd/2lzoPPGWd7QLUjrjn3NvUiT+zl
7xKa/fqCcc1x5Le6ONzUovPvvVA1s0ocZEm91xtqT/JNdbqpy/vg6R9Zj7P0
qxhP9sWaKisE8um89kks17PLbC2ivswPfu788Kts8uZT6Mtuaq8YqGa85zTy
yhwWccNqGC/2x5bDhg/Cf5Dv+iNQIdjgTu0rxusDkN7d+Dl8Wj3jJwG46dMk
tWxoZGweiLYSo6hYP3JdIMQqTYYmW18ztj+DY0Hs0QZK5I4z6PVfcoAtI3sE
4eprwx6f4+TvQVj6ZF7ttyZy0Fmoqj6I9a8hKwbjrcFAUfE78uVgjF8ZYNq0
7w1j9XOYNsGiKWRoPvUc8tdfGBaURV0nBOU7vjn7qpMzQ7By1qq4//SSV52H
fkfO7YUHyA/O40Pnxgx55SbGJhegviEmrbKA+vMLKFlXsLMD1K0uwndB9YqT
fdTfXoSxU8W67jDqzqFgT9ygP8gl94TC+ZNmwKAh+WQYfLuey23f1Mx45CXo
zajjHbGhHnoJsnWHf1/Noq4cDueVSV3b/KjHh8PKSl5mH0t9UgTYLr4TdHOp
W0TgQ3azVtYt6nER+JFUYh1sTG6IwJwPUz/XXCVPZ0M23M2k5yTZkY3nrqqL
uurI6WyIbkm85y94y/gvNopeqfd78KjrR6LaMU1Nj0f9eCScmhvb5Yfm70SC
ffiuW+YJ6j8i0TCtt3izCnltFHzt7b00I8jBUVBSvNyhsIZcHIUG6+p6xRLy
+MuYbOzYfdOXvOMytNxr//3mHjn6MvYPV42TPSLXXoaKVDihtYyswcEvL1xH
d25sYWzLQUXfjmz/AupCDgpaHKQzL1H/wEGE16yNfSpk3WgMxFscf3WLfCwa
1qOOrjs5gXw7GttK+ietiiX3RcPMQtKQa0s2jMEzuVp38wRyYAzumVnv8dpE
LozBD4v1Sk/F5DGxWF8wfYvZd/LWWGg8114wP5gcGQvbyKMjpIffMa6KhcNO
c3ndofupcTH2tHNQSzB1Gy4SHdQ0TEOoJ3PRdv3+10Op1N9xsfjHayVWKfV5
cdAftXzbbhfqrnE4+qbynmwe+UYceieEOoZuJn+NQ4IuWjLlyCuuwG+6k3bh
DPKpK2Cf8pEaJpMLruB4TmODsQb5l3hsfWKXt0mxlfGWeCz+1iA/zpD6pXhI
53b1dwySK+LRrDzZ6YcTWSUBFYqFm48VkfcmQKHMT/2FBTkxAaEypdPs9+Sm
BIyxeNZ8g02enYizbqHR2hlkp0SwKstZ39+QZYmwMdEqEr8mdyVi7uqxefpT
6b5LkuDXeL5YLYC6TxLG1S2dU5NCPTcJBt+iTW+GUZfj4dJdvfomAfUZPGy/
xukZfER9Aw/StWMaLwZQP8hDWfDAzbKh5z/Pg2j4Mo6RKXUJDzqSL+4blcml
PNx/6FmUP53cycPskRnhi33IE/lgGeet7H9H+wz4KHR/4C4no76Lj65jp5rs
lMhefNTfsrPxryJzf57/fVerdgfN5/CR4xl5JqiOej0f+Z1PNwWXUh/k4+uC
fM812dS1kjFDVsq2MievS8ZWs7dba5PIDslYPSVsBM+CfC4Ziz8vdV0WRRYn
46p698HBenJJMhLn7B5+DeSPyWhb4RAbrfqe8YQUjPQTdPScp74oBdzsj/Hl
1tR3piD1lerD/+/3TEH4rNdOe0dSj0mBW3FC3Sc+9T9SkKRf4G6jRP1VCkbU
10xsjKE+kII21XFZ3BKyZipuK4oM2iRko1RsjDxYU/GVbJcKbRel7zn2tO9s
Kr4NLFms305dlArRWoUrZ8OoP/55frl9hvIN6u2pmFG7olfLgvo4AU6rsC+2
D71fegKEmlUEn1CnbibAAW+r8qyxZJYALYHnlpQNzXMEuBuSl1ZbSvNZAgSV
f+7TXkr9pQCa8AnViSD3C9C3qPpfSTrkqUIc5KvrFT4irxFikl/iUbkB2ndA
CO/ol75f6qmfESJ8moIkcxlZIMRDoymm0gbyIyGUj03y6Fcgtwlhrfiryvfr
5LEiPNvWuFAjk7xAhEwjbrfElbxNBNed9wavKpKPimDuEDjeb+j+USLIOOoT
dXLIt0Sw94Fuz9D/US0CK3NLs4V5G+NvImiq3Wt2SqT+WxqKDkeK1HSor06D
gfLSChGo70uDTYB8XeFQD0jDV7YLx9yNekoaRgwYTlesJD9MQ2PWVCMPb3Jr
GqosNW8d0qJ5BTEO2X5qfy+jPl+M/ZpP5IPuk03FkCvy18vtJbuJscfAMcxq
O5ktRswUs8nPl9O+m2IEK4sWOWVTfyHGBZOnemG7qf8tBstFLFWdQX1KOkx0
qy4GrKO+Mh2v4k9sONhI3TodfnsShPFl5NPpsBYa2+4Wk/np2Dn2xMyiZ+Q/
09Ex7DfFAF3a15KOkAztpWfCqY+WgKUk6S+OoT5XgjndN8y7jlA3loCb8ekO
5yl1FwlsGtxsinnUwyUwPllvzlpJ/boEJklvNLnJ1Csl2GK3epf3KupfJBAE
d/pvG7q/qhR7rT8+zlKnvlyK2dwcVtvQ+2kpRVOGl4/XfOp+UuzYZLPr0EJy
khQa6k2WEVw6f18KzsMNI05VteX9AywQFro=
        "]]}, {}}, {{
       Hue[0.59, 0.5, 0.9], 
       LineBox[{{37, -0.17941658213523834`}, {74, -0.2055858558824645}, {
         111, -0.2268911410276295}, {148, -0.2419861368420834}, {
         185, -0.26114150094656097`}, {222, -0.28768222992484455`}, {
         259, -0.3072699974919279}, {296, -0.31908417837431574`}, {
         333, -0.3293215434248327}, {370, -0.33861949484310155`}, {
         407, -0.3485855784348089}, {444, -0.35947068207739413`}, {
         481, -0.3752658167483684}, {518, -0.3996152815493616}, {
         555, -0.48501241516497173`}, {592, -0.532558262013625}, {
         629, -0.5480712678338175}, {666, -0.5606260694267302}, {
         703, -0.573198531949306}, {740, -0.5795372375228267}, {
         777, -0.5902095763154153}, {814, -0.6021687285950196}, {
         851, -0.6113293829949967}, {888, -0.6247637610526174}, {
         925, -0.630852178124075}, {962, -0.6393949272306523}, {
         999, -0.6418442869640446}, {1036, -0.6529533463834469}, {
         1073, -0.6624755204876205}, {1110, -0.6750874610257726}, {
         1147, -0.6788900724444733}, {1184, -0.6869502943709503}, {
         1221, -0.6895720488730602}, {1258, -0.6892477168424179}, {
         1295, -0.6993403120979403}, {1332, -0.6970957878437811}, {
         1369, -0.7097780836528661}, {1406, -0.7081201725618322}, {
         1443, -0.7175961507066296}, {1480, -0.7019177713032866}, {
         1517, -0.7392282237425554}, {1554, -0.7524455945918263}, {
         1591, -0.7402127518173784}, {1628, -0.7273240741734229}, {
         1665, -0.7703286838347609}, {1702, -0.7389335678579736}, {
         1739, -0.7322732233968983}, {1776, -0.7440665511989163}, {
         1813, -0.7502699991034718}, {1850, -0.7743544369228553}, {
         1887, -0.7451419658945576}, {1924, -0.76839014917078}, {
         1961, -0.7638317911021625}, {1998, -0.7834843699550965}, {
         2035, -0.7621546295350572}, {2072, -0.7943764536773745}, {
         2109, -0.7774229513541457}, {2146, -0.7940610971116919}, {
         2183, -0.7643304300724686}, {2220, -0.7893804518919381}, {
         2257, -0.7865468583955858}, {2294, -0.7689173722694179}, {
         2331, -0.7864893939227823}, {2368, -0.8022974501033656}, {
         2405, -0.7882978235098692}, {2442, -0.8086974623436914}, {
         2479, -0.8113808836352207}, {2516, -0.7748911054050963}, {
         2553, -0.8172031960186065}, {2590, -0.810862245857793}, {
         2627, -0.786111359860307}, {2664, -0.8126528740601178}, {
         2701, -0.8154674709260508}, {2738, -0.7908147199900486}, {
         2775, -0.837546830398419}, {2812, -0.8325646407467008}, {
         2849, -0.8325059945908311}, {2886, -0.8145723609552469}, {
         2923, -0.8207099952358605}, {2960, -0.8514292511527676}, {
         2997, -0.8045382451014891}, {3034, -0.8304554442638568}, {
         3071, -0.8714664142606375}, {3108, -0.8413417677772687}, {
         3145, -0.8246060428467682}, {3182, -0.8465246660857099}, {
         3219, -0.8544595783925637}, {3256, -0.8295624124725677}, {
         3293, -0.8720631122488065}, {3330, -0.8393023133388734}, {
         3367, -0.8604273686259767}, {3404, -0.8612494067566977}, {
         3441, -0.856708926806382}, {3478, -0.8787562394384645}, {
         3515, -0.8130879524668909}, {3552, -0.90315832614765}, {
         3589, -0.8612100154480572}, {3626, -0.8721008731425078}, {
         3663, -0.8564817254248863}, {3700, -0.9048930532054072}}]}, {
       AbsolutePointSize[2.], 
       Hue[0.59, 0.5, 0.76], 
       PointBox[{{37, -0.17941658213523834`}, {74, -0.2055858558824645}, {
         111, -0.2268911410276295}, {148, -0.2419861368420834}, {
         185, -0.26114150094656097`}, {222, -0.28768222992484455`}, {
         259, -0.3072699974919279}, {296, -0.31908417837431574`}, {
         333, -0.3293215434248327}, {370, -0.33861949484310155`}, {
         407, -0.3485855784348089}, {444, -0.35947068207739413`}, {
         481, -0.3752658167483684}, {518, -0.3996152815493616}, {
         555, -0.48501241516497173`}, {592, -0.532558262013625}, {
         629, -0.5480712678338175}, {666, -0.5606260694267302}, {
         703, -0.573198531949306}, {740, -0.5795372375228267}, {
         777, -0.5902095763154153}, {814, -0.6021687285950196}, {
         851, -0.6113293829949967}, {888, -0.6247637610526174}, {
         925, -0.630852178124075}, {962, -0.6393949272306523}, {
         999, -0.6418442869640446}, {1036, -0.6529533463834469}, {
         1073, -0.6624755204876205}, {1110, -0.6750874610257726}, {
         1147, -0.6788900724444733}, {1184, -0.6869502943709503}, {
         1221, -0.6895720488730602}, {1258, -0.6892477168424179}, {
         1295, -0.6993403120979403}, {1332, -0.6970957878437811}, {
         1369, -0.7097780836528661}, {1406, -0.7081201725618322}, {
         1443, -0.7175961507066296}, {1480, -0.7019177713032866}, {
         1517, -0.7392282237425554}, {1554, -0.7524455945918263}, {
         1591, -0.7402127518173784}, {1628, -0.7273240741734229}, {
         1665, -0.7703286838347609}, {1702, -0.7389335678579736}, {
         1739, -0.7322732233968983}, {1776, -0.7440665511989163}, {
         1813, -0.7502699991034718}, {1850, -0.7743544369228553}, {
         1887, -0.7451419658945576}, {1924, -0.76839014917078}, {
         1961, -0.7638317911021625}, {1998, -0.7834843699550965}, {
         2035, -0.7621546295350572}, {2072, -0.7943764536773745}, {
         2109, -0.7774229513541457}, {2146, -0.7940610971116919}, {
         2183, -0.7643304300724686}, {2220, -0.7893804518919381}, {
         2257, -0.7865468583955858}, {2294, -0.7689173722694179}, {
         2331, -0.7864893939227823}, {2368, -0.8022974501033656}, {
         2405, -0.7882978235098692}, {2442, -0.8086974623436914}, {
         2479, -0.8113808836352207}, {2516, -0.7748911054050963}, {
         2553, -0.8172031960186065}, {2590, -0.810862245857793}, {
         2627, -0.786111359860307}, {2664, -0.8126528740601178}, {
         2701, -0.8154674709260508}, {2738, -0.7908147199900486}, {
         2775, -0.837546830398419}, {2812, -0.8325646407467008}, {
         2849, -0.8325059945908311}, {2886, -0.8145723609552469}, {
         2923, -0.8207099952358605}, {2960, -0.8514292511527676}, {
         2997, -0.8045382451014891}, {3034, -0.8304554442638568}, {
         3071, -0.8714664142606375}, {3108, -0.8413417677772687}, {
         3145, -0.8246060428467682}, {3182, -0.8465246660857099}, {
         3219, -0.8544595783925637}, {3256, -0.8295624124725677}, {
         3293, -0.8720631122488065}, {3330, -0.8393023133388734}, {
         3367, -0.8604273686259767}, {3404, -0.8612494067566977}, {
         3441, -0.856708926806382}, {3478, -0.8787562394384645}, {
         3515, -0.8130879524668909}, {3552, -0.90315832614765}, {
         3589, -0.8612100154480572}, {3626, -0.8721008731425078}, {
         3663, -0.8564817254248863}, {3700, -0.9048930532054072}}]}}}, 
    ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> Full,
     BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
      ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, 
    PlotRange -> {{0, 3689}, {-1., 0.}}, 
    GridLines -> {{740, 1480, 2220, 2960, 3700}, {{-1., 
        GrayLevel[0.3001]}, {-0.6989700043360187, 
        GrayLevel[0.8501]}, {-0.5228787452803375, 
        GrayLevel[0.8501]}, {-0.39794000867203755`, 
        GrayLevel[0.8501]}, {-0.30102999566398114`, 
        GrayLevel[0.8501]}, {-0.22184874961635626`, 
        GrayLevel[0.8501]}, {-0.1549019599857432, 
        GrayLevel[0.8501]}, {-0.09691001300805638, 
        GrayLevel[0.8501]}, {-0.04575749056067506, 
        GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
      Scaled[0.05]}, PlotRangeClipping -> True, Background -> GrayLevel[1], 
    FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
       FormBox["\"loss\"", TraditionalForm], None}, {None, 
       FormBox["\"rounds\"", TraditionalForm]}}, 
    ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None],FormBox[
    FormBox[
     TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Hue[0.083, 1., 1.], Editable -> False, Selectable -> False]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7345050741736608`*^9, 3.734506816934031*^9, 
  3.734507127909899*^9, 3.7345074519838476`*^9, 3.7345082340126805`*^9, 
  3.7345085289484854`*^9, 3.7345086224668293`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"e7200dac-a528-4cf2-b37b-b1ab6a3553ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetTrained", "=", 
  RowBox[{"nNetInfo", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.734503314120943*^9, 3.7345033963756385`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"bdd9991f-bad1-4685-8d88-c707f0696e8d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["24", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-23., 1.4083438190194562`*^-15}, {-22., 
                    1.0531590455443747`*^-11}}], 
                    
                    LineBox[{{-22., 1.0531590455443747`*^-11}, {-21., 
                    0.4275835627189663}}], 
                    
                    LineBox[{{-22., 
                    1.0531590455443747`*^-11}, {-21., -0.5724164372402485}}], 
                    LineBox[CompressedData["
1:eJxN1n9Q03Ucx3FF88zRiToGsuFgbGwM2G+NLPlegTXtEiPP6w4prfBUzG7U
XSJYBmEdm4M5ILfKYiwwBaS8UMMfL1ATQhJUBEG9VOrAw5LcaZrcxT4f/ni/
bxz3PPh+77H358uP2Lfey8wJmTJlinfiI/iZz0JEXLHnfZY9KIzMb9k6fs+C
2f28wxOmZRz+04LRy7yLk/uLkvstaOjlbVAvFq9tt2DlJd5ySfACC/ov8F75
yJ/xyG/B0h7euNjwcJ3LgqrzvN/3pU3dWWhBZxfv9WwsGOrkzS7PsKD5V97O
WykTLwuiJr8epwiOBaGT1x9eK2peK7LA0c172TeBiZcZeye9168Fx4zUq7zz
ZGdtsrNmbBniPSOr6YmsJjN0f1GPGQfFDuIxY0mcg3jMOL7IQTwT12fwbmYe
M+ybeS9nHhMGnQ7iMUHa7CAeE16+6SAeE3Ln7SIeExrbeT9kHhMiQ5zEY4J1
iZN4TFiyzUk8Jtw/4iQeI2wPncRjxKFny4jHiJ8/LiMeI0rOlBGPEfOaysl+
jAgLlBOPEVq9izXjKIx4Y52LeIz4vtRFPAaEHXARjwHlbS7iMUDb4yIeA65f
dhGPAfmT3889BjScdBGPAZW/uMh+DND3UY8BhWO8K1JH3KkjehSE72Z9rCU4
eujSeLPbOfWo2MZbxG6gR2ML765zwdHhwFE36wB7IHVYFVrBOjr4dmw6zMjh
vTQ9ODq0neKd2yrZ3CrRoURTybqSeZKR6a4knmRoplexHmKeZMwo4B3KPMm4
86CKeJKQtm8P8SRht8pDPEnwujzEk4SsUd6bmScJ3Qu9ZD+JGH/XSzyJuFnh
JZ5EfLTfSzyJ6Gn0Eo8WL9i8xKPFP1m82XHbtEh5ifeLzKOFxOwlHi0+lfN2
M08CSkOpJwHKRx7iScCqYQ/xJCCqjzfjnNNgXzXve8yjQfnkPrhHg5Ai3oyT
rsHjPA85Lw12vOMh+1GjdLWHeNRYsIx61Fj8nIc8P2r8rveQ/cQjdJaH7Cce
W8TUE49Dy+l5xWOgnp5XPG4spuelQkeA7keFyoEviUeF50e/Ih4VzifsJR4l
+sd8xKOE/VU/eX6UuGX7jniUuJ5ZSzxKbA/UEk8c2lbXEU8c9ufXEU8cUrLr
yHnFYePUOnJeCvS1+sl5KdAu8ZP9KPCavYZ4FLDJa4hHAdVFH/HEYkutj3hi
scLjI55YnD7gI55YdF/zkf3EwDfLT/YTg7p11BODGzV+4onBKz1+4onBnRHe
mu0X1NsvyHHiDu+tHwZHjtNXebcHbyeTY7yZdwS7wQJsKuTt9QQnGjPf5u93
mP2ARKNYxPsZ9gtRhp1HuL/08+DIELaJd/CvfVGyDNIYH/FI0TRQTTxSdHiq
iUeKjdm8I5knCmWqauKZj0vF37I+VV8bCKTOR7E1RN6ZOij4xorXz/0jEkf/
VSurbg4IT28w/j1mj0RexZyiYeuAsCPsoNNtjkS99GRKm+2KUHj7cfqDwQjk
Og3WuOx+QXc/am50SQQOjuY0iUR9QpX5yfvT9RH4YNGbtoKCXuFH39m7jVck
OJErs+c1XhSK0laHSEsksDu+Hr9b0yN01T+4pI2XANaZw+kbfhM68xZaRV3h
yBgdzJ7b2yHkV85ecyw/HK3Tmtcsd54ResU7w1KTwhFeVjU06m4Vhu7uySkf
EuML2X+373W2CL4Ea9YhnxjnQy4vuDXzJ2HOSfdY7XoxKqsLOlYcbxAMPxRo
cg1iyJ7Kyf/E6xP4/2NivF7e7T2W6RL+BxAN0Ks=
                    "]], 
                    
                    LineBox[{{-21., -0.5724164372402485}, {-20., \
-0.5724164373051922}}], 
                    
                    LineBox[{{-21., -0.5724164372402485}, {-20., \
-1.5724164372620621`}}], 
                    LineBox[CompressedData["
1:eJxN1X9I3HUcx/Fb4RpTomhII134/d6P7/30+yOGzMMC9WBRWBusNSOmoLB0
ipnMsYmwQIjAbBo1KGVhZGvzPOXO+95X52uutihrAyNlMLE5Nc/NP+YYujHJ
7+ftH+8P3+N48r3vl8f38/ne95tXWX+g6hmHw3F882N/03gNTVWjkfC7d8bS
u63mp6sGclzU2d5ny4YXDDhmRkR/Gpw+E5w2kNtBrXr27Tr6m4FPCqlfFQcY
yJi1RL/zuLfsca+Bmy3UmLy0XvGlgX92UTd+X7yt7bSB7B9SoqvFMPBFiFoc
XmbgX5ii2+cKNjcDF2qoZckeBpZD1ImjmZubgfM7qd/sebi/56GOvzaSomdu
20NHYybt/zjnekPOdR3tKvX28oGM8gEdeXUm8+goPk+edeHRUfckxTw6Piq1
mEeH3moxj47f+yzm0aCOW8yjoeoPi3k0HPvFYh4N4UsW82h44RWLzY+GqWXu
0bBnlFpwJA1z7Snm0eCuSDGPikUjxTwqlOdSzKNi4RafHxVSlM+Pihdlk3lU
XFtLMo+KBzeSbH5UdPUlmUfFxTPUXUVLnUVL+dj3IfWIZY98FBVSi9O158Pc
TZ0pTpCPC+vDov+csEcIM19T21e3vyeEyZPUufblNIRQX05dWmKPEAbD1DVX
smuvZIdwLpf6K+EJwrORYJ4gPpihvis8Qey9TJ0lPEEMf5dgngDO6gnmCeDH
lxLME8CjtTjzBHD6DnWt8ARQcDPO5seP4Hicefw4kowzjx+jg3Hm8eP9WJx5
fIiMxZnHh8qr1GK5G3yY/pU6Ijw+9F3jHh9ubO3vFB4vDl7lHi/UMe7xotrk
Hi8ebXkEZ0JB51nqVeFR0N3BPQq+6aYWnBIFLSNxtl4K3krz+fFgh8LXy4OB
Jr5eHhRPJtj948H4G/z+cSOSTrL5cSN62GQeN5RzJlsvN4Z+Ntn8uPF2h8k8
LqxFTOZxYWjr/0AeF1p9/H52ofw97nEiODvEPE58OzXI7h8nHCsx5nHiiBxj
Hid+OjHAPDJW0lHmkaG0RJlHxqFQlK2XjFMb/aINMWR03acWr4vtMvR71K2H
e7PCtyXMp6krxAVJuLjUz57/Etr+o+6OfT71er2EpsV+9vyQ0LxA/bf9c11C
xzy1f+Kz5zNelmDdpab3l4Qnc9T/A+xmfIM=
                    "]], 
                    LineBox[CompressedData["
1:eJxN1FtIFGEYxvHtoBe5SEItJoqoF9nMHmbm8yLKtDBBO6CU5q67s3ggIzLM
uskwSqMlrRZCA4lwQUQICoxKkRV6hMgiFTJBk4xAKZWKQm8Uw3a+9+Z9mWX4
MTvDf75hJqOm4dTZrTabrTj2s/Y0OViP+rO6s9deL++JXv23IjCxQHbs21Yy
+F3gV1JA+pZrptU1I1BZQNb2HthV9U4gqYmcLk8QcLwgl673lqz3CtT9JePT
s7XqBwLbc0zpKz0FW0LNAj+vkevkCGS8JcvTSwRuJwalw/P7Y5vAxglyVqY1
AqEW8kBVQmwTSH9KPhZZLY6sGpgYI3+ds8ZAeJ58OXW0MXXUQNUfcry/P87f
b6BwJch6DBz8SF6TPQY+vOE9BpoHeY+B0ie8x8CRR7xHx5l23qOjvYn36Ph2
jvfoqCjnPTqKdgfZ+ujosfEeHdXLtH4yJ1NHaNJkPTp2DpmsR4Ot22Q9Gspa
TNajwV5rsh4NagF/XhruTAVYj4balwHWo6G9K8DWR8PGzQDr0fDqIrkzb6kj
b8mDaJA8HLXGA3sZWV4u7EHfSXKCvIAH946Tx8escaO5gmzdXXHEjR/l5DTr
dhpjx4vIhUetcSPPQ74w4qgfcbiRvYP8UPa4cPizn/W40PqYvCB7XPh9mmyX
PS6ENitZjxOXhnysx4mUoI/1OHE+2cd6nAgueqXrZY8TK+Netj4qPO+9rEdF
4qyX9ajosPlYj4rhXHKOsEZFW5icYr3u8So6F8k3vL323DkF1w9Rf41cYAX5
9yvZ+6vgyzQ58vzudH6DgrI0P3v+CvpM8pT1d0PBZBdZHWtLjEtWMDtBpu+P
guFN8n8zyj4A
                    "]], 
                    
                    LineBox[{{-20., -1.5724164372620621`}, {-19., \
-2.5724164373207246`}}], 
                    
                    LineBox[{{-19., -2.5724164373207246`}, {-18., \
-2.572416437334126}}], 
                    
                    LineBox[{{-18., -2.572416437334126}, {-17., \
-2.572416437299565}}], 
                    
                    LineBox[{{-17., -2.572416437299565}, {-16., \
-2.5724164372907543`}}], 
                    
                    LineBox[{{-16., -2.5724164372907543`}, {-15., \
-2.572416437280025}}], 
                    
                    LineBox[{{-15., -2.572416437280025}, {-14., \
-2.5724164372882248`}}], 
                    
                    LineBox[{{-14., -2.5724164372882248`}, {-13., \
-1.5724164372659137`}}], 
                    
                    LineBox[{{-13., -1.5724164372659137`}, {-12., \
-1.5724164372600449`}}], 
                    
                    LineBox[{{-12., -1.5724164372600449`}, {-11., \
-1.5724164372385296`}}], 
                    
                    LineBox[{{-11., -1.5724164372385296`}, {-10., \
-1.5724164373028338`}}], 
                    
                    LineBox[{{-10., -1.5724164373028338`}, {-9., \
-0.5724164371996489}}], 
                    
                    LineBox[{{-9., -0.5724164371996489}, {-8., \
-0.5724164372327176}}], 
                    
                    LineBox[{{-8., -0.5724164372327176}, {-7., \
-0.5724164372169436}}], 
                    
                    LineBox[{{-7., -0.5724164372169436}, {-6., \
-0.5724164371999475}}], 
                    
                    LineBox[{{-6., -0.5724164371999475}, {-5., 
                    0.0169171781054874}}], 
                    
                    LineBox[{{-5., 0.0169171781054874}, {-4., 
                    0.01691717810992113}}], 
                    
                    LineBox[{{-4., 0.01691717810992113}, {-3., 
                    0.016917178109935278`}}], 
                    
                    LineBox[{{-3., 0.016917178109935278`}, {-2., 
                    0.016917178109935215`}}], 
                    
                    LineBox[{{-2., 0.016917178109935215`}, {-1., 
                    0.01691717810984989}}], 
                    
                    LineBox[{{-1., 0.01691717810984989}, {
                    1.0358784011416632`*^-18, 0.01691717810984983}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    6.319517610793856*^-12}, {-0.25, 0}, 
                    Offset[8], {1., 1.0530182111624728`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"168\"", 
                    "\"168\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "168", "168"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-21.4, 
                    0.2565501376355924}, {-0.25, 0}, 
                    Offset[8], {1., 0.42758356270843473`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"83\"", "\"83\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "83", "83"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-21.4, -0.34344986233993646`}, {-0.25, 0}, 
                    Offset[8], {1., -0.5724164372507801}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"83\"", "\"83\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "83", "83"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.355555555555554`, 
                    0.4275835627404529}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888888857, -3.9745984281580604`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -0.5724164372792147}, {-0.25, 0}, 
                    Offset[8], {1., -6.494371707077562*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"41\"", "\"41\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "41", "41"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -1.1724164372533368`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000218137`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"41\"", "\"41\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "41", "41"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.955555555555556`, -0.572416437281963}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    2.5577318041314356`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.133333333333333`, -1.5724164373046317`}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.6615597786540093`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-19.4, -2.1724164372972594`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000586624`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.4, -2.5724164373287657`}, {-0.25, 0}, 
                    Offset[8], {1., -1.340128008564534*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.4, -2.5724164373133895`}, {-0.25, 0}, 
                    Offset[8], {1., 3.456079866737127*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -2.5724164372942786`}, {-0.25, 0}, 
                    Offset[8], {1., 8.810729923425242*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"5\"", "\"5\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "5", "5"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -2.572416437284317}, {-0.25, 0}, 
                    Offset[8], {1., 1.0729195309977513`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"10\"", "\"10\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "10", "10"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -2.5724164372849447`}, {-0.25, 0}, 
                    Offset[8], {1., -8.199663170671556*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"22\"", "\"22\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "22", "22"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -1.972416437274838}, {-0.25, 0}, 
                    Offset[8], {1., 1.000000000022311}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -1.5724164372623926`}, \
{-0.25, 0}, 
                    Offset[8], {1., 5.8688609527735025`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -1.5724164372471359`}, {-0.25, 0}, 
                    Offset[8], {1., 2.1515234038815834`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -1.5724164372771121`}, {-0.25, 0}, 
                    Offset[8], {1., -6.430411758628907*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"20\"", "\"20\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "20", "20"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -0.9724164372409227}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.000000000103185}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -0.5724164372194901}, {-0.25, 0}, 
                    Offset[8], {1., -3.3068769944577525`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -0.5724164372232532}, {-0.25, 0}, 
                    Offset[8], {1., 1.5774048733874224`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -0.572416437206746}, {-0.25, 0}, 
                    Offset[8], {1., 1.6996071217079134`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"40\"", "\"40\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "40", "40"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -0.21881626801668658`}, {-0.25, 0}, 
                    Offset[8], {1., 0.5893336153054349}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    0.016917178108147638`}, {-0.25, 0}, 
                    Offset[8], {1., 4.433727690544842*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.01691717810992962}, {-0.25, 0}, 
                    Offset[8], {1., 1.4148404670066839`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"2", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.01691717810993524}, {-0.25, 0}, 
                    Offset[8], {1., -6.245004513516506*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1", "80", "80"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.01691717810988402}, {-0.25, 0}, 
                    Offset[8], {1., -8.532410888939523*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "160", "160"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    0.016917178109849853`}, {-0.25, 0}, 
                    Offset[8], {1., -6.245004513516506*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "160", "160"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-23., 1.4083438190194562`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 1.0531590455443747`*^-11}], 
                    Offset[{12, 12}, {-22., 1.0531590455443747`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-22., 
                    1.0531590455443747`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 0.4275835627189663}], 
                    Offset[{12, 12}, {-21., 0.4275835627189663}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-21., 0.4275835627189663}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -0.5724164372402485}], 
                    Offset[{12, 12}, {-21., -0.5724164372402485}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-21., -0.5724164372402485}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 0.0169171781054874}], 
                    Offset[{10, 10}, {-5., 0.0169171781054874}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 0.0169171781054874}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "80", ",", "80"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "80", ",", "80"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_3", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 80, 80}, {1, 80, 80}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -0.5724164373051922}], 
                    Offset[{12, 12}, {-20., -0.5724164373051922}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-20., -0.5724164373051922}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -1.5724164372620621`}], 
                    Offset[{12, 12}, {-20., -1.5724164372620621`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-20., -1.5724164372620621`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., -0.5724164371996489}], 
                    Offset[{10, 10}, {-9., -0.5724164371996489}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-9., -0.5724164371996489}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "40", ",", "40"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "40", ",", "40"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_2", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 40, 40}, {1, 40, 40}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., -1.5724164372659137`}], 
                    Offset[{10, 10}, {-13., -1.5724164372659137`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-13., -1.5724164372659137`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"concat_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "20", ",", "20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "20", ",", "20"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["concat_1", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{1, 20, 20}, {1, 20, 20}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -2.5724164373207246`}], 
                    Offset[{12, 12}, {-19., -2.5724164373207246`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-19., -2.5724164373207246`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -2.572416437334126}], 
                    Offset[{10, 10}, {-18., -2.572416437334126}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-18., -2.572416437334126}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "10", ",", "10"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_1", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {1, 10, 10}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., -2.572416437299565}], 
                    Offset[{12, 12}, {-17., -2.572416437299565}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-17., -2.572416437299565}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -2.5724164372907543`}], 
                    Offset[{12, 12}, {-16., -2.5724164372907543`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-16., -2.5724164372907543`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -2.572416437280025}], 
                    Offset[{12, 12}, {-15., -2.572416437280025}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-15., -2.572416437280025}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -2.5724164372882248`}], 
                    Offset[{12, 12}, {-14., -2.5724164372882248`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-14., -2.5724164372882248`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"crop_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["crop_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., -1.5724164372600449`}], 
                    Offset[{10, 10}, {-12., -1.5724164372600449`}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., -1.5724164372600449`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "20", ",", "20"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_2", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 20, 20}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -1.5724164372385296`}], 
                    Offset[{12, 12}, {-11., -1.5724164372385296`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-11., -1.5724164372385296`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -1.5724164373028338`}], 
                    Offset[{12, 12}, {-10., -1.5724164373028338`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-10., -1.5724164373028338`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., -0.5724164372327176}], 
                    Offset[{10, 10}, {-8., -0.5724164372327176}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., -0.5724164372327176}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "40", ",", "40"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_3", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 40, 40}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -0.5724164372169436}], 
                    Offset[{12, 12}, {-7., -0.5724164372169436}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-7., -0.5724164372169436}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -0.5724164371999475}], 
                    Offset[{12, 12}, {-6., -0.5724164371999475}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-6., -0.5724164371999475}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 0.01691717810992113}], 
                    Offset[{10, 10}, {-4., 0.01691717810992113}]]}, 
                    InsetBox[
                    FormBox["\"D\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 0.01691717810992113}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dropout_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DropoutLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "80", ",", "80"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dropout_4", Bold], 
                    Style[
                    HoldForm[
                    DropoutLayer["Input" -> {2, 80, 80}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 0.016917178109935278`}], 
                    Offset[{12, 12}, {-3., 0.016917178109935278`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3., 0.016917178109935278`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 0.016917178109935215`}], 
                    Offset[{12, 12}, {-2., 0.016917178109935215`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-2., 0.016917178109935215`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., 0.01691717810984989}], 
                    Offset[{12, 12}, {-1., 0.01691717810984989}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-1., 0.01691717810984989}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.0358784011416632`*^-18, 0.01691717810984983}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQHmB7xccl9ei7tpA+GbHXhguET5kMZyWwjf9ID4
ze6i9tjb9jB+ScUWN5vAR/shfJEDERMuzNoTNBEqb3KgNHUvkrzJgV+7o5Xn
afyE8pUO/H68Dkle68Ce/8jyxgf+Plwv6D+F5QCEb3TgXvgGJL7hgXvqyPIG
B+JurUPi6x34V43M1zkgdwSZr3GgdgayfWoH/spGIfFVDth2xiHxFQ7U5G9G
cq/MgRqXjUh8iQO175D9I3DAXeAJUnhwHDBVQOYzHFBG4X/YL3TgMZjPtFpN
9Yy0sQ0DlA8ADNGDpA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 20, 24, 24, 20, 20, 24, 20, 24, 24, 
                    24, 24, 20, 24, 24, 20, 24, 24, 20, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {861., 151.00000000261025`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "crop_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "concat_3"], 
                    NeuralNetworks`NetPath["Nodes", "crop_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "concat_2"], 
                    NeuralNetworks`NetPath["Nodes", "concat_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "crop_1"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_2"], 
                    NeuralNetworks`NetPath["Nodes", "conv_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_3"], 
                    NeuralNetworks`NetPath["Nodes", "conv_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "dropout_4"], 
                    NeuralNetworks`NetPath["Nodes", "conv_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_5"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {168, 168}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]]], 
                    Association["Output" -> NetDecoder["Image", 
                    Association[
                    "ColorSpace" -> "Grayscale", "MeanImage" -> None, 
                    "VarianceImage" -> None, "$Dimensions" -> {160, 160}, 
                    "$Channels" -> 1], 
                    
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "enc_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {168, 168}, 
                    "$OutputSize" -> {166, 166}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 166, 166}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {166, 166}, 
                    "$OutputSize" -> {83, 83}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 166, 166}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 168, 168}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "crop_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 80], 
                    Span[1, 80]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 80, 80}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "enc_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {83, 83}, 
                    "$OutputSize" -> {83, 83}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 83, 83}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {83, 83}, 
                    "$OutputSize" -> {41, 41}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 83, 83}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "crop_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 40], 
                    Span[1, 40]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 40, 40}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "enc_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {41, 41}, 
                    "$OutputSize" -> {41, 41}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 41, 41}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {41, 41}, 
                    "$OutputSize" -> {20, 20}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 41, 41}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "enc_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {10, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "dropout_1" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "enc_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {5, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 5, 5}, NeuralNetworks`RealT]]],
                     "dec_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {5, 5}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 5, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]]], "dec_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {22, 22}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 22, 22}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]]], "crop_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{1, 
                    Span[1, 20], 
                    Span[1, 20]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 20, 20}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "concat_1" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]]], "dropout_2" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]]], "conv_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]]], "dec_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "concat_2" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]]], "dropout_3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]]], "dec_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "concat_3" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]]], "dropout_4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]]], "conv_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 2, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1, 
                    "$Shape" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]]], "dec_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{1}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1, "$Shape" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "map" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1, 160, 160}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7345033195318513`*^9, 3.734503338435007*^9}, {
   3.7345033786575785`*^9, 3.73450341867851*^9}, {3.734504220366514*^9, 
   3.7345042329870358`*^9}, 3.7345044738686523`*^9, 3.7345048102411356`*^9, 
   3.7345050065961137`*^9, 3.734506819301328*^9, 3.7345071301130066`*^9, 
   3.7345074546790156`*^9, 3.734508236013119*^9, 3.7345085314323435`*^9, 
   3.734508624866166*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"17c8158d-6502-449f-8cfa-f280eeda7d68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"img", "=", 
  RowBox[{"hidden", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7345012817651043`*^9, 3.7345013043541775`*^9}, {
  3.7345020120578413`*^9, 3.7345020296756945`*^9}, {3.7345020719932337`*^9, 
  3.7345020722378836`*^9}, {3.7345024989080925`*^9, 3.734502555309085*^9}, {
  3.7345026226331406`*^9, 3.734502622696309*^9}, {3.7345027446658545`*^9, 
  3.734502778160941*^9}, {3.7345054515623093`*^9, 3.7345054855733767`*^9}, {
  3.7345068484969697`*^9, 3.734506855263966*^9}, {3.7345071519288225`*^9, 
  3.73450716358698*^9}, {3.734508248725981*^9, 3.734508252908126*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"0fc56d5a-bbdf-4e7b-85b4-402fcbe3b626"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxkvPdTo+mWJth7K/EeJBBOAuFBgPBe3iHvvfcGSYAA4T1JJi4N6X1mmazM
MjersuytutXXdN+evrdnN6J7ZyZ2ftmdmIn5ZSM2NmL3D9jzvp/IrN39EoQg
QXq+Y57znNc1epPa4G/+7u/+LpULD1pPmjs/71nRlcI3hkQqEkoE/NOJhUAo
MD/qRb/2aeZzYHhkbHR8dGx8cmqKJxTyptgCkUTI53G4PL6Az+NxWFOTE1Ms
+BYuPp8vFApFYrFYMj0NjyL4RiQRCwToN+ESoIvPhwehgPg9Efzi9LQULplC
pZBJZDqL2aDWmqwmtVwmk05L4WWE8EZcNrzP2OjwILOnq6O9raWpiU5vQldz
SytcbW0jY2Ojo2NjE1Nsvkgs4PDEcqmQxwGM6K3ZLNbkJGDkCwV8AcBEby6C
B6FYKBAJMTj0wOVwOFz8weHCBT9Fjxm8IgRXijBNyxVSkVCiMpp0Gr3VqlfK
5ARQEXozLmtyYmxsZLC/l9HZ3tba3NTUSKcjsM0tLS2tTSOj2JZsnkgCCKbl
MjGgFKK/5LDgFtlcHkaE3lQogn9CsBS8Kh8BYiNoLPhj+FU2mz3FQhcb/WNz
sAP4fHTD8BdgVgxIIpXwuWK1Qa9SG20WrVwug59LwC+Ak8uemhwfBaA93V1t
rS1NdDqBE5u0eXQUULK4QvhlkVQBKMF44An4KxZg5GNkGXeLxPg5shaHjfw0
BR+TcE3gJxOTxHeT6CuLlbExNiwfBQG8g4AnEIPTOGK1XqtUm2wmlQyFBRhc
KIBXZU1NjIPr+3oZHa3Y8/RGeASkLa3NYyj4+BKJSCRTKcRcrkAsAXvBy4NV
wQDYyxgkPBXwIG45bGTn8YnxsbHxcfiYgH/oyRgOoHH8Y/gp3MQU2JUFlsW2
5YvQawjAWSIBd4otVmlVMo3VplVii0okGCmE2cTo0EBfd2c7Mmgj4Xnk+6ZJ
FpsHtyqWKZUSsKV4WoycLBQIxNNSCcoUsYjAKMCuQd6dQmAgXkZQzIyihxF8
wU+GR/FXwDw2PgF3AKaFu2KjOODh2OEDFi6fx5rgSLVqmVxvM6khdCHZEFCw
AgtcPzzA7O7CQAFpE5FNdBZPJEa2VMuF4BSpFJCJ4PYgReFPEVCxRIQ9zyMM
iWMI0AwPDw8NDQ3jD3wNDg4RPxgaHh4Zhl8AvKMILQoL+FMwKpfL53M5kJlw
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
UKDApED6zT2j4zze+AgoE6zemUiUIJk3BoJJbVZCn4Y8PzUxMjbU1w0ZVAs+
LynEPkdvQzg9m0h1BJxwfNZFOGZoHv04D+mogkKMsYAQVUixFKJ2JP8iNnMJ
aZKPSR9JaYhSyHtKbVPP8OD41DAw6cgw1E88ftHdNzrcPwX9h8GIhpGESOGN
DEMGNdNqKoHZEcxMRBE2APGbk5vzq4R6Xxiz83IIdZSXhxuO/DzwJijUwuIy
CgVuGUR1WVklhVxSkEc44lJWXi6hE7Dqx3kPnUltY0fvwMhQH3wi4Qx2BbnZ
OzQ2NMiTi6ZNOqlYIBBy2ezRfkZ7E7WmqqKESHOC9HJzMiI9k/UZisx+H5mY
rHIxf+cjFVBURQUp3ArZSKPToCOtrq4sKyosqyRXoPvPy8WphhM043skTcvJ
QKW0lk5CPg0hYQQqqg83d0PDIqVIBZ5Hw2Nc9nh3O0p0lEG4SmYq0Dtiyc7w
J0Ev2ReZRGh33LzlISNWNbXQGls7mMO97V09bY0tbX0CnWKKQakgU0hgWsJX
+UjV4MDKQ14oBKDge0h7kM/dSOUPIk0KVoXnY2ODEzKFWG+SStC4K2cCwSQj
KZxRHASvZPIIAcJRhep49kW+E/kNKOGdisGD5RX1He1N9PbekdEp7tgUf2JU
bIoc3rm2M68aaGxorK0CtU2CXpVUVlxIZBpyFQIKuhSlPfgBZEkfauxwdwdm
HUZUpJbLLHoomDw+b4peV01CMN/neaamZ9jyorK8uzL9BaIXCMDahoZ6Kr13
eKhvcHRCZPImVg+u37n94etv/+mb5y/uX1u0KHijfYwmMFpLM51WU1WaeacL
zi8rJ0PzBL1TF6MXNSNDeEhysH9gdHJ0TKyRgefFIjSIV4/5CNz3Kza6QIX9
TfBlLlYeF3QE5oA8qKhr6RgTs4anpk0Bm1zn9K/eff7dP31+fvf1m5//+Paz
P/3bP3z93Z/f3F31WnVTfUDgjM725vqq0kJUtTBNQZRC2oNFaVDtwfV4MBKP
RQLiianRKYVGqjdK0UDzFLIm3CKRu5milzEa4WhCcmTEEs53ZE2g6io6c5yn
tis1jmhyaWP34Vdv//D973767tOTxYXDp599+Om//PMvX3//129++cPXn9zY
DClGGa0NrYwWal1FPkH7mL3AohVkVJpa2pHroWtC47sgOIdGpqZG+dAKG7TA
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
SNDjvUBosUcNtEfdCCeLKxTw2fl42T3aZ0mrRz1e+/hAbX3FYIhdS6WUlpDI
5WUVFdXNHa2trUwBW3322Q9fPd+4sh7xGOc25j2RWY9erg2mduMzNq5ApPWJ
2RKVRCDV2Ewau99ttdr9Zn3YIlYrvPuRxVVvct25db6zuvX4i6+unb5Yv7rJ
rycVZl1sBMzKysiQXNS/Qxp19vSDCmFz0c4jjDMf8p1cR62sqqmmMLpIddW9
mk4qtQrQQxsKvqfUt/aARulSPf/i+aMXHx0uzMd84a2DhNdpjoUckfiWW6mF
m542m5RoV63SaJBw5WK+SuMxyjW+gMmi1D+4moi45uaDV25eOb379OT+7uqV
q0d2RmVpPrFxICsrgzML0zzgpLd1QRc3Dn5Hm8fxUDJe31aJ9jmXo43BpCpS
dQ0FMUVlWUkJ/KiirqWrq6u3nbd5fvPpF9/dOt1KzoaCMX9kK7y06jG7w0a1
W6022NUymZgnkVus0olhLmdKbNCJ5YFwDGrW/P2l9YVE2BJfWH/57Ref3Lp1
tLV1f5VPLS8kfI2RXrqE7YnGwUhV9fQ2FJ5opQCPy2YXEPsyCtEaktpaci0F
eB1tv68j44JaXFiABntojU3NtKaeDk5878bm9adPznbSofmwPXItMR822/Wo
dZMqVDq0LZynsjrc0xw2j80T67USrSPm1hi8m5vLp9sJ31zM5X309es7d55d
2z89tnVWFeOuCO8AvIQuhBnTUjW1CW2jGp1gcZE5cXzi/aBoyQMF5EhtHY1W
T6PRKouLSqAfQbsNSJTaOiqVUt3R3SacjSfXbz27v+WPrsxEZ8+OQcwZPDat
z2dRyDRSmdKgUdjdMoGKNyqSSJTyaYPc6Vf74+uXV8Ib6+nD1Ez6k+dXNw5f
PPvwupZBwSuVL6IT4wS/5xUUlZGqIY16+kfQihselzXFxmsRCYtCjNbUUnu6
muhNLa2NNWRI9rLS4pLiEko1pbqmjlJZz2Ayp73p49uvfni4Pr+UiM1tnywt
eo0eszK14dAJJXIdyDiFgM/iyoUcMRtUqJotsAS8ltjxWnR2aWHldGHt1Q/P
j1b2bj85NXVTivBWnEx8XvrgNx9kZV10HTW01k7m4Cgxuzk1yc2/uBDQikpy
dU8braG1vamRVleLNr6UFBcVk1AkANL6hs7eAUH4+MPPvv7LV9dPTvYWo9Er
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
yv81cBZt
    "], {{0, 168}, {168, 0}}, {0, 255},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "Grayscale", Interleaving -> None, MetaInformation -> 
    Association[
     "Exif" -> Association[
       "ImageWidth" -> 218, "ImageLength" -> 226, "BitsPerSample" -> 8, 
        "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
        "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
        "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\nloop=false\n\
min=1262.0\nmax=14462.0", 
        "StripOffsets" -> {650, 4138, 7626, 11114, 14602, 18090, 21578, 25066,
          28554, 32042, 35530, 39018, 42506, 45994, 49482}, "SamplesPerPixel" -> 
        1, "RowsPerStrip" -> 16, 
        "StripByteCounts" -> {3488, 3488, 3488, 3488, 3488, 3488, 3488, 3488, 
         3488, 3488, 3488, 3488, 3488, 3488, 436}, "XResolution" -> 72, 
        "YResolution" -> 72, "PlanarConfiguration" -> 2, "ResolutionUnit" -> 
        "inch", "Software" -> 
        "Created with the Wolfram Language for Students - Personal Use Only : \
www.wolfram.com", "DateTime" -> 
        DateObject[{2018, 3, 10, 1, 59, 49.}, "Instant", "Gregorian", 2.], 
        "Artist" -> 
        "Created with the Wolfram Language for Students - Personal Use Only : \
www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{168, 168},
  PlotRange->{{0, 168}, {0, 168}}]], "Output",
 CellChangeTimes->{{3.7345012722017064`*^9, 3.734501304973852*^9}, {
   3.7345020124629197`*^9, 3.734502072476551*^9}, 3.7345022708977504`*^9, {
   3.734502489341663*^9, 3.734502550918409*^9}, 3.7345026230863447`*^9, {
   3.734502749315219*^9, 3.734502792005766*^9}, {3.7345029394685497`*^9, 
   3.734502962448666*^9}, 3.7345032529359417`*^9, 3.7345033042666836`*^9, 
   3.7345034161097937`*^9, {3.7345042175372486`*^9, 3.734504240897419*^9}, {
   3.7345042713728757`*^9, 3.734504275644356*^9}, {3.7345044709165373`*^9, 
   3.7345045058928437`*^9}, {3.7345048072346926`*^9, 
   3.7345048353479767`*^9}, {3.7345050040618877`*^9, 
   3.7345050338394756`*^9}, {3.734505357565895*^9, 3.734505452121926*^9}, {
   3.7345054859295626`*^9, 3.7345055041531773`*^9}, {3.7345068136282406`*^9, 
   3.7345068556059113`*^9}, 3.734507125987837*^9, {3.7345071599279246`*^9, 
   3.734507163902829*^9}, {3.734507437502371*^9, 3.7345074633961973`*^9}, {
   3.73450823238945*^9, 3.7345082535985355`*^9}, 3.7345085332831373`*^9, 
   3.7345086273765063`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"483e62e5-cbd8-483a-a66e-8731a86e20cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"img", ",", "#", ",", 
     RowBox[{"HighlightImage", "[", 
      RowBox[{"img", ",", 
       RowBox[{"MorphologicalPerimeter", "@", 
        RowBox[{"Binarize", "@", "#"}]}]}], "]"}]}], "}"}], "&"}], "[", 
  RowBox[{"ImageResize", "[", 
   RowBox[{
    RowBox[{"nNetTrained", "[", 
     RowBox[{"img", ",", 
      RowBox[{"TargetDevice", "\[Rule]", " ", "\"\<GPU\>\""}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"168", ",", "168"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.734427522949519*^9, 3.734427547454689*^9}, {
  3.734427630603815*^9, 3.734427645892473*^9}, {3.734427689977141*^9, 
  3.734427715931163*^9}, {3.7344284873696413`*^9, 3.7344285079032483`*^9}, {
  3.73450112545341*^9, 3.734501125514572*^9}, {3.734501156352583*^9, 
  3.7345011850659432`*^9}, {3.7345012300044656`*^9, 3.7345012860064173`*^9}, {
  3.7345026444953127`*^9, 3.734502664772205*^9}, {3.734503295865015*^9, 
  3.7345033010217943`*^9}, {3.734506876940613*^9, 3.73450688323435*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"4b0b9e24-9be1-4ed6-baab-90ca007463e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxkvPdTo+mWJth7K/EeJBBOAuFBgPBe3iHvvfcGSYAA4T1JJi4N6X1mmazM
MjersuytutXXdN+evrdnN6J7ZyZ2ftmdmIn5ZSM2NmL3D9jzvp/IrN39EoQg
QXq+Y57znNc1epPa4G/+7u/+LpULD1pPmjs/71nRlcI3hkQqEkoE/NOJhUAo
MD/qRb/2aeZzYHhkbHR8dGx8cmqKJxTyptgCkUTI53G4PL6Az+NxWFOTE1Ms
+BYuPp8vFApFYrFYMj0NjyL4RiQRCwToN+ESoIvPhwehgPg9Efzi9LQULplC
pZBJZDqL2aDWmqwmtVwmk05L4WWE8EZcNrzP2OjwILOnq6O9raWpiU5vQldz
SytcbW0jY2Ojo2NjE1Nsvkgs4PDEcqmQxwGM6K3ZLNbkJGDkCwV8AcBEby6C
B6FYKBAJMTj0wOVwOFz8weHCBT9Fjxm8IgRXijBNyxVSkVCiMpp0Gr3VqlfK
5ARQEXozLmtyYmxsZLC/l9HZ3tba3NTUSKcjsM0tLS2tTSOj2JZsnkgCCKbl
MjGgFKK/5LDgFtlcHkaE3lQogn9CsBS8Kh8BYiNoLPhj+FU2mz3FQhcb/WNz
sAP4fHTD8BdgVgxIIpXwuWK1Qa9SG20WrVwug59LwC+Ak8uemhwfBaA93V1t
rS1NdDqBE5u0eXQUULK4QvhlkVQBKMF44An4KxZg5GNkGXeLxPg5shaHjfw0
BR+TcE3gJxOTxHeT6CuLlbExNiwfBQG8g4AnEIPTOGK1XqtUm2wmlQyFBRhc
KIBXZU1NjIPr+3oZHa3Y8/RGeASkLa3NYyj4+BKJSCRTKcRcrkAsAXvBy4NV
wQDYyxgkPBXwIG45bGTn8YnxsbHxcfiYgH/oyRgOoHH8Y/gp3MQU2JUFlsW2
5YvQawjAWSIBd4otVmlVMo3VplVii0okGCmE2cTo0EBfd2c7Mmgj4Xnk+6ZJ
FpsHtyqWKZUSsKV4WoycLBQIxNNSCcoUsYjAKMCuQd6dQmAgXkZQzIyihxF8
wU+GR/FXwDw2PgF3AKaFu2KjOODh2OEDFi6fx5rgSLVqmVxvM6khdCHZEFCw
AgtcPzzA7O7CQAFpE5FNdBZPJEa2VMuF4BSpFJCJ4PYgReFPEVCxRIQ9zyMM
iWMI0AwPDw8NDQ3jD3wNDg4RPxgaHh4Zhl8AvKMILQoL+FMwKpfL53M5kJlw
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
UKDApED6zT2j4zze+AgoE6zemUiUIJk3BoJJbVZCn4Y8PzUxMjbU1w0ZVAs+
LynEPkdvQzg9m0h1BJxwfNZFOGZoHv04D+mogkKMsYAQVUixFKJ2JP8iNnMJ
aZKPSR9JaYhSyHtKbVPP8OD41DAw6cgw1E88ftHdNzrcPwX9h8GIhpGESOGN
DEMGNdNqKoHZEcxMRBE2APGbk5vzq4R6Xxiz83IIdZSXhxuO/DzwJijUwuIy
CgVuGUR1WVklhVxSkEc44lJWXi6hE7Dqx3kPnUltY0fvwMhQH3wi4Qx2BbnZ
OzQ2NMiTi6ZNOqlYIBBy2ezRfkZ7E7WmqqKESHOC9HJzMiI9k/UZisx+H5mY
rHIxf+cjFVBURQUp3ArZSKPToCOtrq4sKyosqyRXoPvPy8WphhM043skTcvJ
QKW0lk5CPg0hYQQqqg83d0PDIqVIBZ5Hw2Nc9nh3O0p0lEG4SmYq0Dtiyc7w
J0Ev2ReZRGh33LzlISNWNbXQGls7mMO97V09bY0tbX0CnWKKQakgU0hgWsJX
+UjV4MDKQ14oBKDge0h7kM/dSOUPIk0KVoXnY2ODEzKFWG+SStC4K2cCwSQj
KZxRHASvZPIIAcJRhep49kW+E/kNKOGdisGD5RX1He1N9PbekdEp7tgUf2JU
bIoc3rm2M68aaGxorK0CtU2CXpVUVlxIZBpyFQIKuhSlPfgBZEkfauxwdwdm
HUZUpJbLLHoomDw+b4peV01CMN/neaamZ9jyorK8uzL9BaIXCMDahoZ6Kr13
eKhvcHRCZPImVg+u37n94etv/+mb5y/uX1u0KHijfYwmMFpLM51WU1WaeacL
zi8rJ0PzBL1TF6MXNSNDeEhysH9gdHJ0TKyRgefFIjSIV4/5CNz3Kza6QIX9
TfBlLlYeF3QE5oA8qKhr6RgTs4anpk0Bm1zn9K/eff7dP31+fvf1m5//+Paz
P/3bP3z93Z/f3F31WnVTfUDgjM725vqq0kJUtTBNQZRC2oNFaVDtwfV4MBKP
RQLiianRKYVGqjdK0UDzFLIm3CKRu5milzEa4WhCcmTEEs53ZE2g6io6c5yn
tis1jmhyaWP34Vdv//D973767tOTxYXDp599+Om//PMvX3//129++cPXn9zY
DClGGa0NrYwWal1FPkH7mL3AohVkVJpa2pHroWtC47sgOIdGpqZG+dAKG7TA
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
SNDjvUBosUcNtEfdCCeLKxTw2fl42T3aZ0mrRz1e+/hAbX3FYIhdS6WUlpDI
5WUVFdXNHa2trUwBW3322Q9fPd+4sh7xGOc25j2RWY9erg2mduMzNq5ApPWJ
2RKVRCDV2Ewau99ttdr9Zn3YIlYrvPuRxVVvct25db6zuvX4i6+unb5Yv7rJ
rycVZl1sBMzKysiQXNS/Qxp19vSDCmFz0c4jjDMf8p1cR62sqqmmMLpIddW9
mk4qtQrQQxsKvqfUt/aARulSPf/i+aMXHx0uzMd84a2DhNdpjoUckfiWW6mF
m542m5RoV63SaJBw5WK+SuMxyjW+gMmi1D+4moi45uaDV25eOb379OT+7uqV
q0d2RmVpPrFxICsrgzML0zzgpLd1QRc3Dn5Hm8fxUDJe31aJ9jmXo43BpCpS
dQ0FMUVlWUkJ/KiirqWrq6u3nbd5fvPpF9/dOt1KzoaCMX9kK7y06jG7w0a1
W6022NUymZgnkVus0olhLmdKbNCJ5YFwDGrW/P2l9YVE2BJfWH/57Ref3Lp1
tLV1f5VPLS8kfI2RXrqE7YnGwUhV9fQ2FJ5opQCPy2YXEPsyCtEaktpaci0F
eB1tv68j44JaXFiABntojU3NtKaeDk5878bm9adPznbSofmwPXItMR822/Wo
dZMqVDq0LZynsjrc0xw2j80T67USrSPm1hi8m5vLp9sJ31zM5X309es7d55d
2z89tnVWFeOuCO8AvIQuhBnTUjW1CW2jGp1gcZE5cXzi/aBoyQMF5EhtHY1W
T6PRKouLSqAfQbsNSJTaOiqVUt3R3SacjSfXbz27v+WPrsxEZ8+OQcwZPDat
z2dRyDRSmdKgUdjdMoGKNyqSSJTyaYPc6Vf74+uXV8Ib6+nD1Ez6k+dXNw5f
PPvwupZBwSuVL6IT4wS/5xUUlZGqIY16+kfQihselzXFxmsRCYtCjNbUUnu6
muhNLa2NNWRI9rLS4pLiEko1pbqmjlJZz2Ayp73p49uvfni4Pr+UiM1tnywt
eo0eszK14dAJJXIdyDiFgM/iyoUcMRtUqJotsAS8ltjxWnR2aWHldGHt1Q/P
j1b2bj85NXVTivBWnEx8XvrgNx9kZV10HTW01k7m4Cgxuzk1yc2/uBDQikpy
dU8braG1vamRVleLNr6UFBcVk1AkANL6hs7eAUH4+MPPvv7LV9dPTvYWo9Er
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
yv81cBZt
      "], {{0, 168}, {168, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "Grayscale", Interleaving -> None, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "ImageWidth" -> 218, "ImageLength" -> 226, "BitsPerSample" -> 8, 
          "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
          "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
          "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\nloop=false\n\
min=1262.0\nmax=14462.0", 
          "StripOffsets" -> {650, 4138, 7626, 11114, 14602, 18090, 21578, 
           25066, 28554, 32042, 35530, 39018, 42506, 45994, 49482}, 
          "SamplesPerPixel" -> 1, "RowsPerStrip" -> 16, 
          "StripByteCounts" -> {3488, 3488, 3488, 3488, 3488, 3488, 3488, 
           3488, 3488, 3488, 3488, 3488, 3488, 3488, 436}, "XResolution" -> 
          72, "YResolution" -> 72, "PlanarConfiguration" -> 2, 
          "ResolutionUnit" -> "inch", "Software" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "DateTime" -> 
          DateObject[{2018, 3, 10, 1, 59, 49.}, "Instant", "Gregorian", 2.], 
          "Artist" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{168, 168},
    PlotRange->{{0, 168}, {0, 168}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzsvXlYTt3bPp4yV0SmVDJPESVJytk8qO6977t5nufSrFIoERkbVKJo0kCG
QigkUiGhAUmRyByRUMl3OY7nOT7f437f+3fH43k+n/f3ff/gOvbea691rnNd
+1zXtfba3dPsvVnOvDw8PP7DyX8suyAVPz+7EIOhPw6c7DzlZJ1+XMz945+Y
7qVHq+IvYrLc5uO+E/ahb4/ihgmOG9A1zjawKjEJhS9SNJxtk2D+Ld1YrKIQ
R+3a31da50Nr0BjDsoAT2Nj4NVxlUBa8bU4+mRRUiJE77wZO+3wSuknCd5am
HsGONTv7J9odRpDoFbWooUcgoEJlDdc9A48elwfiQ7LxUELLWDUxH6rVnrpt
k9Oh8nz0vBevirDhkLzy1y1ZSDDbuSxn12GsUC3/Qj9IAPXNcrDQ8pPAKa3C
GybZeNczZoaVcw5cl4do7lsfB5ZN/xlTiWMYMvn5rk9X8yCZWiQ7y/EQrkdl
n4kMSEBLVvAkq95sTJb3muiYdxTrdCO9yodkId/25TjvD/shPY2pZxKfhnCX
Ftks1xOo3aN8pf5aBua76d71P5YGvWW8x641JGCWtbrvjjUnUHo+Vz5POhMi
ThVpccMz4Cv4Ge+8dqI3Mcrw5NajcEhf23qrPgvOfhdNgkXSUfzA8T5r3hbw
1kQFbYnPBl+l+d1jsdmIT7G5WNx8ACp6p9pjlbegMfDocnfhA5iwNmuJyJNs
GAvoOOpuT4HiYIX7AZHR6C9o31wrH4vXzzuOR6lkYR6Pb/rrpv24PKLcMWXE
DhTrDymN49mEno7B2kvepOGQjxHfy6QU+OsLrw2Wi8FBsTXdW/hCcdpWPOjI
iFTo3DR7vYx1APZZuQukX8XBf8rtLYxNazB+8hv3BWVJwLTjAvcKDmKY16TE
KZMSMPKL+sIY6RC0O/gxDgnFYZ5n7bHeaWnYPE1ka6V+EpbYbztYoxABdVvd
hh0521CUe/t7rVwaxM7dZfjlJSNxhMrd9yFbgcD8ORvmRaIqyyXy5seDGNNz
+GbUmhS8sZHzEB8Ui1vDml4Zaq6DjIyqwuCggwgvCpu7UjsNfpWLV76ckITh
D7xu1nuGQfbVuW4FvjSoKVjeWjsiC0q2JaEBIQfxPcZ/tNX2KHSOkBJLup4K
2TM5Qx5p5KD66tpA0UPpqKaHjl/XEwepURe/Jg1Jxu2UuSJ2xE9X7zZtkrib
gaqCxWO176VifnXJOx3pPdi0v27B5zfHoC2zu322axYK3dIuHHI6hDeTivwW
eMThBf+2pTGWBRhaH/BtvE8Oml6cPl1Sdhjv81LXhFckQDov4u60wwU41Csz
Kjs6H4U6O+ZF9eVCd6Kcfvudfbi694V4/dojuPr2iltj+gmcZyzb8WwmeU5a
nWcf90rHerO5SycuycKwHaVdJUNPIsBWd2d5UQ6qXPavevvlCHa/XnMvZGkm
7shtvJK9+RyCTd9r3/lwGPeNtWU3upyB7QacyqjORu14pVef9cpQnTi1MCH4
GC43BllsHHcGxj1BobuuHcK+cRZ2jKkXgNI57dusCzFlvI3bVtUTiF2t2Due
OoQZEdrNoyVPwrDdLI0v4xQWZ8v2r43LhWaA+ZSIx9nIHqW6fWRoDr6YV361
EDiNQ2lbNCr3ZkCvpd8dc7Jg7s/vcs8rCUP3DtrCHFsAr5JNLo8y09BeMrM1
Z3IKzs69ZmlstglWjzdW1jWlg9Fo9L1VYD9aDVLHRejHYPlG1nyjiCDE7Zk8
pWThVpQEec1ITtoNZ1mx29mztkJ8ZPjWWusQuEw9G5EwKwx8x7Os4RmJBTc2
dXf1hEP+ZXL0S3K9dJcwU/xUEDZVNzmK166H5wz7QeL1YdD3P/OwlTcEC6is
pZ9WB0HzXP2GyxZByO+z7HqzYyOOLuE3T9hzBJ8yfEW0tyfD6YONYjfDB22R
u8M/t7Eg+MZzkNJVN7xeLlKrY+gIz/MH3Wb7hWF574c6/eIABIVM15D3CIV6
6S7Bi+V+yNGIkbZzDcWQ8cV+VowwfNI7l6+xPAiXvoWEdtkGw3DH3E6JzwHQ
Wx4s2XI4HGUS49L4LfxwQjdaUtZ4Le4HULuby73gbefaOORBOI56Ng2eGe4D
ltHc0MRrwQhqmz3Gu9IZSt3zhYKT10HR4fR0H2dfhOq8n3bsUSCGbK3e1R3m
BKmn483ydIPh/GHr9yHl/nCaojEhNdUfGzouFZw56wpbZdfWGnN/9KyybNEs
XoPwl9a2Vwt9yfhMrNSOWY3LM6z6VE94YVDOHkd/pxBMY3hEFLd64/3YtXMG
xfniVIHgHYHxzjiSobY6/HsI9HqpQZ9He+NJYSpPW7AfVhbd3HGp1g6tCe92
CYgEY4jztLgRG3wwRHNX6AZ1X5SvXP1BLtoWtoazBKYm+YPVXLY/W8gPhyMT
hzvarIb7YwNBj0V2iLik9HhmhScUb64xSh7kj3WRa1LaPrjjcOUe56CZ9jiW
cU3VwdMBewPHnnF/Sni4cuVgsJ4bbD3yHjY+tceXLU4ms/MsUHPplZLSc2+8
2Bv9METRDS++jzZV1nTEIGrbwbNlxuiXdshYfMcTO5rmeRf4u2NkzNLHG486
YdWyYr7e80a4uahnkd1bVwgt/yK+pscDKp+PBZlaOENNyqc0+4YJxkT0lCW7
OULPLKPfVNYLt756Cl975YwR63tkVdwsMXfrHP/Za21xg+m8PHzJatRFJY3i
OeoCr8/fMzcw7XBw6owZPQ3mWN8YUpi0azXayi9dYPC6QVKOanz83BFz7R1Y
DUkmyBa4WjKGXO8uPHbnUKwHvp69XxDS4YqN/Y/8RjJMEfxU0Z+vdjW0PspN
eGvog9vyHcUFdV6Y+kq11WOVLdRPj34rk+iJphvaSXHP/TDjXKV2jaI3+HIL
59XOd8GteF0JjXjSz3EZJ6Y9DETeEFntT+beSN15YtSld96YNuOzgfwzR6Qp
X5bTLwnG4VzWelFeH7jm3RnucSkAfB7rxwwb5QjxkAObG+aEwjr12dMT4b5o
L1PZ28kKxhyxR8+bG13Ap/X+KlMuFKwx18Zm8gTins25wY9C1qDv0qIdr1he
CFWYNXYKH5m3nn9z6D0RjFjveP4eI3/Y7urLvP7ZF52HDyS39/nAbN+z4rlT
wuB19YCn2js/jOqpPfeyPAQP1phvrwj1hpVHyTWxLxEY62w0eKWvPzRjrCw8
T0Zi1qsNSamL/DDh2+GKwrlbEO6hm732QwAem018mHMmEvLpR5Rrr/ijz6b+
fdG4Tdjjevbd7cgQpNvW7zXYGgaW3PmbG9cEoM1IMK9XMQyLzusnUSrrsNd2
9PeAgEAsiO0SVhdfg+OavSui+fxhv8ev4dqgDQhNLtNvWemD7Dz+vcZqATDQ
GxkoEOoCi6fbZL9MDMW1Hil7uU+eWLB9pHqv5WrE6XopfY62wo4V68IZd33w
oPF+FTa5wb87r6uu2gEa4vShZtoYVtIJVvdG2eKqSLjHwwI7uPfLxAQMt4HU
Lh7XVfuM4XFjcGnnIBOYrok6dPuIOR480aiYsNcUepkSX/YeNYKKXJSv6BZD
NKlP8B7hZ4I1QUXJbsuNgWV1vtcnG+HY7Ae1Z18YIoJXa6vYFF0sLNNwvd1o
j5GMbZXtxom4l1EtYG+5CVGDPuRfd2Eh4dDRmtEGitAJ/hgcskIVEyZnWIYO
no9y+/SeHdb6pQpfxGNiB8uW2tz7qujjKotMxRMNdiIqUG+9ed+0RK+0YwXD
XsFYr9TkjqbNw2srcMX5xdTjBcrYtdZgh6LU8lLlr0IrB59klY5QnlO0IHoF
RDRPh5yboYTSqPmd2ckSqDlTc9byNbM0de3jortOsvBe+f125TZlPEgRjk7x
U4b40XsvNA5rl7odDdINkhdDePrGt3c+AFljb0x3PKKOqd/EosfaKZSax270
zFooUhpUkrByopIi1B2crvTrqONzr0Wf2YoppQh+Ijk0Ubo0cE/IroYYOXyX
7ha3OqAMxQhXe8asyRj9ZFLYVCmFUpl+eV4YymHB81kLrg9WhuRc/9IbO5ZC
NsNucsH+FaW2ma+8/Oul0TNGWWy5ijKmiInwWrYqYzo1e1JXgmypwAix4LyF
c1DTvro/UlsVMZqXnisFaCAl6mhTesTY0vqLh5JdeSfhRkWDYOhHNXTad6UI
QxvTB0/zdTs2D0VLurTU143F3DU5/t026vg6KqdDdMIqdPdW695RV4TYo85E
2MxErWA8K9ZVDfn2N5TrDXQhxRv+OPEsaW/rlG55r8UIOVAtWEar4PGRpecv
ZOhie32yYEOZBrJGe/sHnVqCxaozl47PVMKKWvXkxx2rwLP10hI9N224ermJ
6Qcsg3nxhMrDhcvRJ7hlcFiODoxzPDobN62CmvWXfrn5ihi/ZN7BE5flIBDo
J6PqqIVpxvYmL27oQnHJlNUCjso4eUDVUchbFm/tDAULPNRRaNFyX2GkHpxy
zep1nqri8nqllyLnZTBVqyow8qoyAgUU+rc/W4XbMzv1n5ppwFEGXfyXFpPn
6fk1poE8JIaWqbo/1YKY6wzJcfpaeMbXrbvu6zz0pacYfTCZBer4FYMbHSpE
B0LzrgZqQXrftMiZDvOxLl/kUXF228q3fCVGZsQvVJvMusKvaKCydeX5rhBp
UC6vR50dNat0bEPK7tNpsoi8dcXBIUkFqWq5HdUOy/A9597Ewo1ypfZGjDjh
+Nmg04UaDMbLwfjhPLk9kSsQkHJmilChSqlNnuMCx7NvLr6+7HN9d850GGwR
v7rcWRENl0MT7suol+qLGnlPd5QqneL0cZ/aKEloW1AC7/WVwOyenZYkv7S0
87n142RjxdLpX4+4elxZDLsFZQESavK48zVI4ukRodKxSa5LzyVolMacjRo9
v2wshhUkDD6i/nrlSn2RgKbScaU7nWYMs0kxLL1xWMbnDN/c0u1nfA+NTNIs
Xb1r8mLBQdKleSJfGAVy9qWvi+qqV06QLd0vKO7JG7a4NKLC9kFd+lR8GJ3U
cXiBdWnUZ+ncAgeN0jqBrUfaqpRxhi4v8LyrCtGg4mu7k6jS4/Em7xVUGaXN
bR/zS/I18KKuM3N2sA42i9zZbx48t/TA3bspYw7qlx5XS+gZP0INyd/yHU4H
aMO48OOp552KWBHi3zvr6srSlmfT98wesRJ2bd0+90doYZzRo5OiVzRxc/Hy
pWV1klhWKj80IUgVZTqS8cOV9HBJK3epf8gqRCmNqBsmrwG+8jtRbS81kTxf
/oIA8as5Tz1jZL7qInTnNTMBSR00b+yayMzUgVpa7dGjPHqoEHx7ZdsHXYTx
e/TX66xCRFXYxFS3VcipDNHuK9NFR6HqvbInuqi5tmT0AxM9WJt7zfu+UQ5z
jo1KDWdYYMmlmRVKJ+Mwk4+18WLsZihHH3u5qN4Ei8aKeTepaMH1omPjjps0
Zru/bYiMoVFzry5sbKkZFtebdF6IdcDzve/nn+a3R/HrK37LHphgZ8ezTPer
pvi6M7bF75w9Vp2Kjuef7oCnuq1uQ4+YobXmZu44A2NMqRdU3HfcGpMs7Tum
3bBFbeLRUmOmGS59HGqqE2mIFaLXpW8vMUes8eVBTu+s0LD39Gvpl6ZAjss1
fj0DSFXGTReNNcKBkbx8NRamaO8TWxUfaQwnp7bl5pIs7HXxHUuVsTCj4Nna
EUmG6EsbfenkdEMwl849+d6IicDn6bFZtTSsq3xOPYpnQtzW8+qFVUxkptQv
tFem8dxhe9QDCRpPXjr58B9nwt4WZhmaTIR53QjFbhq+ndJn27ZQOFh+/fKT
jUzM7bh0KN2Aidkhz0I33CH1LshPdJWiIKG5qFNlChNDa9P4rOyZaL+/JUbg
Cw03d//Ri5dQGLtkxT6fLTRuCx6R2GPOxLeXGizzUUzcc312LCqKgrj/ucZN
XRRMVsPQSpKJCcJzQ/eS+qS6w2n0URgjKz2uciGFo17TGoZX0ajnsU6eM5WJ
tW8niJvK07ihX6VQ2MJAZIRi/Ql7GtF7PA1FxzOx4cExPVV/GpvMJ7CmtzJw
8Zi3xLbxNFbdThisOJgJXnqu+qOjNEyWxmVkj6Gg1zryq1UWhQ45SQ/zZzRi
bfX45z2koTNqlnWXE4UhvY7OW+UolH4//zjvDI2GarVO3R4aKaz75t4NFMTM
RongEwO5z0Ld+zbTUI2KFTQawcQh4Re3b0jSkDRV27C2iYHEk5a3ggxo8Mq1
32geyYQeTzTjpS8NjdGLa7e1MzBniO6CC3NpHC95uyWH3F+qeVD1eAmNuc46
MdsJzlWLqo/KCdG4eSRgGkOcjMfcK7llhM8VllcYruspLAvsqp/yjoJbvLta
wVwmsgpeF12QY6LtbnPjoTE0wvLFXuTnUog4E+CuocRETLp/yRIdJjwalbwv
htEYJFBVPt2DwjAxgebpFsQfEhcJdpgyUe6dRpd205Ap3W4ha03Bv6Z+8xni
F0G7Lid0biDjcWXWg1gbJm7MU/8yJ5tCZQ+rdu56JuS/fL7x8SoT89ZZy2i6
MCGYl7PlLT8N8bWT/L88p5Eq9Lb37GsmNpZKTrpK2uktjlAKdKChvkX0+i47
GiJyMo/o8SyUTeJf7BPChF1AevLxscQuzmZ9ZNDoGXfj6/MOFjbMbTOceoGJ
jknxYYFSLAyKm7U0wIwJg9FTh+9qNkPsrPUK9sutUDZ60ax728zR/DXjgy55
DheZKr7LLLHEwyUTxm9JJHnd0g/T6rwcUNyo9nl0lSnWMj4x8qeYo//+ovPv
JzpBxc9OdUi0E+a2zwgLn2GBzvaZHoqDjJH/QWPpR09LVJe/pMVfW2NJ8uOY
vXdN0D7H9m16IAvvG07mHC5nQSGvb1SQsAEezVpZlNLFhNLWreHVU2lYNM5Z
/pj0+46ybGZVC427wYVSufE0tE1zSsauprDeZcHWb/4UtmpZd3zXo+H4RWD8
fSsaxb1PeRNqKFSonc833UzB3OJs4Y1hNKoddC7azCbPQ3afX9MrCsbrvpot
zyT+gfgXV59TSL1SW7JlFI3hXSceb/9AnuPbF+81VxA/nKWvHmymDFre5oVp
pRVqdMZHHZ0Qj6Ki7dOuim7GEL1lyhc+GGNPygEe2bVaOJExa9J78nxvNh6j
OXQ1jdCLWW8YnVaoijBSsg9xwVhLW805Jx3hOtuGOihvBNcrIa75n0xh1W4Y
uS/OmeQ9fYk+i5wx9pvmZYEIUxieuKm4hccQty15tp3aZYeVd96cVn9uj8H7
49c9MTKDa9TdPKXhLLTc0/mUGWmJpBmq99XcbCGl6yIVutEML577KuROY8Jr
J7+Y+3UjjLl+cXCTphnent95+dtWY/g+WdL14hMNrwXFc62+MXEcKi+/zDNE
h2a+l4GFAeZ2FUSNvUCjO1c1ld+PwsyCe3lbTlG4f6yhuk6Fwrmj29WfEl1M
NhcW+ER4tHr1dsurwxRu8cgVp5LrZvFWy+zJ81M9ZrGGxSMKy7Ovr0y8RHT0
xkb+9FUUQpeedtaiKOxa4/VUsJo8h09Gu/vXURBSNpS5akJBY1d67muim0m2
n850HaPQeWzMq52knlHGMmHRpF5Rh80TD06jIGfoOu3jDqKf21aFBbSR+xc0
TpHYSEH6ZW2LrggFmYhvPn1uFHi1vWPaH1J4UXP9ft5eCpMz39nwS1A4Vj52
Kr8uBVVjz3L1OwRHAqarkvbuGOkP8ltMgRox71mYNIWqR5bD/C5SeLn9QJH+
FVK/zpBv9poER9CpPYZTKJw0iA3yI7q5IKLl+kLSjw1W4nJbiT7wbYmJvSFM
4b3WEDdPovMN82ZqazYRP/1w9uX6EArbeF/lVY8n7W6xF2x3oXDd21S36AG5
zp/cvHgPhXWTc3xmTaeQn2S+7i3B+e2khsK72xT4++KNXI9SuNG4rLhjGYUH
OwI3ryW6fNbuXVZNKeGNYd4VXk7GY7TKmghDCsXbdFoFJQmPUYbLJh6h0C97
a0NTI4XBE5LHCa6hMJ/hw5xK5jEd9fPPM+NJf/3krwURPnWrNuce200hZdfD
yGNLSfvCi6uGhVHIKZxo3vuUgpTf+J7HREeDkt6p8RA+clmPnTMI3y6tzU5J
ZLwKhW2YI8soXHbXc8+1pBC5avzI9zakvks1bpvIfKE7b+sqk/vET773HPAk
fsbskNgXQcqpHxjNPEF4tvZw8Dj2kvDGjGrbH0H4iR26fok+qcctSGN+HoXa
OULr774m88E2LdOnyaS/nuPMVIh/HYwojT5H+LOLXaik3kHau/zg7ZAiCt9X
X7Md7ECO1zvuPkquV296L2b2lZz//lTj4j3S7qc6n9cEx56EaQvHpJHx/CAz
ZcJiJgIe8ckVrTLDqYfDVknw2GD6a2U1oXRzpDvWnmI8YaLk1oShV9NtYKfe
fy5qjDvWXs7O0fRwhkOJ9fRsIyOsbFo5LPWVOVIqtCTEVdwxXHyDgPM+Nzx+
HtUuNtgc75mVkYFEv98prhzHELGFxnXd5meCdtizvaoph98UotMyn4g3k/l/
ut7r6++YcKrq1nZYyMKkYua1Aismzunn7fjST/xtzVuGKJl3FsZnPH6tRsbr
4GA7MeIXQ0UvTOZNJP6uLCE4i1wPyVq8IdWKwtWnwWYF8hQan+3Yes2VAkbo
jD2xldzn3b36x3Mzw8yT15k8p2+3izb4Ed5OXBPQESbjf6to+V5XLwotX06V
HzSnMNWws9/anuiBQgVdmUfiC5F5SnGjlWEvPGJzlrEVFnXV9LV1xOHzfp0J
OTKbcWXC3tMdw02g432+94CMFq45uLaKu9Ng3V+WofaMAXmnXZdbRMyhXXNJ
BlOsUaF39Ppn2gxi+qWFFmdp2DzqGb8q1xgGHh9CPIytcURa48ENBXMYZT07
FXKehVeOoZ2jr7Jwerf5tzknzfFEPvNk7BcTnKC2j9oba4DBFnYTY67TuF6+
rKHwuAm0TNQGPTAyhgfz4UT30Yawj7r48dFHCitOKWUbFRjgYYrVoLslBnD0
TH239Cupl3ng+VhZGt/D+zTvLmDCd562v0ElE89zH5oKrmVicerYKEkTGi3H
z2sXkufTJEvAdUMwGb+HuZad5Lkfu7at/RXhb16B1McOMg4VCUnu2eT43jbZ
XaPJ85iYMuvddzLPJVjFaUeS5yHVp0wjkOjezc9PVj4i5wUeK75OI/U9NP2+
fwjRmfbDpzSvE/1onWIptIP47/dnFyZJhpI47fb6OZPIuAhMundwHBm/oeJl
gxf5Et15NGRFILkuePn8BH9y34o3BtGVpJ5869giLW8Kn3Kru/evJTq/Sjyy
yZPoZ5yPyQyC40B1b14rweFcxDvjKGm/OWvD2TBSXx0j5nmkBYXAYpfl50h9
U65UPn4dSOGVUWBKLLFr81TNl5N+nj2t+LGI4LjJfyhGifQj8kvnsH2kHrok
d0+zLYUr25QzOok+zJgwbO4+H9K+Wf7LXsLXpj5RZjmJP29kJ9c+Jzi+v7/2
KIbwlSTYYxkS8iPuTIAawdU86voRTYLj2NUDcza6E33pemK/L4jEDa8Oz8wi
9Z32kVe3JNeDjytVmBCc4lMVZxYFEJ1SfiIjQXDGp84wliY4zzU66Mo4UiiK
bjTzIf0zc95hK0Fwrt83UWQDwTn14opYaTsKUTXd0/xJXNL2QtddkOCwPTKM
p43gPH5f424R4dOP32T5B8KfnE6nUyfBkfzdR9WdHCeLfb18nvQjYpPznpsE
d3ZP67A+guOMsZV6GRm/lnu6dsPI9bY8CySQfgzOWJRvQHAUFUerNJF6coqP
jTAiONum2ZfWk+e22Lne7yrBsUZZqPcmGTc9Id78pwTfxYqokHHOxC9ShJ1E
ybg2Jw67OJmM+7U7wz5tJvctFbB8LU/8Y5+Q2ed8cr/k3rP+y0k/w+p3BumQ
4yr5taWqpB8WX+82KxK+i9tt5k8i4/Y14fR1a4J3SZNxgg7h03eWXNIOcv2h
8OL1Q4jN8P5mG0PaC2GF2TiR/OVQ2uXCFxlG0Pae66FXZwQ9+bXpg0Yawfm4
pkv8HBq7nS1GhdaZwXtB38IPQ6zhuOXFmMKDFlh4dbT7Mg8WWG+bD7fuMCF5
ihjqvtng3PaCp29jLFG/8YrZyUpDXBGL2L/QnoVdGVcn2C00AyUU7TWkyBiD
L207tFmS5JGzZpS92kbhy1j+Ow15TIwJ2aex6iONg4PWTU8h81yOr7vy9WMk
P+JbsLc0hYJ+ZJfjnBgy//cudzFfQcHy3tCl0jNJv0onim0zJeVHOTyaScZD
vLnjuyKxQY1eZuFEL78oj1z1nPgNrbt78jty7BFPNakRPrYnjnN5So4rjq3o
5yfjUZ+ZVneF8D/Kr0RclIz/tfL+jnvkeudpi7Kh6TQKvnS0rudVRkfLiKN5
tlboarHf5/opDmFCtyXcF2yGuZtZBz+vCQK+f1q6lU8LOe0VfhsiaGQJDxmb
9FobqikCrQlm6pC8G/ayrkgDumXJ8vLuFuC1tumWDzZD/Zj8XT7h2nCzcf/0
LUoTzY/1vW9KmODyEbe92efNkbjz8OThlXoIPr209+kHbVTu/7jx1XoDmAco
JKo0muLQRZ1mvjU02vdu9K08oYtdyedzeWyZuNC60MIkzQh1ba1Zom+YSLNw
VFX6wkBMiBDvZk0abWcHC47KYEKg+OIjiyM0SnrjbJbVE/7mHBnj0U30YFPk
x1TiD/cc9D8/4qWxa8MF/UISz118ey9cn/hzwsfKAx/df8zX3+FJ+BvMw6P8
ww76w/55nptlL8/p/sFs59mPudX7u3Fystxwcbv+q+2yl+d2H7fr/1Nw/qzl
Vp93WPWZMDIfhdG9EXeInpjzHF3iRnRV4taT/SJL9KEU/LTjtByN2ZH7mUs3
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
P7nh/NPOKvn67rophckmVT6uJRScb2k8mZymh3L3kW9LNRiY7b+EpymQRt+1
sd8DQpgQipI8rBmnj03VGdp+ZtoIOLhSwm0NA3YxES+30MZY2uhcsFnHBGNk
LjmzZGhk0I75L0T04HCDprzNWTi7SEjis7Uh7jycsS3nIwvN79yTnH0AH1ee
6EOunOPPlL+on9/+h+gn+7o3Nz/jtE7+T+snO79/Fefveo448fmfpp8/y89A
+/W79fM/FSc3f/xVf+OmnzJFl7UfOFEo0jGdu9ePgnbZpu6PvMQ+UPAyvMxA
Z3R6VqIHiWP3LDnwpJOC+IaAhR6SFMpjvmV37DKEc2rxoxwDW+ieLjF90G4L
Ey3XcZv3mGCZaeyGTsoQFtXqnaLnTbFJ6P1Q+zYLVE+7vD/8uxE+m+ZVplez
oN/rc3fYGWDkJL2zKq6c/37yfjb9HKgOsM9H7Pt1Oe1v57bvnROf7PZn989z
mq851TPQefZncXLbr8wJxz+FkxN/7O3/bPzJ7XkeKE5u480N50Djur8bJ3u5
fxfOn90//7Px56/i++z7MYdyo9CiO3mUrSMFNdmi/tadFEJqVNeV7qZQdyVv
3ocIChOP63XNvUBh97EAXSGir7svj+J/xWsG/4J196WiHTFDTdTOWs0RbkFX
BJ1hgkldOePHpbAwbHTSYUMta6wxcZe1k7BFTOMYWxZtgu3H9hxIUaXxVcxu
naa1Mix3bI9/YsN5/yen+JPbfhRO+0Y4WW77hThd52S51TNQywknt34P9P0R
p3Kc6ueE43fh5MYnN54GyjenfnLDOdD3Mn8XzoHy+VdxcuPj34WTkz/+rJ9y
w8fePrsVzlb7pkvs9L7kA6OIjqrp2js/tKfQvDDz2DWipydSviRvXUN0duSs
1pVPKNh+XqCg1K6PjR3DvDLfGGFVf0K+pIUFlG9UN5+Zbga/mIqa8sMGoAyC
NsvQLAzt9N5/eo4pvsVvqpzdYwQd6d1ru9tYMDixs+/yHBoPIy4yRZcpo+v8
tmny/x/vj/7Uz7I/9JPbe2xOllP8yf4+7ld/P41Te7+Kl72eX93vzQ33//5+
3M+V/6v7vf+n4PxZ+3fh/NVx51TvX8U50OeIXzZ9r6cWBevihYN289IQ0zV8
2eenh9vTNzqYDdfHOto9y8SEhsDimU/H+7NgrHgndfZ5Jj70JchEhq/Caedz
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
PkUJvRx1CBeY6p9wV4XWgrHL3dJqkDn+qem7M9KtyQN2cai8wmw+q9rv4YD9
+fCH/FWqUNOT39nyAaVf9J/b8wQHCavjHmsjHXM1S4vLCtU7RXxXb84vtOPf
bW+k2jPx/eTs+FX+/EGUPzk7ySGpeVXk7NDFaa5qQ+1dbSs1rLHAgXCn1cD+
KzjYdTaf4n0iap9Dj/xbY3Hgdlt9qBS1+/6tR8UODauAWsuBtMYobdCVPXC/
86MFmITIZxexWcNHumOdcx/04da3U6qO2mogrBg/KK4nBRGD3xhPW/71/nXE
8Tvx/Hni7wGp68TlI7X+iDgfcv/zq0jqO0ZKJ5Kzh9R7+3vtJFUfpNLEdhD/
Pkx3+740akfHm6Id96F2dOZkolMsai8Xa4SczahVQX9px9NL51XhB0NZh9ak
Ksz78q3IzVUDdadN0GmvDu4e6bF1j9QhSaK0LrxZA0qi+N1eFGtAl5Wk54Ez
2vDkvGm5QY4W1ORf9et5oQcMZ24lW0jrwcBewqpZc2PwEvNZUL1vCtVvr5y9
G2gOemMWIh51VlBJUxLpomwF+aVmkU8pTkK1qYrG5ywj0KNQEKy1NoXNle3p
leGzxQkC7Nl8Syfhh/vdwQHQLTE2spESCHGC91OVWkoblEvYJD+FcrN4QMmT
h6982LcCq30CqwbeHSx1vfVX9uHgEIO+VdCAKwxeZz8lU+0I85t5bmm4uUCA
aAi+a7sTTEsNKJsMWcCRj3V0TqttwDoqb+zdWyPYOTHtmt9tCPp5221NfqhB
pdk3wdgJVegyMb8XcF4RvvLHbrNrUgZlBaMLjcqIR7MndjQcUwGTK0xgwKcM
eUeTReNblCFdxcdpvS7iUf0rtGNOOLjPkuHMcZJ8uyR+n8Tti1R7I9Uu/l4/
ItceyemA5bbnf5Sf1yYKmXAixDWtDsPiJJtMz7QfKJ6/Oh9ruQbhnQmKSywX
cFAycHiLXCkOrO2S13z+rAx1BJeH1Pu1gHurprgdmxmkH7DTuxVuBm8iBkX8
ePTgwvGdCkusOOjVaKbaEiIFK3YU36D8w/7J3kT6M5FIf5LjIVK89HN+AdV/
4XLP6yVGcr//6n3k+JPcfCtS6eWW6+8tP3H9xrKv9VBCmHlJspANtZvxqcib
FxFvahd9SVk4g+IZppYezmM4eCOrJT7dogSjVDG+idflYJWvbn3Op2Nw+x5L
0dDAcXizODJ0cBeA27t32YxFCsC0im1wpe5BCKShSGN7LA9t+fx2CVaUsPBD
7orZTTlovlgfrtUDJZ3V3ZUlnNxgXLF5cE5WpYSyLffLkXvHSzyX1Iwj958o
kQj2yKA7o1fSP241mkxpAGtPUdwPTLSDs0w/NHy23ID9o5vDR6wSgMDyPeUt
SzrIv1+NlxXKgO3qPTbb+XOAs9BtmFo1B+6V7ewp08oFSotQipC8bJAvtKgY
f5UNXrMl0Yev34Wuls/raJuyQL6j6KWGXBrQcW81p3O+DYziweJVsREwcYqu
MK06CM48T3c6EXQVSt9oVAKnE3y8dnYmvNsC3pS9WtXWv75kxTn3wSH0naDb
RrfjxGtJcLoZfpxPyABufT10TrNODbjLVz+hMlWDwm812yn3aMC7o5Y0xgc0
4ftTpTWUN9ThZK6hmUcHDpQPHb+ujXT9vjCOEvFcHPi4zAslhCN/OKAfN4ve
i0K0/gtqpE9vmW7h+LCM9kmuvZFqz+Ta9a/60e+el71cv1zuuc+/aqdurpet
oAGKt25b8I234iAyMUfhdIwy8KtHCDkoqcLkhcLDKU4aUPE8++nTJjUoqLQ5
tEFAA0zFrSyO1qoBV1RA4Ik6gMf4G0M8lqTPjyMePyKn/0mtmyBXT8TrDUjl
t9z+E3L5LHf9Jik7SfWDk7Jzuf1BxP9DbD8pO35e7wraSK+DeFMyfYfXDOLN
HRQ/HBeRf/oxWc29QnFlcMXNHSvjkC67V3EwXUUFyie5tXseaQOjq+5jRxQf
V+594DZnZga5o6taeyrsQeXWMX4DFz3YWEPXl3bZCdbgqFW29mlD3Hi+5u0Z
R/i+y+KWyjYFuCkSmsCf5Aqi7uecL0g4gIBdfnfeKn+w4L+/Vc0vCCRlMj4U
l0fAoS9StWxpKQDpETbzS+nAlO3SoLf9MeB7GXKPzLwAz4+u6z5kVYGAsnpQ
h8JrwA1+OfFuTz34L9Yd6V5sgGdS9LniVG+A13E7z1OlRvB5ZcK2Ma0BRE6U
31kn1ADxbrkqSyr18DlJzCSJvQFePLemiOB6DQKTqwsNzlVAQPCHYzXeL6D5
EyXd+y2P4Ou3dyOusdmgx75v0xWVCHDEc1yNveoEMtRieSnrvSFnn8ebWy6W
wMIC1FIcV8HE+2lmgtdJiOG8dm6rihP4S8xEKW1Uh6/Hw52btpmBTIp8Uo+G
ITz8wa7CL6wLkYp3122dwIGA58s2rWJl6LbuTbnMrwJdAvOP/F1UgFVxfyeH
FA7WBd8IonfDQWXO48nTVn/dTsiNN5Jrn+TaNTk/Itceie1cuUw7yfHJcvs/
f9XOfkdRwkE1HLivCBRwbcdBIOOFsGfvlGF7N/1DX2lFEBhOCCzZqwrn3MH6
+AMNiOgKnOI7oAHmIXOOd6jUwY/jI5VgMYBB+vGk938Sv5Piz5/1sUCEpK4v
EJWD1HpX4vtI5bfc9Wzk8lkukrKTXLlJtfPljr+Tyr9CfIfrUYShFwZNmRFP
DkpksexEuoXB0E3kugkOms/RXEk3wkFIDf5NCfLHx53cXedQvKIUah4Zt1EF
xsxuyWtJK4GQelXmmSYc4Fu4haKZTCF4E33/GwN3cDCQ8VdiCoYdV+mipPOi
oO1DkQllZBJwn/9SWmubAoaSkTst6VLh0pba4JSjuZDXK3y7pz4X3ARjDTd7
FcK+jYLxpYRCWMPamMj8sBTODMzdijhcATdrb21Sta8C32S2StbmOlA4sSgd
0lUPgofbzG98egsXBQO8BdxawfdyTPTevT1Q4fWW9opnF3ybKHI8vWYApu9G
1/G19ADn060q0x4D0K0Z46xM6IFD7cL8xcoDoP7DebCdqRd2RqRRnbowAA3J
b0L31vcB7ZU3/GZuffCmXGI273MHUF4YrdtR2AZDFY33vda2gFf/k0Z32lo4
WmaZyy5dBl4f3odaShdA8qid9Yr1haDskvluh9YD2JO/U7ph+i7UVK89y34z
HCpXzUvOjvnBhs34OTNfX9CNjvnBFuEDIu5NM9659hBWYfwj5rIWtN+uv9B0
VBV00rmuUYarwfi7Bt/pSjXwGv4oZWejBt6HHnbb86rCa1Fzh/s/0Pvs/iy1
yKAKWovWDrrFOMjQskk5fhFdtxA9umSOA9GqUxY8NqTb26+2T3L+RK49kvIz
UvaQy4/4Ojm987t2nux5FNHnjINNwoNF5UiHfitXCBXxx0FrjvtXvztqcJHv
m1TatCY08Ycs9BpoQXmZxAN1S3U4zLjn+FoWNdCvIpiEUkvBSEjnaiUz0us3
icePyOk4UuUk1f9JfD+5fRWWi7+aD6n3RSofcvz3u3aSs3vNvkP3exBvAl3O
x2CkLy0SNQ8xe+Lg0zqdNotnOLhHq2EUNoKD1/B+Rwy/KhS12VPcpVQFNcYr
p2a1VGDrXSlBynocrI+klig21wMDUYNX6fbuUJP69FbFqXBwHzmV6ByQB4zZ
MTO5Yo9g7A7TQTmZUmBimBfcv6cM1rcUp7PmvYQ5+yddUpM1sIOlscb2biMc
8FYgPNJvgYhPX2J3b2kF7TT/sqM3O4Duw5syIaNuONWT9n1vVC/YjDNcnmUf
gBus2tPbTAYg82PUiwMUQ8CpttAdRDcEx46sZTnUPgzsvK2cl64Ng8PB2E0P
l0ZA+w2ryI91I/Besl21hnYU6oRV3YtFRmDzouizDTKj0OpMeWKL3wgc3562
SFk7Cme3xTHFG4yCZvaz1wWfRiHDiG1coGYE2kpoyuKSh4FwyWDp7v0hEJqI
95oX64cbhCMpypodoB+VMzqyrgW2D4tHd6Q0wafhLMnSHY2wwJaySi7xOVCu
H2qX1skDj+N9NAfyUyEqa5dfyacM8Dt591QBRTLMWao4CV26DPfrd3Fzfz4D
0dckLo8q64L1KtnahD0m8DWPN/ZavT5s/qK2an2DNiSFmQXGi6nBp6D9fRK0
SnD90al7fCGK0Pg1t0y2WAnWa1PbdlWpgLT8kTcMN3DAPiYSGW6wfH75Z/sR
qfmI/2g7/tF2MuU6+nbY46DtMiEnwxUHRV9M6sY4kO5geTPty68GPNM7cMkn
NaGy9+qKt3WaMC56eO6qjToMKqxuVFJVBZFQ66pnfFJAQSF4OOcP/Z+k5n+W
EunP5eJy9Sc5nbbc33/1PmI7SeVD6jtLKv336s//7zs53T1iiTDVX6TqKsJD
HKGgj3izb7Hg4QUnHEi3NhUmiOJA5Oa5hT2gAn0DGad/uCiBnmxEnImhPDCU
bitskpeBwXvfV8dEHwXV4sVi8W8oTvE0WuI57gSikRZyfaIJEB36LqL/dD4I
2mRuOt5UBcWV1kzbpepAtf1U3bp7TdCZFTNnlfcWJi+FxNq2tsG40PSazQFd
kLw0t37iTQ/4Znn7+B0egLMcH5u+2g7CiS3HpeSnh6DGheJR+fwwHHnSEtnQ
MwKDGp28/MJj0LCT7gWH1xhEBkSsnRobh71hHAclQsZBZ1+L/cbuCZB8Sx9v
yT4BRS82KBnTTYJUVP5JG/kJqF99m66bfhJycwJ3mplMQNRmGXsmzklgYUvK
FgifgNW2ChLDypOwdOxFryftJBQzSFMXik+CK79cBfuXCXhmWeDF4zsBjXj9
RbUTE1BgNiH3oH8UdDjtCc5Hh0DHLuzwF+p+6J7k7F9n0wMumffks7rbYfCA
WtvxGzVwaslRdFVRGTh6SD5uayuDsPOdKYZppfC2Jitkq+MDeFK/yTWbIQKe
+Y1WvBm9CGycd/K+73QDAc2us3tVHeDH05yq+SBL8Pke3hqYKQ9HvpRmVosc
Bcux+dEIGTk4svHxval5pEuVqs81u2uAszHd+nJTVYh0u3o+gRoHJk/ET7EF
4sBqS+dM/0kcxNYUNMYso30ut13/qh8tV3/+rl/+qv5crp1yAoaO21H9LWTG
f1tzGQedW3uG2T6rQNTsQ9Z1kqqwn2Aub3RRDTbkXaAxbFeFWoo7S3S1qmA2
N/48uUcVFPxk5hxWSsEXhWbKzabk43fi+Z+k5vcSXye3fpO4XKT6U0jNk11u
/ye590S8boPYHmI7Sc0nIWUnKbtJ9X/+zMc2b7iyEKF07b5yW/S+C/2i0qNV
cXBVYMul4zM40GXf2ijXpwwG1Ax2Q3h5UOW3pd8dpgKPTu6/ljOlCQlTdjOX
XhrBMcOs4YOHbOETc4NjpIIXHFxN+PHQNAJc3ovaMdPmgUGhE/3GqiqYOaVc
Me7VAhv462KqojrA2Y+uUvlDDwSXr99taDMAzwPvcq42GYTR20IJZxaGQNhD
wj0pfBhuP3vIpTQ4ArbO1zTdno/ClFvhvv7sMdBzPcVapzAODJ5MRQm541C0
+UbFmXsT6PvtxIQfnYA2pmQpQv8knK3YXk51fxKkRwvZX3vjQWZ9j4n9QTz0
0hQ2b67Fw6anUkkbTuFh3k+J920THn7cW3+IxwEPpazSu8ca8UC5G/wvoeds
+i6/z6zDQyOtv4ZwLB5wtQEVBh14kE1e4RKXigehGYuhqLt4UI562soehwed
0MbPOZ6TsLD/Seq6jHFwbWG+dpx5FD5P2heyPB6G694HpadHByG8Iz9G/FoX
XOOtK8rgboM9RdEnJvWb4bbtC7Ok4RaQtxk4t+FMBQSd+ppGbYN0e3jeUW3+
VBDjEgzsnEkBCsE7FzzzY+C25qmMwzo+sEs92jHigCu8tufZeHOtJVwwT88f
ojgH96rDi8enXeDtzVmZBwnWYHiTwNkrrAu9DROP321QhOAXFuljcqrgNKfy
/iXST2G7X3Jh5+WQa5/keImcH5Hyc+L2S2r+EikeI8cnpPjz77Wz/eAlF2wc
/oO4sMKZIBzUE7qPUY2pgDaeynhaUgWEL2x97OWBgzfzFGKz+1WB+rhAkymj
KjC9Za57WqgKu0rKhBIopMBq+6UuA5Pl7/9JzCcrSPAhcTl/jn/95/y4v21n
TqfetC3CYLd9J7BzYOh5zwx+QrwpalGxyhvF7bSETTuo0PvmaZJc4fcItY+k
83Vle9D1xu19zxJ0oDSCne72gD1sKHMptD7lA7waX2Ze2oeBHONO/tqlW4B7
XNGz83weBCze1e/wKYFsO/fDIyENYK/R/PaMaweofD0c6sI/CF/T3y+NxY7A
gmHbznWMoyD7hXF96MlxyGTslgllGQeK67Oe37QmQOFaEL+e8ATE7b+aq987
AbOf7Cr3CU3C4FuLK0knJ6HG4KNMZPkkpN+j5b33ehIerOtS3GWJh1OWKsz7
lPFwL9FF6lkPHmjy1j9yeYMH6c3WHusOEoBGvSW0QZgAHsp3C9x0CVD5enh2
JcIjwVQlc9oEsHf6KsaJ0ktqO+a36BBgWPsy70aUrv4wtc0epU/Tl8hhvxs3
JdzIQ/cLBeQqxukR4KhnXQnIEqDJz9VpnRUBJuvxM57VeGja/nqj4Fo87I7b
6ixgMQnUqfvr9K5OgEvE46LvyeMwc2RRY8ZsFOi0EyQeHhgBf9EP6gfXjMC7
HTVqFjxD0GarKLXJtwsMhzXv8tO8ARvTA7TP9r8ByQSZViu6atgQdc8raroE
5tsaWT8/TgMNb6aG0LUZsKYzKm5ncBp0e2/N09S5DX3JUz8MtwWCyKiBkJO0
NKSx85sRivQgtO/c6srVOOB6cPhz7lZVeH6ypsoAxSGTW23rom1wUBoybWyE
2sunehoO7Py1QPYRCaw9deVk/k0/IudP/+rz44ivL3c+4q/aySx6mSYcYd/+
x6pNyL/C515+uILq8fLLuuNPz+Jgo0rOjy47pFMWaoMF0O8mV/LdsxGm741h
KLmtCs2FM4/urJKCPWzfL340Jn1+HKn+T2L+J3WduP/zP+fH/W07dfU86rQQ
Pog9pPsEoYa0mtwBLRyw2l67MJuC9MbBvmNnz6nA2Ml1nSWgDDfYm7LzrynA
jnjZsis3dGHbwVnf4DZ7sFgtceRj0TUQyelw2VuSAPwZj+L1hu/D7NDSj3ym
ckidaacoSqkGG+60cafhNrgn4VnjdncQiqcPX6TXHYXOXrWNNlITKP5ypN9+
eQK+vapKuVI9CWIFOMG5/EnYWO47YKuFh2c3dl2W1kb6r+fUE44APFz6SH3D
8zYexI4Ya9U+wIP7Su+0Z28RL+bYe8JrPFhdt+qlWMCDc4Jcx+AHPBTsyJ1a
2EGA9slyG4ddBOBiPqBx7gQBJM83id7AEeDL11hGA8SDLUGPBsMRHh76mkCH
8Wno494bCNNCEzsZEMYdXHvYG6HOw9UaGxDuvnjDRwfh+/dnNmK8u0WmtQGH
sPOTB88w4tfH820FiohXs0te55SYEqBnq6LOLB8BfI+yaPDTEsC6amwnbxse
zt3jnnIOw8PeuBcvXV3x4F9zTFIscRL8rN5TsXPgQf3gRENF3wRQS61jfZ0y
DhIrsnfx0YxAnsU8XQDNMJTV6vPVPB+ELb6XWlsi2iHw4wYT//oGCD1/d7Zk
/Uvgy4iNP2dUB1pyVio7nErhfv5S4mb2aLDL1TaI2mILu4+0J9C+NIVpM1Zc
4CEjONS+r/yrsQbE7Vuc9PZSAecj447npnAwp504sc0SBzFiba3bEA/svj56
B/sO77n80uFv+RE5fyLFg6T8ldT4Ozm9QYpPyM3X+V073y2u4HTFvi9rTudg
51zWKQcJbkX6RNct5McHhKLOxtHYOUujVQGW/Ig3K1pKtjsh1P14w3gI8aeJ
kXhGAuLPM9llcx+N/1p/kuLP5c7DIcZf3b+O3P/8qv4kx5/k7P7Vcv+uneoN
q3nz0ftLmhxqyrHCwb6t0xMrwnFwc/zAQnE3DuIoqh1LUDxh/DK50FtSB7zE
Cao31+qAlHuax4PvHrBA73l4Nf11sAwKE48RzQKOXfpnRP1LgD+mtHRpexV8
Mv/x4+7FNpDbcaQkkrEbWBd49i3lDMEeOLDl7pYxEHKQZjb2mQDrtWwtFavx
MBxlxiWohAdhum8Sjb148Ctq54icx0Px3LuRDkHEe1coRDYinqtyLdyrj9Cs
38HvhyYBmCP5moUQ8jSO7j+oRYCAtLVmp1E6Kunjdj6UTpztWyxD6XUxzQHd
KN2b1HdQBvGZ8IG9Qi8QSvKWGu5FPJeXZOIniZD6K+3SfoRUmtV7jyLs23HI
6AD2O5PFdymEH7JaO4UwHbplIQ9L7wxhiziE8Kr2hOExhFuERCoFEVZdOfnC
D6HBC79Lbeh/5DPPPWDSJwDlfl/6MKRP9x/r0l9CeH8Ny4Qoun6A8vEde5R+
oRZfyWxGgJUVAm1R6Dkmsw30yjYEaBiUrl+UIoCMd+nDbk087Am/6Xh+chJ4
D+h0bvk2AW6rNpi9aZkAw4rVzvFbkE49wv7OoaoLQvYG74//+hZUrDzgZUYb
PLQrYcliq4Sd1iGvzbb4Q0nVtU/HPrkCe5i3xmV5J3DljP66v8MQjqyo7gV7
NYi1SLr8aUwBjMUa5fakq8BR3yJZrlgcFAv9EPuqjYP+D74emA5NXrlw2eYf
0D5Jtfflzosmdf3v9Z/ftdO9R2IL9n2RXk85hp1zyVq6+5YOQkOd52pSmB/S
BuRh9efCxGl4A+GgyWvNQIT7KzxLVqeowlTI7UtxiD/36gWnfzL+//s//3N+
3J/n86vjjMst1/mA1f3MCDlehc77Id6k/FJ2fJUyep/3PvQnRWDx+fxQ7g9l
cE0IJOB4lIDtWkoZZ7M8TNTwhH48qQprNieeZ/50Amabz5Y/N3UAsF9VSM3n
D7c+eRdT774HFs68au0O5cA1a7tkk9QAUpvN8txouiHZVccn1WMA4vX2s33H
ozhdMtWDjWUCVgdSTW+mxcPtl6eoS9rxkP5j7uyPz3h4wSSwuIabABY2zbQT
4gTgk/x+swfxJef4K69BxDMJDhH9kQi5rh261mVAAH3GNR0sCF8FaZ7XQ9cd
rYrs7yOkj4oq80d8FLH6OF8XQou9nLVxSBfePuR//zzCQQORqlLEb5bMxoLX
EEaKxnNrI/Q5U3FbB6Gq07Aphqg+/xuuJIF8Lvp7Mbxi1LdbF6Fy1EQ1DmGq
sXjaGYRhFbPhjYgPJR68s8F0atYtmve3dLHvwcTtR8i+6zGWKcdQOdiKohp6
kf2PJR2drJBe3faVxSjGiADae3oDvS0JwPLFbP6qAuLz8qyMk+yoPPWUEl83
EMDrWdPhwBI87M9mDay+OQ66kUnb40eGIRYn8ySrpA+UFYpaMmEA7smmRqg+
a4Tn7s0U4u13ISrt+94Y9Qjolaos87T3hVeJUufl11yGi/dMsrNNzkLdaF35
ijxbuKVTJug1YwDHmYJuUKgrgahj1RSrjSoIOKRHnkHf33ibooNmp5ffrv/e
cW1ifyfnF8v1Y3L2/qvsVL9YNU6B+JPg2PQU48+kGo6IT8vYf/4/58f97fuJ
08stV2Wre3E2irciDUOjWy1wQOgc0GDPwsGxWr7QTh5V4POdUjENV4UCKlPX
kyE6gDtmtV491RjePvL5eKTKA27NLEY+EAgA8V1cmVZ6d8GC0vV1z67ncFU5
YK0yxSs4yPhC0aPmLXx/2XFWvqcL2rS0wx5TDsOz7a2bY6NHgKravO9c3Tho
npDYf8d9ElRSxcuZvuNB/FWBk4cG0oVHXnOmqhHghBuLg5k6AT6+b02dRbpx
MP0pjRDinf61VdOmCF05P9x6iLCUWjqlBOHTpdcbMF4qm48tIiC0eRSsP4Tw
bBNzDC3GY+7veFciPPpEMQTTmaxlm9wwfSldvypdHmHlaQdOVYRitxojMP5T
TzTRxrCmoM/kz/hzBQlc9V+IdMh/e455pexpLYTZI42PTRBOK2kGYfo1zre4
hwWhu8Md1w/IXt6jlumPEJ5fUM1LRRi9J2R6EenlxrUb6d8hDHlKG+qFrutr
+qRVGCNefbH2jjCqn+TD6xcCDFG9xbqtuYuu33vEsbE+bhKmFAI3zYdNgP1d
BSEP0TFQcXkx73ZnDNw7BSwfLnXBM782gZvh5dAjOz61aVsB6GkVXDs9mg75
N5m5v1hHwOI+fGnG+msgdvSwZ3GiLDBpzyi/ajCEi02dwkXyymBi/2JD9z0c
6O/XC65xwUFZ8vDdRct/HX8S+zs5v/if4s/ftVONiD+TifjzP+fHLc8ect+v
bEW9QxjGbcyiweInetnG4gsIcauL06aRLijb7M+5GemCLfGUElsO4kD2Y+6q
E4Y4ODdWOZrZrwxM7W7MuzmVoErlXkxQoiIMt1+sOaCiCVXv6OKKGEyhR0y+
2vmdHbR4mRg33vYFbavDlcyCD4HdZLtRx/NKOGS2Srqnsh7uOwhvXWTshKHE
04cZfQZg7vv7Ex4Jo3C6IvO5wslx+JCd3qb4fBLeK6qtqS3Aw4O2A6kMx5F+
UzqSMYP01YZ7DIq+SH9p3NFaa4r0WGmwwlknpM8mlB4mPkc8469wbR82XpO2
06UG46H6Rq12jJd+SNGN/5HHfvLXSiLeI9aPxHxIzHukkJT+XEWUHzneJWen
4B1uL6x8bSM9zScRnppbaudEGDD0UIcL8eh7+SUhI1RP1AXbB7DrFoG7Ra0Q
f77ak6PLtxvp252tlLKonk278m3ozuNB9+GO4N2ceBhd8JUrvTIGE6vs1TeY
DsCw6sXz9NWtINensph+oxk2MGp/uX7uJbhtS0/MLIoEz5EHJ7o8PUHYQlxr
UdYUGB1Hgji89cGVecFI+aUGFPt7FIggP5eU8xV5raQKiq9uFr3Rx8GVoxzy
hXa/7kek/Px/6vy4/yk7f+pPPJH+/M/5ccuze7nl3utSZ4/hxTffvTwQJlg+
2rsbId0TTSkNNxzcPLo9nesCDq5Prc1XEVGFq/dbn72+oAZrmceDv97XhGN1
GXnq6qZAPeN94YOhNWTs6F5KXvQCyb0C2xTEr0Ld3KtyAddU6FJck33/6kO4
bqif8aD+New6AF9mbdrhm+InnmilLqgNLJ2ieT4Icd680eO4EXgxYb6mg24C
bvBFXh5CejNoSOAsLYrT18Y9rPZSIcChQ/zPVDAesJi5LIfwzunn2okIw8Ky
r39CqMpp4LAN8cImCYMoaYRbE9JsNRC+eFFwDOMVxrmwlxjP0J+7dxTDxf/i
ox//hT/5iRRv/UwTP0dKXxI/T4wURPkRP/fz+nLt/HmfIdMDPNavwBR7U8QA
oe8+ZUpML5sVzRypQ/VkYMmybjVKv+Uc2XMD6dHMqAMiGmcJUExzk+oS0vGN
9z45l0kToCTTY/uKUAIcPPbaau7mBMSWlMcaW41CVWHaLUOFAaBelz9/k74f
dNcHVLSKNEGFPPO3tnSrklAnT/6uHl/wOWmjxbfRAR4cV+zy+WAAyQxvGujV
1UCLxhLodstCcOn3TS+cFIGHeufo/F0c7N61R1ZZe/njR6TWYZLzV1L+Qi4/
4uvLHT/6V9mpRoI/Sa1/Jz4/7lf1J7nxI+LvBqn5QqS+I6SQXD6k7CS+TspO
4nE94ueLnXZqYrrzlX8yTd9JHGgyFs5tR9999R92G1RHVIDKFl9Z+wkhj5BW
qpgCiKzOeTR7RgY+rB+tjibsh+9c13viB8Rgl7vofd0x3hIrywCj6+9cYFLt
21KywSVovnzY14QqBxTeFWVW1peBFG+MDfVcE5hESTvD1x6gOBCdtRs3COvW
cErvHBoFjg4lv/Ut4yiOfkU10z0JwiLJDSzP8WC3Ys8OnAQBzuGVenNQvNln
sObZHaQvuwkse7HxF9UA+yFNhLwRFpK6fyMuJtZ9pPhsBQmdSHyd+DlS+pL4
eXLx+99rJ3E+xM8F7T+tiKEmDYWdGkLHNHGzTISPsjI+bkG8mWgn1KaJ9Lwm
NyPjwhECxJbxrDZKI8CHJ5lRU7sngdeMwpJ6cQyemfj78Q0PwcGTA1e81w7D
bKNH+cbgNqA0aM7JOhUHax76t18wCodufma+vgEPOB892LaxzwsYG1RHtI1O
AcudHwl3RGyg4Y18SYaNEWivG9y+nUYFOjfOXz/aSzoOJOVHpPyc2M9++gHx
eW7E/rtc/Ukubv1X26n6i/z5n/Pj/txOcvjqSstWbPwus27bBWw+ycC1y34M
2HvRzl9VoKMKA1IBbLRt6mCGy7fYqacNC4RNDAaX7CAg56Pevhlv6Ks78bQ4
+QbSl2/xvAnJEKPikBURkg/4YsojY5RlMO+mWPnJpA5eRqX/+B78FpbozFlX
UPXAjJW2fKnFENR6idWuPzQKRbEa+Q8iJ2BQfPOrJyvwEGt3/X0b0pvGrU0c
5scI8PrgGZUzagSY+lS4q1CLAHJZW+Ww+ZQL1Qp4fYQqxmXHMN7ka6XZ/Ge6
jhT/MM+b6WC8e60pndcCYamBFvAjvJjVeukx0mfVvcwHMxAycmmuokDXv526
QWuGcI4pzVzzD/ksksh/uUjOTmL83f8j9ZzdMz0ejEdfnXd390S4Way4IAjV
s5v3FxM1eQLsdootPedFgBPbJ7Rj6fAgcf9wevzkBKh4VzocTR8D+ZOnL/df
GwdpK6lYjc5eiGh5pVSXmQ9lDISGHoooyHc9E8JAHwnim7Ywlu+/BDtn5Cqr
Wa8Dy+oHuReu60LXGnO2e+Zm4EnQs+arUIYrJ7frfu1b/v4h/6eeH/fPspNY
fyaS6P8kjt9L/s74nZQuJNUfQSq/3x0/+t34/Wc+gJdZ0kTo0bX5CgHhEW1K
s71IV0bObuZjNMFBLPcJPjMjHETEX6dXM8cBQxjlRmNbHNw6/8j6kDUOAvja
6jKCcXBmaVZzS7ECmFRc5XhmLQNP8orOVVw/DgnMuuwq3ArgttPB7DAEwMXM
t8l8tXdgOOJLMc1YHmzf0er4/m4FiIcuXB0ba4TwV3O7JR3agfLsirUBDANQ
ysthvmQ2DHITPq2hH8fgQ8eN17jeCTjRZRVDp4CHnGqlzf7TeNir8O3CBykC
1Fm8shc3IgBtovK9zUhvBjlNy2C8pSIDnBgmpM7X/lncS5wmFV8Hpse1YXzo
/Zl/GhsXijvN3NmH8aSM6rZYPQK4QGvFJMIxia+HvdD/9yneuSOCxcVLBcNm
f8h3YZnxO3Ecvlw7f14n/j9S8T5xPsu1UzWBxRuL978spvFi8b5kMh9BUoMA
MwpztNwWBEiZe3XYZh4P+DbKPUZX8XA6ccfJRTY8GD61274yAg/MXANWShOj
MKlhsCjb0AlcNa0qptK1wKekyNtIWQHF+9cNUeQVQ8uB65w3vt+CwiOFcbrO
PmAUhteTYDSE5gAWtZIEDeiOdiAcolEDOtc+G75NqsCsaGMe1oODcFYlTxp7
HAwShjZg+z9x9vnE1f+Jf5Lq/yc3LkCuv5EUn/zq+NE/205i/RlPZvzoP+fH
/b/51J+1rP+C8OsKauom1L4WMkw5153BQVIjayw+BQfiFclMH9txcF48XHPd
SlUQHcj3FRBUhZ6YR8VuuapgImspUvxEHexCaQ+VndQG19gLqVQlDjAxLe21
WuECPOEZVH/59hb0d2ypy2m8B3TH+ufOJpSB+sXdDw2rXkF5DdVRJo638DVx
71S+VA9c56A5kycwCEKKbadpF0egpPRSbrv9OGQXcLOoXJ2E8W85t0wf4uEp
bU7C6jWID24ft9AHxFeWSuwPcAR4u8U1bhXSQXHlHA79SAferEgewPxc+hTL
Kj2EfjUb9/7R/4nHW4h1HfE4y6JtYjEHFs9OK77iQ/x4VMA42luTABoZgSEu
ioh3RrNoqBQI0FiTY22J9O8orrBwBbrvEZ3HGOff0JGkkBRvkbOTlJ4kNd5E
Ttcu107HXdrunQgbpztOU6B6Keaha2iyIcDH6B/TOSgu6LGIadTiJYAy63Fn
2VICyH+/elH66QS8fGYZvu7tEBhFDxjbNXfAphf1TEqZzXAbf3yi/3kDtN5s
YoOZSHAX9xa+GHAFTB71vLVnNwP/Wmc+z1U4KOAUPezQIA8Sb1iL+WeUYGXH
YfGdPsqgbV91q1wdfe+PP1bXOYcDMZOGN2+t/9o/if2J1LoS4v7Df/X5cf8s
O4n1J6nxd2L9+e++f3LLCa0FbtSeJJgESxOccXBh/lyyHg4HxkyZepkuKmA2
VHxhOEEZCPTXgp4/UQI9YxWbmV2K8GRDSruj4wmQlrpj30gAEEtckFLjmSqu
4TZW8TmvWnKHRlI+S8QFeL/c1PkQlQPqI2OFC3UFcHTm5EvWlTXAWeRovXD3
LTAqtuXGS/eBUSzz9MjiMJwLKt0pmzYGisy11GvqJ4BDEZyUmfAgKsKhrYfi
cw2Bca784wTYmWxzpQnxJJwUi5E2IICsF73eI+S3G0em1hsizFQQ1cbic8Ng
DYvl+P9PJDeuPWTkLfsO8fKccfpKeqQz+6TtmoQRT7ZVHpdqkybAO3eqeBmE
GfrNySWIR5MFWyJbEH92Be0ywp57QkOvgOk1etvjUScQRp517MHmzcu+eZUv
h+k3X5ka7Hf+Oooy7P/qqd5p/I6dpHQsOf4jTpN7jhjZ3tuHzKJyHlwqrtiI
6ieNt7ZVXIkApfgFHkl1AtzKSjOS5ySALScPq9sM+p5djbP/ETUBRtLNTnGK
w2DPfEsopLMHdr6izB660AEug+z3z+a8BQdBpnKOw/GwQrFzkveAP0hOD1To
PjWHYb4axoft1uj7ybePVdwESryvpdVu0gEcQfKxGI0m4s3V9hLPcZCWxHwn
dD8OtgUMjyee/b93/+TftZN4/idx/P6f8+P+PB+bIF2mNhSv0+utoQtxwMEa
JumXjXI4qJMxsTdTwgEvj7SIA0EVNppGrDs4rAF8T3ZRraPXh06q3NaIcTOA
PWaLd9QcQF6N7+rOBB+Yl+Lb7n42BSzsj7E/eZMHM4ya9dRGL0Fj26F1lcfr
IIuurPq9Zyt4fBN0ombug963jc1PxYeBmb7L7SCKzzPyH683ZZmEUrkmm8Nu
eHCaHRl2pyTAFEv/1LZ9iG+YWa9NnEBxofPW1xmIt5ber97sgHjUY/rFrW7k
tzhzsRDMjz+ppTzBeKh41wujP+MTYj1GrLNIxbmVbNr5nuh/Ur874Lr0CRDK
2+bciXiy2pLuq+VeApjk7v1+CNnZ+Ube4OBRAvT26cvLIP6sUWGiaUZ2+uOP
HDuF2SdmvXgDIRe3bGI+9v8i0vZYOvLIpjRMJzskn+zBxv1Prb0S9rf04HLH
34n7MUndT+r55c4TSNqcFm+MUPnjazsehB3yAlRWqPxbdc5vUEL1ZkQ5rqkl
hnSo6KrbDjkE8Cy2qpa/OwkNzJ6x2xXHYLxcQlLcZwh4c/Z2+SgPQnnngUNx
+7thtQpV1Kx5Cki0XXtpb+cJUQqX7lVRXIYqka7n/p72UPGR+cKn5HNQFm57
sjRXF4IbGG6dFNcG8dlLPECpCk+kgmsz6XHQpNDeXehM3o9I/f6v7v/8V9lJ
PP+T1PwlnX/Q/nXLPT+OXH/EcvtZl5sPMQqNLFZLIryO37jEeRoH32SFd4sg
venE9i1tgzEOjsxGpT9BaYLZO553KG5f7X/bN9UCB2FrT20+vqAKuxoePjfs
1oSWIGZO7wc6IEfFGUfJYgx1spmfONys4c4pJxPa8gvwwOPjlbn6EDA2Nuhc
GMmBPS35EhtLn8MaHsUoV79maPxRfirlSCcc33Z+Ra3dANyl/jIaqzcCA5PG
RwI8xwFn5r247eEknNr2dtY6Fw+BXr4HXiKe3OaVQyi0JICarOmSEvLD2p2R
Pti68cwNSqzeyD/fdR7cj/W7mVeU/EVvLhDxBKnxD+LrP9M/x5+J5/v8xBph
6WfYPHPC/FRxkyEBnCLWvp2UQXyRbeO0tJEAxyTLeeKZCBDtE9OthHiirj5M
6LwZAebpW2hZkR5rfHXmUi02j8pzR4ozNn9qNHqeAmFvYvH0dYTfaNmXsHVE
08doAjAdDWvFnmr/CZ+Rs5Nc/yep+4nTxPVJCn/mK/Nw5gDG+xPP/YawebO1
9NnCWH/H4YIFjrUIP7Q8lRCTQ98fMxkcYyABVu+ldEhyxENhktawV+kEdBpp
JGxzGwdBKaHEC2bjsJ57nNLkzhD4lXT8SJ5+DenVwROXUx9B4t4kv+69qaCW
JP54U3ISHHj21ZKNwheKAnLX11Y7weirK7KbnujCrhG6Bu4xFVjl8r3W4zAO
UnZcTPP2wAGtYcGqPUg3jIVLsqYsw89+df8lckhqfONX/f0fZedP/pz8L/6M
I6M//13Oj+Nax8oVg3hze3yssI8lDobvDWxMccFBNHXM4t2HiFe3+sTNvkK/
C+RdMzXBwcgZrbH51TjQNqnzYBJRgwcrzj8XfKsJLo6PjfpRe5RgN+RcumkH
T2leSQeqecKLtAm9ofgk8D2VsMAifRvWs6tMcIwVAvcXGsVXn8vg1KsY+ZTz
HWCYwZfMP98P7xvWJrTwDsMhwusPk+NjoPM0m53XfRJErkteFe/Dg5L4jzRP
bgJ4jxSfZENx+nma45uVkc4stDlA/USTANlhbqWvEc/4r3mfiY3fRFZ+ocT8
NmC4+rz2H/yZ3LwgUkgcFxP/fq5+G8U84s/HZVKmzEYoDn/57IUGitd35NlR
r2QhgDG7sWsoKwE4h1cOdO0gANWq2rYwVI4tfedFJZSRTu7fZ4jFtV79PKzG
qDxf7dQ8bmggnXx24wQOpd0LOvyE0f8IbfpRaYuw5KJJv+Zv2ElKH5KbJ0Wc
/kfXp3FoCwcvKuezRc4Dn4wJUPDN3j1NCH3/Vm21t4vAQ6uqk6j5wCTcbmyd
tkvHg2RapZ3muzGoLl76IFTdDh3cs6ddOqrh4okdBf1zDyAzRvNETt19GFlj
luSefwPxd0QLjtkTQtc7jLA9NYLFdovvYtPKILXZkBCvoQJiNLnJOo44eJH0
mhaP9ELQ980Shn9y7h2xn5HSe6R44p/l5/8sO0n1f/67nx+Xei0LGBFvvnjs
toHZFQeJFz6Kn5XAgfrrvdf65FXglm9/KecLZQjhWWt4YlEF4ncEPbLmwsE2
lnreawsKMC973X8LrzT4zaUoyypwQ8LgB4ETS+bwjj1qHY/uFRi7Zh6oXHUX
5nev7VCgzoR4PisLP9ZK0MA5LjjmNILmq6NNlJKDcJVX45TmvlEYa9/cc05n
HJio+GV6QycheefqoJvP8DAveqDb2JwAx4XtcF8QP1Kyzmd+Qzw1fOSEog3y
uylDOldMj0UyfbVYThxKihfI8QW5eZX8z4UOMCD7PFPDfzxG+vPBls9HuZD+
5KU6eCZ+K+L3hYfDIkiH3q3jGpv8hgcxk/uXztMSYD/HD7p4xKe+RYYtouj5
kc95GfzqBNh8qjvPAfHn+1FzplbEKxZKNbbYviL2uxeGsXVAJ5wdVbT+pJy/
Ov+TOA4ndT9xmrg+yfEvOTu3tSetSEbfw5c+G8X22KP4fqPKJo85PJRlHfQK
ccfDRQ7Hq04H8dAfoC5ddo0Ab41o1G+2jEOqIJ2Mr0k79Fu9XnmdpwZkZbc+
4zjwCFwu4/Ele58Ak3mlhbJWCpSGj+yoeX4ZougiMzkTjGHf6y8iV77gwE80
bU7eWxUcaWgGr+Yj/2DdKnZCHQdVZ2RKGOz+0/9J3P9JPH7073p+XDWnqTCX
OQ4CU2WTYq/jYJ5KNdl9QQVGSmr5GZRUIP0M65GxMlVYC6mH2b5owICDIHPp
CU0QENEs4bmgDokMFZIvNQ3gcKN2rsFaN6BzilagDY4EXWuRY10PUqFyTO3m
1XNPIHHzeRcF5sdwN4hh96ORauj0Hz9817sVeKW0e55tHQauLCoVb45x8K8s
TNMXmYSCNWnbi17hoSrl3QbafQQYjKRPnVNBfnalo5wK02WmXiFPEM+sixsr
wuZrdp7Qc8HiWnq7npNY/2BXYKWaOkLcc+NGTIeqeb2MwfrbEmmfZGHz46M9
j/xlvZBBdFIghoFJC/q/optI8UyGdtNCDLKruZMx3UufAJ+lNBOTFJBuTIx+
kXSYAOGJLZsu8hAgvmYfNL/Hg/o5iY/xiB8OHKkYmUA8evTmCp/PSI9OUAmv
68MRQDOvSoEb8ShfZ959bD196IXss9ZYHDy94gX2f88IDpt+x87/LfqTOD9D
xqv8W9H7fRRNzXjJAtXnlkKqo+i7cm744kn/FjxcuOnVv+URHp7tTI2lTEb1
czm96brSJOTabi4KaB8AU2c91hzXt6DdpdPewF8BX1ZMb9gQXgVn2j6LiE6k
wxrDhV1fFIIgfMw/91uKOTz/OPOKxVsd5g7WJDemqsNSPJ/Tk7Wq0HO/w2aW
Gwe3NunZ1jv/tT8R+xm59TvE/k6OT8jpMuL7SOX7j7KTeP1mwn/x57/7+XG2
tXUMN5DubA6sP7loi4Pzonc6D6jgoNvnJJRdVIebEpGv2l7oQkziwK3T9wyA
+odGYe1zPfjqknV/o7Q5JMtUBu9+6A6L4qeMGt1vwvGCpruFU9lgfvwk/9GT
TwB4n31y066HJO/m942u9QCEva0pOzvAkfrO1i6VASic7NsT9moMThrOr7GN
m4QoTSvn+wl4eE5b66+G4lltoQAuP8QfwYc3cq5A/qV8Y/IODcLqgq/v/7gu
qFOwLh/jzeBiHEEBofPD1OxzCC9pDwsp6hIgaY3oB2zfTIqcmoObEG4W95nH
4l4OSUs9LK7/vnXC+894gRRPkJpXuT7zcukU4rk8rjendqE4/HzPDlkFxIP0
VjR6G5QI0NKe3XBLDPF6AuULoyk8uPSufKAzgoe6YzwDu9YToHZrtlI04s8V
CiudL6Jy03MO3fJG+tOv3POrIsq/JufQl7/wZ69G5l/6Eed0zP9MT5Kzk1T/
Jynd/rvzP4nrj5ydMlViemnYPn8Uu06Yofj9yJE451BUX4pbtz4wYUf10TU3
Xs6C9HhefO6mSqTzw3Hrx1sm4WXsEdu2lmFYkPqUXfqsH7IeDZxS5W2DMend
KjltzXCptJrNijobJF4OHGXEeQNbnpe5ZLgx1Nr1JTw+pw/Ju8fVjwZoQLjp
1sUSxJ88US6bb/jhoJO+UPKlFw4CzD4xnURxWiaFBqvWadJ+RuzX/9vOj/td
O1WJ+j8TyOy/9O9yflwaRb8azzkcmDRvTBt3w+bJ61o0rsRBksSUy1CXOnSE
5eto8OgCT1f72uu0+pDBVWPWl6QND2fP+H0fOAmdB6YojRj9gMnk7ucf5jdh
nkF2xZXPWTD1mtFrhv8RMHuNeVCJNgP3pvMCZcPN4HotTos2uAfC2MYjWDOG
gbvmy653CRPQP1mueTQYDzVxdtn+DATQU1x4HYP4wy7rcFw24g9FY0nFXci/
RjgjxrF9Ln3ZxUU1/+CftuU1P7D1LouX+OqdERoPCYttQniY1cyRFflj0+So
wwmka96xT2WnoLQ4/uBjLN63rJEtx3iXa9smluXwALlxbUnW6DxsXGSRZZED
26dzqfTAo17EpzriNBG22Lz9sgH6W/KoXA9STGg2ESBtJfX1aaQ743cHZdJy
ovwjvqr3onLv+iouR4XspGe70RaBntfseNyCrTPPVdo+jdmb6sYgiP2fYnKz
we/YSTzeRG69Panx9+Wu019ufa50vqODrVcKDbjOU4rNc2rOdW5G3yH1oFMK
dQYEmNyxbstBFIdo2nGcCblIgMa5J4cv9OLhaGSVZ6bwBKi+PNJE934EjjW0
1KQZDIHS9fvVLRsHwJL21LfEhkIwcAqE3RM3oX7tJZNiNWvguKncKhxjDnYZ
ZbxZbtrAG22oUtuoCNyCM/2tCUrA5mCTvloEB8xstkt8/jgIFrSNDzcjPQ5M
Kv3PQnL+/o+yk9T693/38+M2puPvCBvhYLaT/urGdBxw8qwLLFRXgQ+ecgFx
JjgogMkbi1JKsIXxzReTFBxQiVhftx5RAYUn+EK2J47gO7G6r6vrBjScltMM
en8bON5aDMbqlkHvBR0v6v2voFdMr0qHqw+4T3bgArkG4MkbbxE9rRFwfsVV
7cg7Dhuv2XwQ24QHpmsiPLooTovxeCNsDQRo70s7z2WIeDJoteIg4pFc1jOf
Mb15xWiL3x/99qd+2Wzcd4gb88Peb7N2SF/aXiy/nYr4cnTN+ZpUacRba9Zc
q5UgQFb3xQT6E4hfM2neBaP7T5ulTWH7KKl3rHn6x3EYUvHqX/k70X1WUi11
WD6CNHvrzRFK863fH4d4AEzSc19g8x2/qa5fj/w/40R7xmkhxJOFDTntyC76
/XtSMhSRjj4f+pROCyt/11Osf7OADb8Z05kDl/QlsfwFy/Yb/qW/QbD413iJ
yE5y/EnqfuI08Xv41f5PYjvp2Va7KWH5Wn+k90XI3EjHjdUfFbVNXz2ql/Iv
DYUdUgRI3lulmfGIABquVfYHRPFw+UGIdfqzUUij0dw1oTAMhKkI5l7Enze4
X1QeKRiCuaKHRzOeFED5gwLtGZlQuHzuhnnR5Cng/ijnzvjeFMQ3OKz9MqcO
nefOaosqacDJWhqG1xXq8EPRXG5+PdJPRsb75NlxcFtawU3XY/m67p89/v6r
vPG7dhKPvy83fv+//fw44YD95lm7cWAZrfCOX1YVmoJ80nq3K8Fz02kra3EZ
+DAuIiC1QQVoMxROm4/ZQYnd4SyHdT5Qv6+/Y0ArBPw5/a31xW+Bf5PjOtX+
u2DXss3Y5WUZnO18lMhT+gbK61ytnc8NAFuopN8HlSH4qu7QqU03BoGvra3a
ZieA3SyUYaIVDzjxFQHDagRwMCxeVYT4RadUJGs14sF3HQqHFpH/zLStysTi
7NXy0bR/9NufceBnf0NlJoTe4oKX69Fzx3n52s8i3cqjHTWJ8aZ68DPuEYTB
SlVd6TJIdzafNkhC96vItWk6YfmFC4r+rfXnpPSX9XwKYOjEpdKEIZvUjCfG
dxoeO+5hevhyaQYOs/tkiM4zAYSmQ3uOdiB0zdWOo0d26hpzU19DvPBe6Udi
GUKZC9evZqLyfk7hvoTZs6mP6gHWjzu1sKiO5a/aOncGw/c8BsZ/xoOk7CQ1
XkTMg786n4vU/Chy/0dOzxI/Z7L+404Mv3IFX2c+ToCku9cp+VNQfP825OOS
Mx6OZCu8nWsag/wHW1S2Wo/Ao0Ad3juHhyF+bOVNypUjsPlr+1hzRBWs2Ftv
+KAuDUIkcmWNR/xgzuLIeJjwRZCx14jtq/MEZqOF99afHMBxLKBuzQUr4Hz5
cfDwAw2Y4lo4b+OsBPZOqa7raf76PIr/U86P+107SfHnv/v5cU6RYhFH63Bg
ncQqXiyjCq6iXFa+c6rA+yCUK/WgMXDpHw27k3EJpgXyb3nsjIeMC1XCht/u
wr6cSN777x6DJe/lfR+kKsDKenFvC8Ur2DUyZFS4+y2409FuMp/tBkdB4yNx
gqMw+Un9xJuIMegSKv3G/WYCThtf8VFhx4OwRsc0xS4CFONNUilPE+C5U+9h
E8R7S4pnQjC9eeDxbXvMb4jnufz0r5/6hU790Rg2f3Br8azJaqTzduwTFp5E
cXBY+NU4fTGk8+xoGhIRtt3nKIxA/ife6vMlEMtvkSMb24/9kdzgLc0/5LeS
SB/9TBPbYbc9zBmzU5qqJQHbzy5kzNAT040JPhlM2D7yxh5u5kEIU3FUB88j
fBY1Y4vx4XS4615sXItxXRuXBMKD9bEPMN3F2yWyAcsPPzO9H8vfqOzQX/5H
ufK/20NsFzH+o/f/JM6H1Hsghcu1kzg/Yju/McW1sCGd3mtrOsEeQoBr4jHd
h/LwsDaIesVD3gm40KHoYofimszmiC2xdONwzLV5ujRnFKZNJzeUp70BXhfm
yu7ep+CWfFdrhvMh9Fu68zd8yYJ9XZsaaA7dAlrFkUfZnp5g/M03P9FPCQTj
VrJXv1UHzeC1N3NeqMDuUnlLnodIb+QpKBQg/9kQqrcxAGFsX9laa4TP1tcw
nPkTHiT2d3J8stz5iP+qc+5I7T//735+3HV5EfhehIN7xw6xOJepQpjzbYpA
XwXYIyQpbPXEAtayTrgWJl4C/gMP5m0CIoH24OC6tasSITOoIina6R5s3hgW
QA3lIHfi0POEB8+BYrPNBwW5Rnhd9052FV03UJ7JZ9NwHYMt08EPtgZMwMP4
ieBAQTxcWM+VOE9JgAW+KKkpZQJMZtW+3mZAAPn4vA4NpL/SZ4N2Y7rto5JK
/x/9iViX/PRDvTlu3R0I1TrmTmP7ctgqNQ9g/Z2COWccDyC9+UqjGBZQHJ/O
f7HAB8Xv7JXtqWHofkqjagYsfpe55tP6K/H7Tztuae2hx8b/9a9tcVVB2KOl
KOuFMJ03gxNb5+21a+XDSYQjFLrGGQipt5d7YnxdUDaxhPEss1SELcaXm3q8
i7F+TesRWuW/rCv9elD3L3pLTtkMwwc+lL8VFxPz4v+2+Uvk3iuxndZ1+uXq
6L1SbDd4/M4cfY+MWiQTRdH3y9T09lmkQ7/enRU8mD8JlxetCk1TJuE+25Rx
ccUEaBx/n3mpfBA4N+7jj5Bug16T40bVe2qA4tTo4adBdcBr9CCx4HEBpCb6
nr13+zpsYBySoMLpglKK5QVdR3kQ2OMYVG2jBhufZ3UfQXpDjtYlUcoLB751
J8bKHHCAbzJ5ccsaB3cO6jBO/4l+IzUvhhSfkJuvQ+zvpPIl1f9JSreSsnO5
+3/+o87vIDd+RFyuX+0H/nvv+4l7yxhKr3jjQCTXbS7MTxXeCgSHbeiRA7bz
DTnbzlvC3fZAlk2FBmAhpnE/NSYM8g59icvfeRcyP8bXU74rgtSXD98csGmC
p0UGT3aL1sAmCzeRrPgu0Lv3TMXAfwCWaHeubUmYgJirG2qpDuLhilZJWCAD
dq7ktLA71r/5tuXKbUxnlpeeGMHi9BUbkjHeFHQVu4r5C44rWHU5OqUrCB+J
7WM0ZJEmxIz4E984pSWDjb/sfiL/UQHpS2PlVWIqBMjbPNiWjXSpjJ2tliW6
X3Xdrm4jhON338Rr/4b+/HbumkoYsvvVWEg4nT4Bmua+z5YjffSmjgc3JUSA
TAsqBmkBAoQHDD52k0K6adeA0yk1AjwxXS8RguwQVVvKqUH5NE/KM2HnaEjs
vyCD5bvtaN9f8meKbv9LOcHlz3Xev53+XKWYKY/ik/Dgr7u7UbzC9rqIq3Ab
AWRtmc6tV8JD7RVdGhMGPHREnKnwD8LD5BZV29uVk1D57lDvmrt9EL023dZ/
01t4wqEWuul9Deyr+CbpvL8FmqzrnL7nFUCUt++EymtLOCSkuVNrkxqkZGXv
j5nUANO5GqkNZjgo73nwWjBKBdiFuq+63VaB/hGJFvatOOAqVdY9fh4Hggyj
yrEWfx0P/6pfklu3+Lu8QcxLy7WTeP0m8fr3f9fz41Zuo2QWn1WBDAo37uE8
VbA6to5NZugEJMofuz+tfgJuJk2Gu1OLl4R1qhCGM01BbPpIfFlYHCjmPt5c
t+c5MLtVme093QCqPp7fntrXwrVQM6VRuR4wi5HmbZodBjkf+5CKc5PwvHnh
y8xdPKgWNJ8ukSTAU+cXkpPGBIjltJhpR/xz0V2AmQv5R8pDtQnDP9EhxPOs
F4n8TLJ5UQjrdxzdt98S48UvG8YMsHMnWeS0lK6h/INHGdrwfzk/nYEd65ec
0l83j/HlZZmHttjz4TtPG/+Zv5Piz5929K7E/9iDzVeaebTypQG2/4ezxp5j
iBe//j/svXk8Vt36P66klCSVQkqhZCpUVMqVTGXat3mWKVMoswwZGhEhQ0Sm
kCFJxiQpRRSZxzJP900pmsV37ef16vd6fvfpPrfneXrO55zzOn+9X3vvtda+
9rDe67rWda11xS3fzUeCWGYZx81bSTC9J3B/6S4SmN1sXLoH8ecdfpuECYwE
CqbjlXg8ldzpBEWuf/J8f5aXKPEbJf2TEn+St/N3yUneHrmc624EhbYh/ty/
pF0xyJIEt08/jCFsQeOhQEIJ5kyEUwdWuYYpEOEIq1zmk2J0fKfdyESOCJlz
sqs8AvqAQ6891ymkDQg+0mX2ZrUw/t18+Ct9GzjcX+qg3/UQJtSOv1WOCwPj
wjoSwxYTYGK937w0xxrkDSXTE24dh7To9H20rCZgduFLqN1OHbj15Ta9NLLv
t2aKRHnSqUDW48hb4vX/ffz5v/xxP0dzri8y7ZkYHCw+q2z0mABbuTiYbrKp
QtQmBVOjKTPYE/tG0yXFFY4KbyFKM2XC+o/a3OJlj6HmU8crseMvYeGlo+Pn
CZ1wbWJf25RcF8yd2dQhqz4AwtH+tZpJw7Bq84o7NkAEuif2Hw91EIFvNE2/
Xw7xplYWq6Ah4rvANRJ4/l4jB+OtuB2sbC4b/Pv13DTz7Gdc/K3ncLtXl35L
HB7n087aeRhflzQRuHThU4TskrNxuJ7bI2HNh8eFBnxZvxmv91Z7kxiOrQoz
5vPRt8jlMJLyFz6H5x+Wi3qShfTP6wXZHGuPkGCV+F7x1r0koIs/8CIe6Z1b
jVya5uRJsIh17YtLqP87fJw8j+e34F/9FotC7bxTmJQ99Cd4iZJd/Gf5k5K+
+lf5c75yUuPPhfB9ah2yKzhMVAWEkP0ubJO/BHaToM9bQYG/hgj8T7YtZ3lJ
hHNLPldaIb3/27W81yFXiHD9wbuBpXkDcGKltU6zVw+kflhW1HexEz4O7Ptm
FvkKdlkIrPSeeQwW7VVPnx8Khr6q+IJHHIEQHXj0UTXPecS342YGyT7w3Hd2
eGHSSej22QGZYepwjLA7acWMGjjVXtT4lKoCHIeWfsh5+L/8ceT8+WflJ/cb
/er8ceMSPYpHEfb4GH2IRahxJSA5yQKDsxs/sh8yx+BOo1ryBWsM+rJCtdWd
Mdha06ZWh66znh8NvKGCAdOtmS3n0fVexnDPA3cJcFYr3uITYDBNt/Pk4zv6
cCzN6HX/FRe4qGggl3A8AdqyOSIWXy8AhQs9altTnwFvQt0rEns31AUfFN3x
4hXUs3dm3ssYhFnG7zwTpBEYNxSj5a8jwo3q45rygkj/en+UMYpAgotOOXvx
PL5H7oi/wPNTCsVFyOtoU55vW0RhPu5H/2uqat2FY/v9FYZ4OzGuOb/5g46X
flyJ7wPH3qdXgMef74XE17j+eSBk+29+7D6hW5Y4XuRe9/9rj1w/oiSHlX3D
G3w9ZYp15P5yvP9r0I7h8d+D0t5z+DqpwVLxA1vR83V+5lzdjK4brr3cr4fv
C8qlc+otOh6Z4TLB87RHJ9VHGvyT56OElPQ6cjmp1SN/35TKkx//ajnJ2yMv
L1IWPrQSHy8ZL+fi6yFmvhdMFKHxSGY2JmgT0vtvtHJseIfsm/To9K5sND4X
7xh45r2WBIdMbbwYz40Cn1HjwaOVQ1D76ZXBAZZBqP86U/ReZBCuRHxzicda
YeOgiclugyegu6aKTvpELhh+Sbp3eTwDZPQOxWGcMVB4WblX66UDKC5g63n0
1Bw088bijRkwGDsXd/OjNgE++YrHiN2nzhN/tJ9Twj+aP26+9yc/nu/+85Ti
56n5YSj5jyj5xcnnaSmtz6J2nfvRzbYShA4bYk5nWmIQnGohaeeIgZAns09J
AAZx7saXbE+j86OyIpbyGFTIOi7g80Hvx4qYx72VAMOv1jRdCyHAEU3rWYkB
deDm1V696TUAh5DH3qBZF9AoHbQpKzwNNxRn2pVLs0FXKnLNbu/HoPr2lGiy
Xx3YZE8zd7n2Q5T157LxRf1QukeK6+ncMLyRdE0LKB+Fd+kFuQRkv95JWLDy
LeLLoqyvdPyIV3YkDrTi+7J/O7CdFo+HT86pFfi9/kEpHpFS3CGlcuT6DrV6
1PxH5O1rX7xcju8bvz67Rw7PR3xw+vOTHoRftDflOaPnPb8cy6xGfOrRro1N
KqPnd7Bjclcigbqf2+ajaiSgP7XObBiVj9I5x8L/T57vj/plKMVt/rvFf1Jr
j1xOgxxHG2eEUnak2DI0LolZlaVpo/d8sH0uJQHx5Wyk6pJj6PyHubzFnfYk
aFi0wOgbPwm8RAX30TSOAk3HO/MhrREYNDFncYFhCLcTXX708ggs4Ahdqny/
BSJ805tfv38M6R1bt15KzIM9/LQTrosygWiklz2qHA3dOprJ9beswYV9YLBB
WR8E78VZvdipBku9PtnapmEgEsH20DyTul+GGlLyH82XFyhd/6P+ox9Ibr9T
W39Evn/yH+XPH0gpDxS5nOT5nOb7nmgnlyrkI31y8RyTuLsdBjPufHe7hDBw
OrhRXqRcBVjvMtuZbMVAXfrr1qX7CLDu6cZB+o8qEMNIZHmxWhH2ec1t40s5
DPKfNwVbZCpCe//RtpN3d8HlohU6jzkIsKhdYUJjiWZ59tnLNAf0EkCe5Spt
9mw5dGiXq7PUN8Lm1VuO7JcYhLtsY4qmUoOwISUrh5dlFGTX6tatrBgDwfc+
UUHIbl3YKsyZiv5vPpeUdaGITySMefrO43qiRdQS3N4mt/Mo2YXk12nJrlPz
m1CrR+k8JTlYzEUs8HlXOgMFV3zdkbWR4tVO1H9bPJZI+SP9yC32SvYXVRJs
61/y5L0sCa7E5m5MR3ir1/ltM+LRGqk9DBGonIQf79nvWpSfjxLO124mr0fO
Y+Tvm1J58uNfLSd5e+RyNjJ2NuD2w96vn+/j8zCj1erLJtF74+42S9yNcFPL
iuRypI9u8K1bGoX4M3BdxucBxJ8NCpdfPqsehXafZ9mCqSOwFmQ3sLoMg7xB
+Iyw3ijUsly+xevQDnI6tUmNNNVQ2GS56w1NHmRl5Y6Lt2TDxfb8k7lJieDu
q1ZifcoffO+pv21ncQCJ02KhfV0EuFjzbDxiOwEMbZbcXCD8j3zxd/EnNd6g
dP2P8jEl+508fuk/LX+cSMrL93h+DQXPlxdMEH/2c95U/mqLQVbn6Q1inATo
2i3n6tdJgFqjDvtGGlUotzI+c1+fAMxaMlJiy9ThkSJDxr5JfWC0umMuLGMF
m41lU26fsIDBzr0cBm9DwdrQQHVcJAnkSmvHleiLwePWY+kFVS9hR5LpGpe1
3ZAgO7NSxXYYHAvHrL7kDkPLlocVO+jGIJiDRzRMiQhNsi/mjiK9i87KKW8B
4s+gFS2H8P2Fj9P7ieJ+79Qt29b+fl+5OTJ9Y46sX1O6Pl/8s/UoyUGOBAvi
whUIz+1g2ReNeDHkKbffc6Rnbin3kjBVIEEvpp8bhN6HNc+1OTwvpSzDCScS
Kn/Q/HQN379Qzl/1Xn61nNTa+3Hd6jRHPf7f8F6KsMHnzWVbtF8oI5RpEvVf
hcZnO4mHAcRjJMjkl9ptspcE21+sz1vyYAwuvqh069sxBjf9hWfunB8F3aDu
0QXaY3BhZdmjyvBXcIY2WaIr/iU8GLINlYivgOHKsO6nx0vg2OxgefDndNAe
q9stb3MaVJ0/pnyKMILErLw6p3XaoGIf/9ndE9nxzKJxR2n+dfz5754/jjx/
MTkPUjr/474/+H8xhfkISvOilO5DjpU7OrZ+ssHA94hQQjDiz70+0R49iRio
WO5YVddEgPC5123MzaoQP2J14XG8KniNM43IHyNAYNx2yeIZHSitHpW1NzOF
eq7d9yr7nCH14uI9q0+7wPaYPI91zcHg9hlrCDCMg0JpM/mKZ7mgr+l5oPzi
M8j98pXW2bET8jh4AnXsR0DErHtx74cRiF8rk6T/fQwYAmlpPmYRYVXI64dr
EE8cozneWaOP/vsOoTZ8f86Fc27w27qcdRNxv7fXKNnL5PNh5PoQpXKU2qVU
j1p71OrdlT3lLIdQcc07wxsIuzf4TgJ63rehRyZcNUjAY70xmQEd27I1SUig
616BGU143P1ZXjstzX8i5x+dV5zv81F739Se/1fLSen7zFfO020jog3o/SqQ
Ag4N4vtf3R116SeQwDueUS3rLRG21ygYz90hQkCU//StAiLoXEkSPhdEhMTL
t5qEsSHQGBDv4kntAbbhOR0/zVYIeRUlculEMwTqWx7aeL0CsoNdQ54tOQ9R
FUOmwQWGsD7xdKP7Ij0I7TY+/VlbHZ73ywoVnySA7kJGyVIGAly5mBKfWIpB
jsCUy10DDDrOpqjZ2P7xfk5t/pMSH5Hzyg9eIj+mVJ98/pNS/PxpKvz5/8X7
kCGl8wvI5KeUx5m8HKX2KM33TmyLvob7hyy4gvVMT2IgrCDpvAqd/7jYPFQn
jACLp59wlr8nwPbIoY2VHwmw92K5xk0pDCSdJ5cSMrXhmdXOvg+ierDOstHA
Z8FJ2H/4eC4tqyVIPOJ95bf1IgzRyfuuWRcKaro8j0h2WdCwayB49dVqeHMt
lNPGvw022eivEw0chcjg8s5dmaMwfuIRd9F1IkxGc/fXfCFCoI/UyrfInlqb
mSScrkuCaw+F6peg/1yuvG8O/98HFS9L/6yf/NA3qPktqMUb/UCPdyq0OCbn
KDzE9ZW+U49Dcf+SgfHA7jN4Xo/k/E5WhBzl9dHHETKc2V6Dz8vuljmShs9v
rtbrzdL8iRzkdqiUv+lh3A90LNiPE89bVHTMWhrPg56gyMgghPRRzm2Lv+N+
pvZjXHtsEU58K87Cx5FnldpaP/Of/dW4IEpyUnvflMqTH/9qOSl91/nKecJ1
w0EvhFlftAk70Hc8v1jpXRLi0fePxDkmTqJxzHBwzgXp/zqvI9fb4H7MCfn7
JsguehasETKUOgw561fY2PT1wSKWvvHndF1g7GORED/RAymNqfY7Wqohvmnr
8KPdnuXXsNanljcd4bFB59JXd4zAoLD6zjSzGkiUn33l46wEbw/XWNPcVoID
Dp17ClarwKJ+Q0VvpNd0uYz35mlT7ud/1P9OPh9I3i4lXiHnH0rnqcUvUds/
hHz/OnK9ltL5H0gtDou8HLX7kOOuwtcP2y0wqBvItV3gjEHyty/Y9lUYbMpo
Jy0uxuBTcpDyTDkGpVvsYy7KE+DGRIjISmEliBinn7jqqgzM+6qtA7PloOVe
+5LZKjVo/rZE8Z7TzvIL6Zp2h264AZP/++cqD/3g8ZxETRpXFvBF1oftZX8G
r7IdU1IZOsCsIW9JavooeIz0WkUsHoNVx7TU2p6hcX7v++gDM0Qo7OIIwvdf
43Ru3HIf8ed1ryehy373/1NaV01+npI/gVK/Iq9//Gz5PZyftJZxvcD3t7Oy
PGuB8yK9IRE7gfrXI3YFUwMDEswsf3KmDx3HPONkz0TXG/nqcvB167Rj0b/F
2VPzyxQ5HGPE+XDBO3tJvLxg7n5mPC5Jj+7CMTy/PP/nOhk8LpVp1YVOPB/c
pODHclyuvI+X2v5ZHg5KSMnO/aP+I0rvm5r/6FfLSe0+1OTc8GVwF27Hc519
qYev9/I+d97MC/Fov4Se2y7El2Jbr0yN4t8lzZtAVETj+VGnbK+rSK+VZ2x5
TD8E2uG0Oc/Ne8H2ak/i88Nt8NZp/Ns1915YUO7iyaL/AnZJqGQVOcqDRXjG
JZYYGxhxTv/SqWgAnRl3uiWytWHfuPbtQltNELOVKHcb1oSxe4ap5VZqIB12
8q34BRV4dfzClvZbf7yfU8IfvEGJjyjxynz57McxpfzFev/h+eNeLDl/6Rvi
z0vyu2Ja7TFg8PbNDxTEQPkrt2I5FwZGn5Pa7puj5xc6xx7MToCU9o9FLYHK
cORY7cvnNQSg2yxVQPtRBw71lnNxJR2HBxGXnFb2n4DYlEXBBTZRMFLJfOLe
92TwUBQy3eqdB1/YVhxt434Oml6Ll53X6YIGvWFYqz4K/Lp5LVkvRoFZ4iCX
XjXSO7Mu7pydIgKhvDJ/EtnvX259tv+K+JNeOc+IVpvy/hY/jt8ERfyWR3jw
rtwanF/4WYqP4fpiV6b2dnyd5GAB+xjeT3bc6ziO27/py80X4eWW++kJ/qzd
O7EmIvi68zXrIl0uIKz+ML4L319OJnCjjz/qRxpd25fPSKN+5bLgIZ5fWJZT
exqPO4rhE0keQeXu23utgd/pOZT8+9T6O3l58vOU9teghJR46VfLSWm/j18t
J7X7zFfOoyTuTNxeaLG6evcYQo+5pk37Eb69mRe/S5MEzkXlCRUqJOAuDU55
5EeCFN+7QZJyw7C8Top3i2U/mHw7Wll+uxtuV6/e07SoH7r0Lk6PrnwJJsee
OnxUPApdy8/HKH2zAXU7TuFhGi94pp155NRWZ4h0H360ZYkDKFjpFRkl6gHQ
1eXPCGjB94R1JTvpVGB/Q9ddza+/bv6TGm9Quv5X/UfzXf9Ovv/8vxt/Bh2V
bypHyF8VmM5giUFVh9/JJy4YsNAFSRE8MLheZnJ2dwwGbOMH2LVbMWjQ3xI5
tI4AIbwBs4F3DKDAjTnQzNQCDh5hWf0u0xPiOx673c70ho37rMSUFJLheLBJ
Mrt9DqQmhFVi1oXgdfxButPWerh+YU2MgnAXJI3EroSqUTij9+5r+PAo6Hsy
bqx6QoQ1j5z2fhsngt4nQQF8nSLzzbYpAaTXMX47lYD7manpF7qiT/bgfOi1
id8T583l+4JCzXAe29gX6YMwzHrfKT+E+28OvsPXkVeuDc7Dy0nIP92v85P2
pE8qrMLnJR3AIeALQsZdLxbVIDmymhNJiTtQO7SKmfKbSfD0YPFtFQHUznTn
bDWS25XRw1kd8b6ImXrcop/0U2p6HXletvnqdTMUys9Xj/xPlZO8vV8tJ3t3
OvsRhIteL14hjuyiE5L0N8MdkV30bEVRpfYo7BlT3Sg1NgT3iw+PJDcNQLT5
tb0cK4aAqfFr0JeYZrApiBTMFroLXEtNDVdFJEJ2csO6Q0xRsK6kgODPFg4k
aMjgNHICBhpLL5E4Y6gfapWk01AFjxqb4DRZAnzstDqz5dp/Hn+S65+U9l+i
tH/In+XPv9v/Xs1lX6yHcNEV+bRKhHLcnQbmxzDIuiWT7I300o/N06J2F5A9
Pyr0bHwxAQLiApWm+FQgciTQ0lzaEK417XIsszKEBUXW61eWekD1gwdnnha4
g6Vk5onhXfEgzr6tkqM2HWhd1SbEatKBpXhX4Kh2JWxk+iz5XbMNLsauXi0W
iez3ocCVN5tHIUKEa+zeVSJ8djKptO4kQrb6cOsmxEMy0/zWcYg/+bIKs95o
UV+Xki61MB3nw1uuiqHGCH0EbGpwOzrZ6sXVJlRfUu2i9wuEBf7NBfi+IW/q
n2bh8UOR+X0pGj9pbzE/lzDOn7eHT576itCpxPdcCarfkCIpnoP406P1juy5
7SRYKemzynU34k172y23UP9SwsB2WAfZ+7a29Wu1/1FuautsqK3rIT9PLX5r
vut6/lPlJG/vV8vJ+oGnFLdbLMQZAoI10Lha0ViYaInG0SWfc/Q1x6Cz/pPu
wn0jEGYTzj7oPwi+Aaxqj5yGIdWbUVNLsh28tp25lyn0EPhGVwnsFs4AT4EX
l5x8o0Bk5ZK0bcJXILf6wvGoDQawrW5n3aEeYxiAAytOMytAiF08x1w+AaKK
BW/eVfzv87+T65/k648oPQ+156Q2D0xtPne+fipK7RzJZcz6IoUB09ECsV4G
ArhPWm7gtVaEhRPT1ufOonExhs/dgkYIpN7tx6ZEbGA5xwX6wJsGcMH42Rv6
oiSIzzA8EpuSDYbsK04MN+fBw4vVwzd86mH1LKmAb30XrGWqzaXVHwN7moXB
U6xjwEx3X0uglAhhzufVNfuI8Mnjk88S3P+uudDJA/GnZvspsWktyvnNfhzf
3XI8FF8v9J0lsRPXMzeGsL1MxtevtxmQCMj+eh13YEoGYSBYFZij8yOnvvPh
emlKfpa24k/aPeXKvB+PM/0uE1Z6DaH2WMQjfB2L4OHOW81yJJjWb93QegRf
t15UaoTkzZ+90YzzcoDqZhP8/mlm3YMqv+uXP9on9//+OD9HQU+i5tcmr/dn
/dq/Wk7ydv4uOcnb+9Vy8mblvcTnowO7WUKOqZLA0axic7AvGpdnDTCvmWE4
MSNhFcg1CEvHJp6+H+qFofYBnuVfhuD7WvrKFdXNcNVq4o1TXzoU8dxQqFh4
FfieRDDyh5+CjxEWdkKOJ8GKxfRoRrMmmETHnMuINYQ9V7/2F59Uhx11nCIF
0ipQ0+VjldU0/7xo5Eitv1O7/oOXyOdNqfEMuf5JiT//2/LHKeUSX5wXRecf
V1iZ6xOg+uhd4TiSInxaPvBqRwMBXtK98LEs1If3bzWft/KfAW82M4YuvjDg
0XDOGjDNBM0ta2KULuWDUIUT7SKVYvAIaZv+MPoSEr7w5fE79cLy3g/3g7nG
YPl5lQyrk2MQHL9I8nkmEZ5vilhp/Z4Ijz/yT3kgPa4g2P8Lvv5IPPPqXtrf
/f+U1vkEf0gZxP088apV2/B9NA82SHWcRzypaLG70R3x5rGEh0m5CK37r+92
x/Nd9gm+x/fXNGbweqz0k3YHNxQ/xjFlwQIffL6Uf1rdD/eTW6oEqUkh/XJ9
l33WNnRsRHs0VBW1p3WtcBrXd4d3T2vj82fKT+5q/iy+iJwPKM37UbNvyev/
0XrU2vurclL6Tr9aTvL2frWco2JJFfh62dq5xP0fEH+ahs+Z+nvh+2P57rpo
NgJrEnOSCI2DsG5XMVemcR/01bOeYckaAnvSqkz5T21w0o5TjNuwAM7z3DwU
cP46yJWPXaPbFwrrxo6e9XoSAHrXteP6Jjxhcyykrm42h5zX594IyxiAiqxR
3blnSmB+ZJ1FvQx1Ppmv/knOI+TtktejtP6IvDx5e9Tyx5Hb7796/yVqcQjk
5/XXheQfR7hZTlnXAaEQR8GYJcKr8vfeCVtiIMq/cWcIss8VtAwey9hg8O7I
rbm3dhi8Vzh2Lvk4Bil+z5bFo+trilf6r6nDQI+GKVm1mgCKH28L6FioQkBS
yVWJdGsoPhEr8ETVG+55e6oTza/D8k9dk485MyCTdunQ2ldlYJbqJbWp4SlI
rh+UKeysgl0uaa00s22Q0Ko9XXy5D6Jad67VfTIGDh2zVcy3x0Bs7tDb0m4i
0LCpPbb4QoQe5lQRdtwOfnm5shXx59GvsRfof6J3kP/nqSddTuHrTJ43VFSf
QKjfP3IPX2ci1EAb4I/Qcibv+QjCT2f82/A4yov7nsbjcUkRZyt+y6tG3m7e
TB0nfj4hfqs/HjfEe1s9De9Hp1fFnxJE+maIRwlNIIEEUieIw4fRsZ1e1vd2
1P63G3WH8H1CBcrvfVL+idzk9iO5vkQuBzV7k7zeX7WLf5Wc5O38XXJSu89f
lVPZ1zQZn/9sfHFVyQhfp3QqIrrLkQTOdY8TdjiOQtK2oEfeFsMwd7GqYYxj
CHRbhjTYZ4chZ3O2hf69dnC4oS5Et6wcHkfzDt8OvgPC9234rDZkgdBhp1PH
MlNg4Iz15c2BAeAS21ftfNcI5u5XZNVX64B8Jd/qrboEiPgwd7p7YP48Qg0p
8Qm1uB9Kx5SQkv1Onr+Dkv/9r/InpfhYSs9pYOjYdxLh/TVnz0shNFI5ORyE
0LZBmdjtiMF6xjrlD54YyHhaRR43xYA46b/ikDQGiyyJYfRqGOzOsnhzHF1P
cU88V3EHA+YB8YPGnKqwzsjqke2Vw2DwmGdyt4wtbAybpDfQcANR3W01DHJh
wJ4Rue9bdDDAvtqmfs8M2NHvvsI4tABOlCbHRiVnA3tasgzb9Wqw7sv4ftqo
CwquGJ6+AWNwIOdSDoP2GCyGiuXCNUQ4szSm/j4NCeJOsEW0o//0Saem2FXE
n9Vri/NX/KRfkesLr5jCenF0t1y5H+e9jsQVmvg86HfB7HwrnFfr1xnh8UEf
lkyz4OVm1TnCcWxXHrf8Wbt1d3lU8XZE2x924/sy3T0l1orz5/592xzwPHX0
viWsoggTl/EVNyCEthvL8H31IqaXSOB5klJXvSnB7Xdq60Op6UvU4irJ6/3V
uMpfJSelecVfLSd5e79azuFhbzl8Hqc5Se3VEWS/FLwcCBA1Q+O6nyQbdI6B
dmCSi7/6KJiZjAQp3RsCA597xoqdw7CSv1fu1bbX0IjRhZp11EMUq2biYf9S
2LJG6312/B0IrQ7RZUE8OvrQku2mlRWsCeSYUOQ5AfvSTxQ4zB6BNhP2Odpy
VdhrPyTrqv5/t/8SOS+R8yel9qj53z1/cfwSef6jP7p/yBqFcyWGCFMHunjf
Itz42Y2FG+GTFHnzRnkMrHaJlb9mRby4U7zz1hEMpE7erPTMwiBb90WvdwQG
GZt4NPzZMQioPl+az4KB2+ZhBrmzBLj7RY9pSekRuHk4zCJT3xjqPWT2bE3h
g6n9k/1XVM9DUfbyMHvOAKhPCKStqLkLZivlGgpOlsMVqa66nX0lcE794QPf
HU3A+iRHUuprF5Ts0POebh2Ds+lPJXNtxkDEUV/dZ4wIpUsEO6tmiGBaxdK9
AvHnq21nyp4i/rQ5Mz2+7Hf/NaX4JRuRI3twbBE5vRD3p+++Ar/514nikkW4
XuqNKX/A7fC2PY924XGTN+OMfsvj3nYkE/tZuwVebLJ4ufWZ+ZN43KdY2a1Q
3M4vqbayeaaB+HmzTpgA6k86CxiW6yDeZFr+tRX3N/m4bZzFebu2enms5u/6
5Xzjgsjz+VDiA/L6881rSUk/+9VyUvKX/2o5ydv71XJ2rg2Ux8fNtclRbxuQ
/a6nttTOzZsEpXQCNP1KIwDBYqe3xwyC9oNVrq9u9oFq2cS9UNFhEOvf5sBo
2go0Wh+MS+iLIWTJnAPznZsQHvuKPW5VEMiOc6wayPID1hF7uR1HtMGuNXI6
S9IQvJ9LsfPQqEGkFl29yEIMrKPzzzdm/Tr/EbV5PfLr5Lz0fZ7tkecvpqR/
/rvkj9u3aHXuCoQtM7I2vcgef2XtIH3gGAZx7E/afSNUYCPjs9WOOgi9zpfm
XCWA+eemtXONqmCvu5L75CQBos9E2Vqaq8D3a9uAYTkBDkbfZCv8pAZXzhYV
71dTBI6vmy4HpCmAYLdD9L5yCai/DSSTAHeQquw0exB3HhY3kJqdVqXDiLDP
zgzDXGBX+3S7bXk6BAcx8axhfgpB9qpbpb93wlh9wFMNr1HgbNq6y+v2KBx+
fmuthx4RBKPutuUWEsEjiH5zH7KLb1pff+2vT4ITJYvt8fV15HxJqZ9Q6w/k
7VBqN+2kgg2OKR5zMziPfl/f/ww/5nDi2Y3PDxiXfBjH46Duz7Yp4Xk0zhIt
PuLlYowbf9NnLXYOmvxMDnI+oPYclMqTH//qvGz/KXJS+q6/Ss61i1ba4vz5
LHGBTzfiz35dvUNciD/92QzGGbAR4Ny0hJ2/fBCCX0cZZVX0guCo9N5w9SHI
yEovEd3YAZtVeAU+2D6EHZrybOf1M0A8r0r3xdUQCJEfpT+VdhGCbghGb9hg
B8ybC4smT5tDcPRDLHirDgjdu5Wi4agMpRrPE2AjdT6hpE9S4kdKfESJP2nI
+JOSXf+j3r9b/jjNbDc2HDmUzFbbITx1T9nMBuH1pMRD+gjf8zC8a0R41Xvs
yqw5BpPbD3oyWmBwo5cr7MMuAtw6KMu8sVANVm2UyO6o0oBiDQF5+oPqsMPQ
XbVCURUa1Gcv2aWrwRx/h5bvXU046HH22x1TTYDrT3lOCalDgpHZ8dndViBX
M5DyctwJ7Lsm2za0x8M+sY87+WzT4eE9syLXdfegjK9QIlbpEfQ0TNHFb3wI
fRJf7vHtawLDUnGBO7qvgIcxQPL07jE4vzZS5MXNUVA3WO3X6EcE+ibh+JlU
pIe+N/zIjpEgmqXSiMWABKNj2Tce/SR+iZofgZqdR8kO/nHeeo3zb/vL05o/
+W3fz4Fzc7/lBdnS8eU5rsfW2rMdxPXbg7eySnE9k+FpDODXjRY2n8RxiTqd
4c/k+J/9/p9lvxuF3vGXRVgUvIZJSI0E8aD1yMyTBKkKia/dr4xAho2l3I7Z
QegW8l+eeG4AnEKuz0woDoPrpNQXgYZW8N6tFTYuVwwp4pGebh458CFm2ERn
ZwpMPUoMDuuMgqtnzCrO2foBy6vQxK30BsD93JM7ZJU2jPVWMZeEYLDz0s5N
mr2UeYNc3yJHcn2UlgofUYqXXEh2TMl+/1GP2vrN01T2r/vV/Knh3rHeBGGI
WLVRBkLvjbLH+y2RHX7PL8ffDAPu6S5nR8Sbd7Evp5acwGDgrXrie3cMGttV
xBfsJoCZu73HmLo66Lyz7Nfn1gT92y/ynV+rQxzn9ZvD2gSovLjjwqspNbj3
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
kDHUG779eP2YFzx22cp1dm80XG68tuXK1wQQ1vv2dT70DijL8fkOY3dBj3CG
zc64CbL6OJKyNBrA7/5s2kO6HsBK0xPOXO4DhvAPlcwniFBqMUmeciKDbawD
31goBvOwh7cY8TRcaLUyGdnBWqv2I/Y43Ggtk0o3wyHSr8G6BunSPuZDRz8i
Sxs/rxWG+Gr2gSNEaYSXPOe7tlPzC4cPxW73RnbPrHYq9TjL2Gu5KcIp5365
OOp73+lcG3SpeKX6pvbiBkXqOqMKSwTCO9F1X0edEV/VsRRMOsWDwxXO5tiM
SQxWiELIxwEMXmw7bVmJdPKrToxbZR4DwR3PdPZuwIE9wXPjXcQThSs3fdqp
jq6vedNiPdLpp9kPXz2FrrPLYn8gtR6U1NMVa6n5TwO/byjtR8cl5QGO1Hzv
5vL1vK5ovgiVstmw3AaH1MHLb6zkcDi804fbgBGDLU8SlxdEU+DuQENamTUZ
8i5op9aqUIDZirvdQ5wIkVOhX76tJoI7G8czdt4eCHyZkdMd3wvWQY8kMJV3
cNv3gvDxotcwMUq023axDMQlZO1WXTWFN+wOajnm0TBvvE84LcgJnCtpqgK2
2YKiVqvGM3ZN8CS+/CIdqw2Z3xT2Ss0QoGnH48PTXkjX2JXVWLgi3uKUZURA
z1lw7tfGYLu/51VL+dFifr4YLv1qXNBSeLIYn/y/1c//rR/3x/1c+Pli/VwM
pxfr52L9XthP9W3tt+URT+jQTZbIRPxhw8Qw6wnkB9oHKzSdIgiwjt3689VU
AjS8snh5YJUWSJof/ikhpQnte6SIRl16sCV4fJO7rxEk3X18RGmtHRi+Sb0i
luwEKm+ESu/eDIG7fNYirsHZINDN+/25ZAHw3Glm+dHZDPJOqXZjObVwyjPI
pvtuL7Bg2glGPzsh7MuIb1fMMCxb1z6RpU2Cm6ysfa0/KfBs28i09f9p78vD
qfrevpPQRCokjVSKRlKo9MmQ2dnnmMfMEplnJQpNimSmDIUmKqkMKSLRoAxF
E9Jgbi4J1bs916/rud7ze87vHKrv9/u8b3/d19577bU+6173+ux7DXvdQl14
5FU+t24WyXOHFma6D8YD/Vgnmq7VhQLH0/miJM/kzF1gakzKoJf+zhLkc0FZ
LY5ocrzrOI44NJHkp4SFm1MHZckpd/3B8+2XNDhZDa5D7ZlqIjS4fm0/zc96
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
MG33JeoOsr15pLxOq5HtG3f4ZECpH5n/ySzuApJ/JHbm5VeS9x9fU95+fjA+
t6lrb+b/gHO48byY6ZP+OSN9/pAP3bSOVg7um1J2H3fMgsCSTP/4kq2kHv0t
aKs/EBCeka1iRfrbQc1HJ81WJVCmxmG6ikKg8+vZ+C4aFVV5/SbsyVSsiBw7
/ehLAi3lj7ZPvkXgQ4OPtb4+FRelo7yLu6iw7j6UKc5ORUHA3eMB6wjsvlTl
f3Q2FZY1GwJEKqgYKVnDr7eQisZTkfMFUiho+BRTFeNM6uWlHc8KMSpcKtX0
F3BS4TO5rG7aQhL31dkrPMh8JN77N+wn/ZcLk+uX3yPrIfaVj4Pb/t/HjT9r
x4z0yawdmemfVZzDbfcf+f5d8eOOn/YWGVxvSPE+77OWbJ+KLB+JYnLcZ7Om
f029CYHxXQcOpu0jgImuQkcKCeTV+nedPEZBdafIrooEA7yIFTj0vcEOE+65
fpwp4ICxBRQjjntmGJ/Vav02mYYumser547rUFPt5THf7k/8OFb9KkbprKRG
vRzcF3R5J9uuEFvSz0o8Yjw4zznpqmVw+SQq4i5e7gq4S4W0RurptGtUlOxJ
43Qt04TaaNkvi6y1IFRYWborThtvOg/MDxTQRay6zZRH6toIaE+suDqWQMLd
rv4NfhTsWi2a1XmdwME7PW6Fawi817osKCNJ+rl3xe99I/vzozfFgYokj5Y8
uSKitJH19c2f1edQ9f2h3HDxHFI+0n0rLONAwGVSbi2vNXldXeS3hORJ+5TZ
0uLkuFfMPte0OoDAtoeZItO2kH63g20i2wKy3qeLG6zJ+s7jKD+av51AnxVv
Wn8W6d8356/RJPlN6EzV/DQ1sh91qn/oOkhgan/KOf8KAoXht/9rfJDQqch3
h/SDY41sTt0m/ce6T12+J0m93uvMtpPcS8CnyHRlhjLJ5wN3KcYkn3IpqJYt
jSD7X+OJfcE7Sf86ZoC4SvrV3TYzONeQ+eW0TmiNsP93v+hn9c6q/LP+/n/f
D11dOY+TtKsmw4EyMZI3zd4dKm4j7Wj+1uwZ0TdI3rR4JBlK2sPrcVyx48jn
dny82p2TtbBftcqXs1wfb/J9dyY3WsMhSzj6Oa8Nmt2iJjz1NMKM/Ozubau0
4CPCP9/52jp0KHa1Zhuzvn9puHphtn5Gn45RfvTPGUlm+bAqGeGkr/etM/VS
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
jw==
      "], {{0, 168}, {168, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{168, 168},
    PlotRange->{{0, 168}, {0, 168}}], ",", 
   GraphicsBox[{InsetBox[
      FormBox[
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
MPFb7qOhHrNNpuZxoHxEaSbeh99V+v8XXxsn9Q==
          "], {{0, 168}, {168, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag[
         "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
          Association[
           "Exif" -> Association[
             "ImageWidth" -> 218, "ImageLength" -> 226, "BitsPerSample" -> 8, 
              "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
              "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
              
              "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\n\
loop=false\nmin=1262.0\nmax=14462.0", 
              "StripOffsets" -> {650, 4138, 7626, 11114, 14602, 18090, 21578, 
               25066, 28554, 32042, 35530, 39018, 42506, 45994, 49482}, 
              "SamplesPerPixel" -> 1, "RowsPerStrip" -> 16, 
              "StripByteCounts" -> {3488, 3488, 3488, 3488, 3488, 3488, 3488, 
               3488, 3488, 3488, 3488, 3488, 3488, 3488, 436}, "XResolution" -> 
              72, "YResolution" -> 72, "PlanarConfiguration" -> 2, 
              "ResolutionUnit" -> "inch", "Software" -> 
              "Created with the Wolfram Language for Students - Personal Use \
Only : www.wolfram.com", "DateTime" -> 
              DateObject[{2018, 3, 10, 1, 59, 49.}, "Instant", "Gregorian", 
                2.], "Artist" -> 
              "Created with the Wolfram Language for Students - Personal Use \
Only : www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{168, 168},
        PlotRange->{{0, 168}, {0, 168}}],
       TraditionalForm], {0, 0}, {0, 0}, {168, 168}], 
     GraphicsComplexBox[CompressedData["
1:eJx1mVty1DAQRQUrCTtpQshjCAkDIY/JPFxU8c0Wein5ZBlaGgXRvVSfsfPj
OtZVWx5Lut3Kux+/vv5821r7/aa1v9fXvw/x75KPUbiB8wHt4H6P9u+V4xva
B6fiP4EfKzewxpMYT2I8ifEkxpML4+nrwWejfVPZ4z2b1/cvo9/HcX9T2fHE
z5UT7YonDnAD5+24ng/9c+UGdrzz+f4NnDfj/sXg58oBVjxxAx/F+zyu0m8r
63m5oM/r0e9yjGdb2fEGJzjYfg3+NOJcvV77tnKSoW+DU7yrrHi5oPf91Rjv
rrLjrdBP7Yy7q6x4GncHW6/feV+5s/0KrO8wvlvsKzcy9JwnfV/Z8TSvDpU7
2y8qc57HobLjLc1rrqNDZcXTuu3gBCte474inio73rrqzWOfisEnU2XFi6/Q
D/Y+PDimyorXoRfbN77Nc56O+3ev12mqrOfFXe1vHv37XY3X2f59nvP9uN7j
/e7xfvK908ru/1D19lGN/3Ge9f3oy/ZFPQ96secPfFXc6Lv0NX0P8aGy5++S
rynepurtg2D6XoMver0N9vpVO32N/emzGh/i2VfI55X1vA69OMDaHzp9eFv1
Yu1/Ad+zj2n/g94+tkM7fU7jgd4+Bpbvdfrobv7KOI0+J5+FPjDugC8G4nXo
zc/gFVjjwXf27w6WL1ov34U+MC/F8s1APM5j86bykc9pPFyHg+OpMn3LPrng
S9J3xDNz34HvON9b2Oca9z34juKdQG+fwr7a4TuNPrTgc/KV/lA5wQHW8yb4
3gTfnDCeCeNxf7DGF/A7vqfaTxCnQc/f1d9pXTmQf/SFfCSgD+ZDzF84r/ZV
z3zM+y+Z+eFN5UT+6XWDfNT7Ixn5r/SBfaRB35B/e98ksz5YgbXPQc96pEHf
sC/bZ8iszy7BymOhp8/2TdV3+Hhsqj7g684rwM4zn6peHFivzkOVh51VTulH
XvcCdvsd2rHujvLcde3PPFp5doCZpwd4qW5o2E8b64gb6FmnYL8XJ/3tUDng
dwn2OoQfel7T//eVA/lAgr2ukC805COep7vKR+cKyJ868ynUfz4n0HcBd+af
28qBfLSTsS4C+XMHB/LXo3WzqdxYHyH/7+CGeilZP6H+UDzqVQ811EfyUddL
j/N61U/Su57Se6hu03uyTlU7696P0Ou7ss5eg9V+Mc/qnzxHoJ7nGJdVf3RO
clX1ifOkpH41f7VPsd8n6HjOdV31R+dsn6HnOeFt1fPckueOgXNUs+pDfGex
z2kXznWtx3rw/OY58WllnnPbhwYzjzwBe59H3pvIaxvybNfratd+gLzfeTjq
7Q59oJ523SI96pAOvfdD1Ksd9WqwflU81Gkdeu3fwXpy4X7gyjo2oW98L4wr
UA+yjk/Uezwn8O/Kegy/c+IcxfqleTL0zvsxbziPOvIL1U+B/p6XmKeBfMd1
gOIhv/L/Z8TIt6R/+d/+B/V88hM=
      "], FilledCurveBox[{{Line[CompressedData["
1:eJwt0+VSFkAYBtDPbgmREBQ+ukMapAQkFAO7FbtAHcUCuxXExERnzFvS/96H
Z2f8cWaf2Zmd3Xf33ejAUP/gtEgk8pcwTmcBC5nBTBaxmFnMJoZY5jCXOOJZ
SiKppBElkzzyySKbAgopoZRKqqiljkZW0UIrXXSzlnVsop+VDlzGVnkbu9nD
fg5wiMMc4zgnOMlqa1o4Iw+yRm5nSD7LOc7Ta66Li/Jw2F/upocOOmmljSaa
aaCRep5ZMxFqkWupo5oaKqminApKKKWIYgooJI98csgli2yiZJJOBstZQSpp
JJPCV6ZIJIkEfjvTn/Bechzx/OIHMcTyk2985zNf+Mgn3vOBt7zjDZO84jUv
eMkEzxkPd8FTxnjMEx7yiPs84C73uM0dbnKL69xghFGuco3LXGGYS1wIb8Up
tZ3mCEc5yAB72cdOdrGdHWxmCxvYSB/r6Qk9QGfoEdrpoC30EE00U08D1dRQ
EXqTMsopopgcckkngxSWkUQyS0hgHvP//8d/chdG1A==
          "]]}, {Line[{29, 30, 282, 339, 29}]}, {Line[CompressedData["
1:eJwt0mdTDwAABvB/SkpX38H3yeqSWZIRounO1pTtzoqsbCKaCJnJyrqru7qT
VaSUGRlZvy4vfu+f57lnVFJaTGpQIBC4wCKyeMJT2njOM17ygg7aec0r3tBJ
N1308JZ39PKB93ziI3185itf+EY/P/jOAD/5zS/+8oegwZAEM4zhhDCCUMIJ
I4KRRBFJNGMYzTjGEsN4JhDLROKYzCSmMoV4pjGdBGaQyEySmM0skpnDPOaS
wnwWsoA0BkfOIJ0sMlmh0nJyyCaPXApZzXrWsZlNbGcbu9jJXvZwgBKOcJgT
HKeMU1RQTg3V1HKeOi5xjavc4Dq3aOAed3nMI1pp4SEPaKaJ+zRyh9vcpJ4r
XObi/3+d4yxVVHKG05yklGMc5RAH2c8+dlNMETvYyhY2soG1rKGAfFaxkmUs
ZQmLA0P//gfkzHDm
          "]]}, {Line[{210, 209, 268, 417, 210}]}, {
        Line[{214, 213, 275, 418, 214}]}}]]},
    DefaultBaseStyle->{"Graphics", 
      RGBColor[1, 0, 0], 
      FaceForm[
       Opacity[0.2]], 
      Thickness[0.006], 
      PointSize[0.018], 
      EdgeForm[{
        Thickness[0.004], 
        RGBColor[1, 0, 0]}]},
    ImageSizeRaw->{168, 168},
    Method->{Automatic, "GridLinesInFront" -> True},
    PlotRange->{{0, 168}, {0, 168}},
    PlotRangePadding->None]}], "}"}]], "Output",
 CellChangeTimes->{{3.7344275286968293`*^9, 3.7344275499844403`*^9}, {
   3.734427636112464*^9, 3.73442764637676*^9}, {3.7344277016792603`*^9, 
   3.734427716337242*^9}, 3.73442851080697*^9, 3.734501073716978*^9, {
   3.734501114968526*^9, 3.7345011187375493`*^9}, {3.734501277327305*^9, 
   3.7345013065249496`*^9}, {3.734502014518385*^9, 3.734502031857496*^9}, 
   3.734502062288424*^9, {3.7345024942256384`*^9, 3.7345025528716016`*^9}, {
   3.7345026251327887`*^9, 3.734502665117121*^9}, {3.7345027391662264`*^9, 
   3.734502740728381*^9}, {3.734502780454027*^9, 3.734502793710281*^9}, {
   3.7345029409253917`*^9, 3.734502964106038*^9}, 3.734503255601392*^9, {
   3.734503301866028*^9, 3.7345033072167253`*^9}, {3.7345034027735453`*^9, 
   3.7345034203070126`*^9}, {3.7345042221886926`*^9, 3.734504243655456*^9}, 
   3.734504278327917*^9, {3.734504475256804*^9, 3.7345045152103386`*^9}, {
   3.734504811610355*^9, 3.7345048371249523`*^9}, {3.7345050079697657`*^9, 
   3.7345050360314317`*^9}, {3.734505362504715*^9, 3.734505420494813*^9}, 
   3.7345054551420803`*^9, {3.73450548860542*^9, 3.7345055066711435`*^9}, {
   3.734506820583762*^9, 3.73450682880363*^9}, {3.7345068590269985`*^9, 
   3.7345068868198895`*^9}, 3.734507131918925*^9, 3.7345071677180133`*^9, {
   3.7345074566643224`*^9, 3.734507465227092*^9}, {3.7345082372896457`*^9, 
   3.734508256039448*^9}, 3.7345085447447634`*^9, 3.7345086326214314`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"854f81f9-dce1-466f-9d73-91fa6a357dd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measureModelAccuracy", "[", 
  RowBox[{"nNetTrained", ",", 
   RowBox[{"First", "@", "hidden"}], ",", 
   RowBox[{"Last", "@", "hidden"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.734501855417742*^9, 3.7345018902995343`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"91633cf5-1958-4e9d-b144-6a7f9979e26a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9649628906250001`", ",", 
   TagBox[GridBox[{
      {"1", "0.9403125`"},
      {"2", "0.988359375`"},
      {"3", "0.96546875`"},
      {"4", "0.9876171875`"},
      {"5", "0.9676171875`"},
      {"6", "0.967265625`"},
      {"7", "0.96328125`"},
      {"8", "0.9685546875`"},
      {"9", "0.97359375`"},
      {"10", "0.926484375`"},
      {"11", "0.9521484375`"},
      {"12", "0.9576953125`"},
      {"13", "0.960234375`"},
      {"14", "0.96671875`"},
      {"15", "0.9873046875`"},
      {"16", "0.9756640625`"},
      {"17", "0.95734375`"},
      {"18", "0.97140625`"},
      {"19", "0.9700390625`"},
      {"20", "0.9521484375`"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7345018909101286`*^9, 3.734501957652155*^9, 3.7345025413359237`*^9, 
   3.73450262719427*^9, 3.7345026670622945`*^9, 3.734502797576563*^9, {
   3.7345029448167405`*^9, 3.7345029698112097`*^9}, {3.7345034062385015`*^9, 
   3.7345034229207697`*^9}, 3.734504247416438*^9, 3.734504283340578*^9, 
   3.734504497432866*^9, 3.7345048413635063`*^9, {3.734505018332336*^9, 
   3.734505042540975*^9}, 3.7345054596559196`*^9, 3.734506831338338*^9, 
   3.7345071356481028`*^9, 3.7345071707208586`*^9, 3.7345074684566545`*^9, 
   3.7345082395438175`*^9, 3.73450855419386*^9, 3.7345086349818883`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"884d5b64-c9f8-410f-a3cb-555781c59a23"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 705, 17, 84, "Input",ExpressionUUID->"764bc3ad-cfce-4f4d-9183-c9c128d4b2b7"],
Cell[CellGroupData[{
Cell[1288, 41, 301, 5, 35, "Input",ExpressionUUID->"5441fa38-150b-4261-ac25-09501af2c5e9"],
Cell[1592, 48, 239043, 4651, 104, "Output",ExpressionUUID->"a5cf08b6-b979-421e-96a7-60bb8ad0cbdf"]
}, Open  ]],
Cell[240650, 4702, 469, 10, 35, "Input",ExpressionUUID->"7891cbda-b487-462d-94b5-249297a92d6c"],
Cell[CellGroupData[{
Cell[241144, 4716, 919, 18, 35, "Input",ExpressionUUID->"a0b0f955-e14c-4f09-b35a-90d83cb33965"],
Cell[242066, 4736, 6595, 130, 190, "Output",ExpressionUUID->"74ffe01f-2f05-4c87-8111-6e867c68be5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248698, 4871, 232, 3, 35, "Input",ExpressionUUID->"ea318cd3-342d-4270-afc4-a1d80932cd76"],
Cell[248933, 4876, 4916, 93, 272, "Output",ExpressionUUID->"f5428694-2e2d-4c51-9210-3744d19ba050"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253886, 4974, 258, 4, 35, "Input",ExpressionUUID->"9a0c1265-49d5-4df8-a747-70708854ccf4"],
Cell[254147, 4980, 238921, 4649, 104, "Output",ExpressionUUID->"f9d503e3-8d29-4092-b0f2-da1d0473aadf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[493105, 9634, 735, 12, 35, "Input",ExpressionUUID->"dc004a3a-02b4-41b9-b12a-68ad236add4c"],
Cell[493843, 9648, 30431, 502, 231, "Output",ExpressionUUID->"d3820418-7780-4454-8b98-bd0e9aeb3f8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524311, 10155, 1124, 23, 35, "Input",ExpressionUUID->"1efc66cb-cc20-43db-8f7e-a77a260498b8"],
Cell[525438, 10180, 211338, 3485, 233, "Output",ExpressionUUID->"830d71da-aaa0-4e80-90c3-332ea9de5c40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[736813, 13670, 328, 6, 35, "Input",ExpressionUUID->"5896264e-4c99-470b-94b1-be892b1f72df"],
Cell[737144, 13678, 1829, 46, 436, "Output",ExpressionUUID->"896864d3-284f-4ae7-9136-296ddc85472c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[739010, 13729, 168, 3, 83, "Section",ExpressionUUID->"5b7f071b-b347-419f-80ab-22f68697062a"],
Cell[CellGroupData[{
Cell[739203, 13736, 453, 9, 35, "Input",ExpressionUUID->"45219e52-f95e-4e78-8c6e-e245c46c110b"],
Cell[739659, 13747, 10474, 185, 214, "Output",ExpressionUUID->"f8ad09b4-1e6b-4ea7-b781-e41926f17d10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[750170, 13937, 232, 3, 35, "Input",ExpressionUUID->"99a8fcac-2d06-4be0-a25d-a840743d9691"],
Cell[750405, 13942, 20510, 378, 274, "Output",ExpressionUUID->"e7200dac-a528-4cf2-b37b-b1ab6a3553ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[770952, 14325, 258, 4, 35, "Input",ExpressionUUID->"bdd9991f-bad1-4685-8d88-c707f0696e8d"],
Cell[771213, 14331, 238971, 4650, 104, "Output",ExpressionUUID->"17c8158d-6502-449f-8cfa-f280eeda7d68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1010221, 18986, 735, 12, 35, "Input",ExpressionUUID->"0fc56d5a-bbdf-4e7b-85b4-402fcbe3b626"],
Cell[1010959, 19000, 30483, 503, 231, "Output",ExpressionUUID->"483e62e5-cbd8-483a-a66e-8731a86e20cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1041479, 19508, 1124, 23, 35, "Input",ExpressionUUID->"4b0b9e24-9be1-4ed6-baab-90ca007463e0"],
Cell[1042606, 19533, 192900, 3182, 233, "Output",ExpressionUUID->"854f81f9-dce1-466f-9d73-91fa6a357dd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1235543, 22720, 328, 6, 35, "Input",ExpressionUUID->"91633cf5-1958-4e9d-b144-6a7f9979e26a"],
Cell[1235874, 22728, 1875, 46, 436, "Output",ExpressionUUID->"884d5b64-c9f8-410f-a3cb-555781c59a23"]
}, Open  ]]
}, Open  ]]
}
]
*)

