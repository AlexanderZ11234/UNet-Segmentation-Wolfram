(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    632805,      11516]
NotebookOptionsPosition[    630443,      11468]
NotebookOutlinePosition[    630817,      11484]
CellTagsIndexPosition[    630774,      11481]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
  "<<", "\"\<C:\\\\Users\\\\aliha\\\\Desktop\\\\UNET\\\\UNET_modified.m\>\""}]\
, ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "dirimg", "=", 
    "\"\<C:\\\\Users\\\\aliha\\\\Downloads\\\\fabrice-ali\\\\deeplearning\\\\\
data\\\\train\\\\train_images_8bit\>\""}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
  "dirmasks", "=", 
   "\"\<C:\\\\Users\\\\aliha\\\\Downloads\\\\fabrice-ali\\\\deeplearning\\\\\
data\\\\train\\\\train_masks\>\""}], ";"}]}], "Input",
 CellChangeTimes->{{3.734426692086425*^9, 3.734426697739458*^9}, {
   3.734500346200738*^9, 3.734500365651823*^9}, 3.734505229293367*^9, {
   3.7345105681092463`*^9, 3.7345105697544174`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"764bc3ad-cfce-4f4d-9183-c9c128d4b2b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"X", ",", "Y"}], "}"}], "=", 
   RowBox[{"dataPrep", "[", 
    RowBox[{"dirimg", ",", "dirmasks"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.734511753938526*^9, 3.734511771569413*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"de4c9c1c-1216-4a38-bdd0-edaecb301b82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNet", "=", "UNET"}]], "Input",
 CellChangeTimes->{{3.734426831135685*^9, 3.7344268602390823`*^9}, {
  3.734427046151739*^9, 3.7344270550062876`*^9}, {3.734427108752219*^9, 
  3.734427111030278*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"5441fa38-150b-4261-ac25-09501af2c5e9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["10", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}}], 
                    LineBox[CompressedData["
1:eJwt1HtMU3cUB/BSoNDStSDlUVuBtgbYpoBjOsAD4oIgjEwHYQERhemIRFae
c0N02UDCwwljkMy5QXnU4gAVkIeUIqe0ZbBhDAhYyYgONoShIs9Jlz24d79v
zs395/5++Zzzu/dKPkiL+pDJYDCiNi/q/n+2IzvrYd9N/gCM+55ZMj2RYVD+
N8s+awbYEcWqlt+VYe5K82tzDwzAim+xjG+RYa9OeGq8ywBJ72Z74lcyNF+d
anxZaYB99AIZHr6wsfxemgEUq+GbJcO67NTgX0MN8EVD/IpOKkOTfk+FSmSA
2ZBCJndDinEfxy7UPtPDMB0pagpGDt7X6GGFWq6QojR0/ZqiRA/iHzM2S4pF
LBE7NVYPB0KoSHFxYF+Kn7seUrWOmyXFmMKTQxarOqgMmq8ImpdgT1jxqyNa
HWh6qEhQan2juKpMB7/5lc74lUqwcHB0PiVBB9zORJvORAk+L/ozfM/rOrhL
e9wwwCTP4xX1A92Owg1r1BXTkzH9xOOGVrm3326Q9ROPG8r3TtVlLWmJxw3H
/jIzD+7Tguf5UY/zo64YoHE/wb2khU8/oeKKtefe0RmPaGGQ2k7silaB6bKr
nlpwojdwQfnflfkZ6whXvqWyDdVyriY8GmGugmpwG7p67xI7ShD8qXZmxMh7
1PRSP9UHJUVUxPjL8bXbCTl9YMzbuVliVD0OylkX9BGPCDOTivzLWu4Qjwj3
TY9seETeIR4Rck+I1PikF5xpz1Y0zpw8G5ffSzxCzByIXmAHamCe9ggxKKyq
qc7YA/R4Z5yRMzh7em92DxTTHmc0HvTZMcbvgYe0xxmVQzlPU5vUxOOE6RG6
ZsswNfE4IfzM/ah6uhvocYudkBP5/s63Pusm83HEB8OKZ/eE3cTjgOk3S499
fr+LeBwQfIwuwrQuMh8Bclolj1o5XcQjwIldpxURqk7iEWB9W/vxmf2dxGOP
ab7/uJ6b6iAee4T2sMeCnA7isUf27vKa64IO4tmCEx2TiaEt7cRjh/LLQyPr
KbfgD9pjhwFC+6/LLG8Rjy1aXzka5VnbRs7LFse3qrZooY2cly3WfLc4Gmds
hcMm5SGTko9ysX/FclYrvHhOhYcBVXnRF/mtQG/nx0Mrl2H77U0t4EVv8AqO
VTuMaUJbwJeODRqZ7JJJxg0Y8aAa5GCGxfccrt91yKRfaDbasLwvBqY1g70d
FTYqrfpt0lRNQH39lvHWGMSO+bJmqpF4rHCCM8cdFTTCIu1hYTo395J55A/E
w0IOj8fbnX+NeCyxnl9bmqxuIN+7BYLdm/zLSypIfjq9dk9kgUNRzgUJXiow
JZW/8SLbHPcLFL9HnLkKF6hxGJlYHzPokzikBItDXbOFB5i44FiZXOWhhLMD
Xsf+1ZihSyyzkFleT+ZtRuZdD/TjPzEw+MhAYUhBHTT7eAQIEhnoLRKfktjW
AfkhotVRga+7qhb+A7dkcUs=
                    "]], 
                    
                    LineBox[{{-10., 
                    6.123233995736766*^-16}, {-9., -0.9999999999999994}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBwAGIQDQFKB37/B4H3+68al3389VzxwC8oXyeIbV7eWUW4
PFv0BtboDYoH/kD5SX4lGgcmIPj2YA0I/oIvnvO/eCL4TcujPx9WQvCfubQz
8fxUgPPPngEBBB+sfb4C3D0yxwuBCCHv6gICCH7OQTEgQvA1ai+p116Sh/Mr
ykEAwT8BMk4GwRcHGyAH58+aCQKycP6LyXYvJ9vJwt1j2ffYou+xDFy+qwME
EPwbTbpAJIPmHmk090ijuQfBlwC7R+rAPxT3SMLlX4LdIwl3jwXYPRJw+U6w
eyQO/IXyb4LdI4HmHnE094jD7QMHt4w4XD8kfMTQ3CMKl4e4RxRuHiR8RODq
Ie4ROfAfxT0iaO4RRnOPMJp7hNHcI4TmHkE4/xXYPYJo7hGAy0PiSwDuHkh8
IeQDfi3x/7WEH87/8A4E+OB8sHEWCL4e2ABeOB+Snnng/PQ3j76el+aBu+dX
4kSjDyXccPkWkPU3uODuYfHf/qzdlQsuX31ML+7/Hk40/yH4YOWnOOD8NQbq
ViIJCD4kvyP4AF8n47g=
                    "]], 
                    
                    LineBox[{{-9., -0.9999999999999994}, {-8., \
-1.9999999999999996`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQEKB/79B4P9K9LfPPp6Xv7AHyg/YgmPzd1Z8nB5
nm0J3NsS5A/8h/IPzXkR0KCIkK8Da5CD8+1fTrZ7ORnBZ/bf/qzdFcE/28nH
KvFJFs6fNRMEEPwXIO12snD3WPY9tuh7LAOX7+oAARm4e2406QIRQl6j9pJ6
7SVpOL+iHAQQ/BOFMscLZRB8iZyDYjkHpdDcIwnng71jJwl3jwXYPRJw+U6w
eyTg7rkJdo8EmnvE0dyD4B8HuwfBFwe7RwzNPaJo7hFFCx8RNPeIoLlHBM09
wmjuEUZzjzCae4Tg/DQwQPBNyj7+es4rBHfP3w0ekhW7BOHyh0C+yRGEu6dp
efTnw0oIvl2y+Pr6ewJw9V885wMRgr8CpDwVwQ+bISzLZSAA1w9Jzwg+AJgD
EF4=
                    "]], 
                    
                    LineBox[{{-8., -1.9999999999999996`}, {-7., \
-2.9999999999999996`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEyB/6DAfuBlelvHn09Lw3nRy7hsbk7C8Hn2ZbA
vS1B+gBEH8eBw3NeBDQoIuQbIkAapOB8h5eT7V5ORvBZ/Lc/a3dF8M928rFK
fJKE82fNBAEEH6zdDsG36HsMRBJwfmcHCEjA3XOzSfdGky5CXqP2knrtJXE4
v6IcBBD844UyQITgi+ccFAMiOD8NDBB8o7KPv57zIvh/N3hIVuwShfPBunNE
4e5pXB79+bASQt42WXx9/T0ROP+L53wgQvDBylMR/LAZwrJcBgg+xFwEHwCY
9RJe
                    "]], 
                    
                    LineBox[{{-7., -2.9999999999999996`}, {-6., \
-3.9999999999999996`}}], 
                    
                    LineBox[{{-6., -3.9999999999999996`}, {-5., \
-2.9999999999999996`}}], 
                    
                    LineBox[{{-5., -2.9999999999999996`}, {-4., \
-1.9999999999999998`}}], 
                    
                    LineBox[{{-4., -1.9999999999999998`}, {-3., \
-0.9999999999999998}}], 
                    
                    LineBox[{{-3., -0.9999999999999998}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    6.368163355566237*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.866666666666667, 
                    4.816944076646255*^-16}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -1.0885749325754216`*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -0.5999999999999994}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.355555555555555, -0.9999999999999994}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -1.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.222222222222222, -1.9999999999999996`}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -6.661338147750939*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -2.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.777777777777779, -2.9999999999999996`}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777803`, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -3.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -3.3999999999999995`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -2.3999999999999995`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4, -1.4}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.39999999999999986`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 6.735557395310443*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 6.123233995736766*^-16}], 
                    Offset[{12, 12}, {-10., 6.123233995736766*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-10., 6.123233995736766*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{12, 12}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_4", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., -0.9999999999999994}], 
                    Offset[{12, 12}, {-9., -0.9999999999999994}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-9., -0.9999999999999994}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., -0.9999999999999998}], 
                    Offset[{12, 12}, {-3., -0.9999999999999998}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-3., -0.9999999999999998}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_3", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -1.9999999999999996`}], 
                    Offset[{12, 12}, {-8., -1.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-8., -1.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -1.9999999999999998`}], 
                    Offset[{12, 12}, {-4., -1.9999999999999998`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-4., -1.9999999999999998`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-7., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-7., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-5., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[
                    0.4]], {-5., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -3.9999999999999996`}], 
                    Offset[{12, 12}, {-6., -3.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-6., -3.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., 6.123233995736766*^-17}], 
                    Offset[{12, 12}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-1., 6.123233995736766*^-17}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-11., 6.735557395310443*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-10., 6.123233995736766*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-9., -0.9999999999999994}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., -0.9999999999999998}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-8., -1.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-4., -1.9999999999999998`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-7., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-5., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_5\"", TraditionalForm], 
                    Offset[{0, -15}, {-6., -3.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"map\"", TraditionalForm], 
                    Offset[{0, -15}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}]}}, 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-10.4, 
                    6.368163355566237*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552225`*^-16, 
                    5.5}, {-7.866666666666667, 4.816944076646255*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736769*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, \
-0.5999999999999994}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3739009929736087`*^-14, 
                    5.5}, {-7.355555555555555, -0.9999999999999994}], {
                    0., -0.17}, Automatic, {1., 2.498001805406561*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-8.4, -1.5999999999999996`}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"40\"", 
                    "\"40\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.060851489460454*^-14, 
                    5.5}, {-6.222222222222222, -1.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., -3.747002708109917*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"40\"", 
                    "\"40\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-7.4, -2.5999999999999996`}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"20\"", 
                    "\"20\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 
                    5.5}, {-5.777777777777779, -2.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"20\"", 
                    "\"20\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-6.4, -3.5999999999999996`}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"10\"", 
                    "\"10\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-5.4, -3.3999999999999995`}], {
                    0., -0.17}, Automatic, {0.7071067811865475, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"20\"", 
                    "\"20\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-4.4, -2.3999999999999995`}], {
                    0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"40\"", 
                    "\"40\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-3.4, -1.4}], {0., -0.17}, 
                    Automatic, {0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-2.4000000000000004`, \
-0.39999999999999986`}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-9., -0.9999999999999994}, \
{-3., -0.9999999999999998}, {-8., -1.9999999999999996`}, {-4., \
-1.9999999999999998`}, {-7., -2.9999999999999996`}, {-5., \
-2.9999999999999996`}, {-6., -3.9999999999999996`}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {661., 267.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {29.000000000000004`, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {160, 160}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "enc_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "enc_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {80, 80}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "enc_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {40, 40}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "enc_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {20, 20}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "enc_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {10, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "dec_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{1024, 512, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "dec_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "dec_3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "dec_4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "map" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{1, 64, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1, 160, 160}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7344268375256786`*^9, 3.734426861138473*^9}, 
   3.734427061137633*^9, 3.734427115595419*^9, 3.734500376568697*^9, 
   3.7345004992236586`*^9, 3.734501419280098*^9, 3.7345023444974794`*^9, {
   3.7345040073868685`*^9, 3.7345040327426224`*^9}, 3.734504666075648*^9, 
   3.7345048774927464`*^9, 3.734506504055966*^9, 3.7345065973240023`*^9, {
   3.7345069465317125`*^9, 3.7345070008280783`*^9}, 3.7345079772644043`*^9, 
   3.734508100261501*^9, 3.7345105957528596`*^9, 3.7345109442611675`*^9, 
   3.7345118630264835`*^9, 3.73451460840366*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"180cd8e5-ad49-49f0-a2d2-004277eaad11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetInfo", "=", 
  RowBox[{"trainNet", "[", 
   RowBox[{"nNet", ",", 
    RowBox[{"X", "[", 
     RowBox[{"[", 
      RowBox[{";;", "300"}], "]"}], "]"}], ",", 
    RowBox[{"Y", "[", 
     RowBox[{"[", 
      RowBox[{";;", "300"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7344273022668505`*^9, 3.734427364643739*^9}, {
   3.7345005711395216`*^9, 3.734500572914296*^9}, {3.734502864997469*^9, 
   3.7345028669065466`*^9}, {3.7345030893380795`*^9, 3.734503089911604*^9}, {
   3.734503362850651*^9, 3.73450336347832*^9}, 3.7345036682234488`*^9, {
   3.734504054230184*^9, 3.734504081053206*^9}, {3.7345072114752407`*^9, 
   3.734507243779148*^9}, {3.734507307871603*^9, 3.7345073092332172`*^9}, {
   3.7345118663904295`*^9, 3.7345119047604704`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"a0b0f955-e14c-4f09-b35a-90d83cb33965"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"3.8 min\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["10", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["380", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["8", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["0.018227959548025145`", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final round error\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"0.739%\"", "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox[
                 
                 TemplateBox[{"\"Error evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw1j30s1HEcx29nniPWP9Zk0pTmhhZrWLxLU0qjQxw9nIc7nbg75ziFJUTJ
DKGNjWueYg0pfzA6E7GwPKRQm0tby8a6CpeH1sPu8/1tv/322uv9+n1/v/1x
Mr6Iy+Fw/P/d/5+Gyww886Cxza63GgM7YaRdcmzwxSqxG8Sa/jjNtI7YC99T
eofdTH8Q+2KrYNHPzp44F0gp0LVU9/4kDoDYtdq448AacSCy4o83nT3COAjq
7Dye7SDjYAwuc9r6uxmHYC070mjQbN3AuIDMFo+JymDiAT6E7mXjMzEb5MPR
3FSo4ccSD0Rg9VnRk5dDrI/EcmLNfOMDPfkoCCfmWovjiRGNgoPW5rFnWB+D
nofdLmlsj8sYD1gMf6Vh/RUM9/BcbhYROwohnUlxPPGHeq0QazY2NpZ1vwys
jsUd9VHrHCHthXEYUq0IZnWsj0dJ1T7T9hFibTw66hS3xrisTwD3wGvnkinW
i2DHdfIpt9ikXgwT99EEdS7ttWI8tnT64LOH9YmYk1ld1PFoL7wG13mTz+/q
yTtKoGqMFnxxYL0E9aNe/eIW2quTwJO97/NsZv11BO4WhWrusz4ZVb5FW2F3
yWuTUeg9N/Obu0V9Cm4PRfT1hbNeCkm1T0+mgH2/DE627pcqSmivlaHNQbrR
Uko+VI5Wz69mtn7kO+VYrTxcbrJC3iYVIc7bh75JyctTMcXXR7RZEE+motG5
YeS597aBPRRo6/ikWBglX6bArjenZucbiHUK1F6t/WjsQfvQNHBKa4wl5sSd
aTiZ2RO2vMnOV6JY5GeVY0RersS9Vm7SDRHxpBJRIxV7Bdn0fo905EfMrtfq
yZel42nCOYfmBWJdOuRLWcKuaXZ+BpYClTVVa+z/M2CfX+3/6PQOna/CeXGy
b1wGO18Fflqeoz54R/MXJEtrWg==
                    "]]}, {}}, {}}, ImageSize -> {132, 82}, Frame -> True, 
                  Axes -> None, AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, 
                  PlotRange -> {{0, 378}, {-1.8, -0.2}}, 
                  GridLines -> {{38, 76, 114, 152, 190, 228, 266, 304, 342, 
                    380}, {{-2., 
                    GrayLevel[0.9]}, {-1., 
                    GrayLevel[0.9]}, {-1.6989700043360185`, 
                    GrayLevel[0.95]}, {-1.5228787452803374`, 
                    GrayLevel[0.95]}, {-1.3979400086720375`, 
                    GrayLevel[0.95]}, {-1.301029995663981, 
                    GrayLevel[0.95]}, {-1.2218487496163564`, 
                    GrayLevel[0.95]}, {-1.154901959985743, 
                    GrayLevel[0.95]}, {-1.0969100130080565`, 
                    GrayLevel[0.95]}, {-1.045757490560675, 
                    GrayLevel[0.95]}, {-0.6989700043360187, 
                    GrayLevel[0.95]}, {-0.5228787452803375, 
                    GrayLevel[0.95]}, {-0.39794000867203755`, 
                    GrayLevel[0.95]}, {-0.30102999566398114`, 
                    GrayLevel[0.95]}, {-0.22184874961635626`, 
                    GrayLevel[0.95]}, {-0.1549019599857432, 
                    GrayLevel[0.95]}, {-0.09691001300805638, 
                    GrayLevel[0.95]}, {-0.04575749056067506, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"], 
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw1j3lIUwEcx2dRTa0cmZVKMCWFSOdRU0vUr9qBt45ky9qY81jmsafO2WFp
mnkUNq9Qi1oikslySIcsNS3MUAoxGpmVsj+ClFIrjzTsYL89eDw+fI/f9znJ
FIKUNSwWK+jf+/9rethgl2v8PNyGgkzsDJlIzwmebiLmociVu7q8r5GYj9hm
JX9bZh2xP6JDK149edRg4iLg3RZ24kJSDXEo1nOFbbXO1cSH8X1a03VwSk0c
hnpfo7stY/ZHgrE8ffe1wazHoF8R4hgxQHnEIdl4q3+okfQ+AQyLwv2f318l
/Sg+nu3tNI4Q98WjfWGrp0sU+SGE59QXYVxLBekiCFLFrYfrykhPgDFOpDey
zf3HESW6mTq3s5J0MbxtqvyMe8jfJ4FFV8N0/SfSuVLE18V47B2i+5NSzDzv
uGZjW2piTSJGHcLaFg9cMbFUhh6vX/ob32gPNwlxlWVL6XbllE8CI5AtzBiI
Nclw940o4Naa8ymIjF/VMh3Uz01F87CdPOTMZcqnQrfpZeKgDe3TyGHVG9Wx
Tkt+6UlIGvmyCDb5uWmYf6xvnT1CeybTMFI0sj3a2rz/FMbOBdTs+FpM+XSo
qzfvih6mfdwM8H7yRbvN/zuZAYWPlhcgIL8mE0tOb6ukKvP9LPSrtK2BE+b9
Cvj7WQVk6C5SXoHxOzYVL8IumTiWQcMGL5XL9RIT6xhIBh3/6Nqpn5MNHJJH
zp0gZrKRYHlv3K2N8iPZkFYOJLNKikzsmYNjnGcBljPE6hz8nl7m64spP5uD
Gok8vMGS9NhcqA2KsQmGWJcLq/vCh7xm2sNRwlX3waWnifYzSljInsocgi/Q
fSXW2q88CJylfs88ZIt9xM23SVfnQZX0Zl7bXUD38+Clse7cqCM9VoWsQt/2
tHTq16kQHx6labEnPycfFu3ytNGVQrqfj1LvH90VrPNBfwFmqC1o
                    "]]}, {}}, {}}, ImageSize -> {132, 82}, Frame -> True, 
                  Axes -> None, AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, 
                  PlotRange -> {{0, 378}, {0, 0.22492074290746045`}}, 
                  GridLines -> {{38, 76, 114, 152, 190, 228, 266, 304, 342, 
                    380}, {{0.05, 
                    GrayLevel[0.9]}, {0.1, 
                    GrayLevel[0.9]}, {0.15, 
                    GrayLevel[0.9]}, {0.2, 
                    GrayLevel[0.9]}, {0.25, 
                    GrayLevel[0.9]}, {0.3, 
                    GrayLevel[0.9]}, {0.35000000000000003`, 
                    GrayLevel[0.9]}, {0.4, 
                    GrayLevel[0.9]}}}, PlotRangePadding -> {{0, 0}, {
                    Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.734504215327655*^9, 3.734504467983219*^9, 3.734504657277434*^9, 
   3.73450480530715*^9, 3.7345050007248693`*^9, 3.7345068106403036`*^9, 
   3.734507122192043*^9, 3.734507249497357*^9, 3.7345074310431786`*^9, 
   3.7345080491957283`*^9, 3.734508097906237*^9, 3.7345082306726055`*^9, 
   3.7345106507875896`*^9, 3.734511019823097*^9, {3.7345118921058226`*^9, 
   3.734511918988308*^9}, 3.734512209505519*^9, 3.7345148534036236`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"69b974ef-5cab-49dd-99ae-7b0216c54465"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetInfo", "[", "\"\<LossEvolutionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.734505066644539*^9, 3.7345050734986153`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"ea318cd3-342d-4270-afc4-a1d80932cd76"],

Cell[BoxData[
 GraphicsBox[
  {AbsoluteThickness[
   1.25], {{InsetBox["1", Offset[{-2, 0}, {38, 0.1}], {1., 1.}], 
     InsetBox["2", Offset[{-2, 0}, {76, 0.1}], {1., 1.}], 
     InsetBox["3", Offset[{-2, 0}, {114, 0.1}], {1., 1.}], 
     InsetBox["4", Offset[{-2, 0}, {152, 0.1}], {1., 1.}], 
     InsetBox["5", Offset[{-2, 0}, {190, 0.1}], {1., 1.}], 
     InsetBox["6", Offset[{-2, 0}, {228, 0.1}], {1., 1.}], 
     InsetBox["7", Offset[{-2, 0}, {266, 0.1}], {1., 1.}], 
     InsetBox["8", Offset[{-2, 0}, {304, 0.1}], {1., 1.}], 
     InsetBox["9", Offset[{-2, 0}, {342, 0.1}], {1., 1.}], 
     InsetBox["10", Offset[{-2, 0}, {380, 0.1}], {1., 1.}]}, {InsetBox[
      TemplateBox[{"10","\"-2\""},
       "Superscript"], Offset[{3, 0}, {0, -2.}], {-1, -1.}], InsetBox[
      TemplateBox[{"10","\"-1\""},
       "Superscript"], Offset[{3, 0}, {0, -1.}], {-1, -1.}]}}, {
    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
0mdqUW8aVr/s0/7+BymMQuk=
      "]]}, {}}, {}},
  AspectRatio->Full,
  Axes->None,
  Background->GrayLevel[1],
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
    ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
  Frame->True,
  FrameLabel->{{
     FormBox["\"loss\"", TraditionalForm], None}, {None, 
     FormBox["\"rounds\"", TraditionalForm]}},
  FrameStyle->GrayLevel[0.5],
  FrameTicks->None,
  GridLines->{{38, 76, 114, 152, 190, 228, 266, 304, 342, 380}, {{-2., 
      GrayLevel[0.3001]}, {-1., 
      GrayLevel[0.3001]}, {-1.6989700043360185`, 
      GrayLevel[0.8501]}, {-1.5228787452803374`, 
      GrayLevel[0.8501]}, {-1.3979400086720375`, 
      GrayLevel[0.8501]}, {-1.301029995663981, 
      GrayLevel[0.8501]}, {-1.2218487496163564`, 
      GrayLevel[0.8501]}, {-1.154901959985743, 
      GrayLevel[0.8501]}, {-1.0969100130080565`, 
      GrayLevel[0.8501]}, {-1.045757490560675, 
      GrayLevel[0.8501]}, {-0.6989700043360187, 
      GrayLevel[0.8501]}, {-0.5228787452803375, 
      GrayLevel[0.8501]}, {-0.39794000867203755`, 
      GrayLevel[0.8501]}, {-0.30102999566398114`, 
      GrayLevel[0.8501]}, {-0.22184874961635626`, 
      GrayLevel[0.8501]}, {-0.1549019599857432, 
      GrayLevel[0.8501]}, {-0.09691001300805638, 
      GrayLevel[0.8501]}, {-0.04575749056067506, 
      GrayLevel[0.8501]}}},
  ImagePadding->{{20, 1}, {1, 20}},
  ImageSize->{471, 201},
  PlotRange->{{0, 378}, {-2., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{0, 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{3.7345050741736608`*^9, 3.734506816934031*^9, 
  3.734507127909899*^9, 3.7345074519838476`*^9, 3.7345082340126805`*^9, 
  3.73451102448151*^9, 3.7345122143063455`*^9, 3.7345148562993755`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"34f559fc-cee5-4722-adee-446d7ace5dd5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nNetTrained", "=", 
  RowBox[{"nNetInfo", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.734503314120943*^9, 3.7345033963756385`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"9a0c1265-49d5-4df8-a747-70708854ccf4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["10", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}}], 
                    LineBox[CompressedData["
1:eJwt1HtMU3cUB/BSoNDStSDlUVuBtgbYpoBjOsAD4oIgjEwHYQERhemIRFae
c0N02UDCwwljkMy5QXnU4gAVkIeUIqe0ZbBhDAhYyYgONoShIs9Jlz24d79v
zs395/5++Zzzu/dKPkiL+pDJYDCiNi/q/n+2IzvrYd9N/gCM+55ZMj2RYVD+
N8s+awbYEcWqlt+VYe5K82tzDwzAim+xjG+RYa9OeGq8ywBJ72Z74lcyNF+d
anxZaYB99AIZHr6wsfxemgEUq+GbJcO67NTgX0MN8EVD/IpOKkOTfk+FSmSA
2ZBCJndDinEfxy7UPtPDMB0pagpGDt7X6GGFWq6QojR0/ZqiRA/iHzM2S4pF
LBE7NVYPB0KoSHFxYF+Kn7seUrWOmyXFmMKTQxarOqgMmq8ImpdgT1jxqyNa
HWh6qEhQan2juKpMB7/5lc74lUqwcHB0PiVBB9zORJvORAk+L/ozfM/rOrhL
e9wwwCTP4xX1A92Owg1r1BXTkzH9xOOGVrm3326Q9ROPG8r3TtVlLWmJxw3H
/jIzD+7Tguf5UY/zo64YoHE/wb2khU8/oeKKtefe0RmPaGGQ2k7silaB6bKr
nlpwojdwQfnflfkZ6whXvqWyDdVyriY8GmGugmpwG7p67xI7ShD8qXZmxMh7
1PRSP9UHJUVUxPjL8bXbCTl9YMzbuVliVD0OylkX9BGPCDOTivzLWu4Qjwj3
TY9seETeIR4Rck+I1PikF5xpz1Y0zpw8G5ffSzxCzByIXmAHamCe9ggxKKyq
qc7YA/R4Z5yRMzh7em92DxTTHmc0HvTZMcbvgYe0xxmVQzlPU5vUxOOE6RG6
ZsswNfE4IfzM/ah6uhvocYudkBP5/s63Pusm83HEB8OKZ/eE3cTjgOk3S499
fr+LeBwQfIwuwrQuMh8Bclolj1o5XcQjwIldpxURqk7iEWB9W/vxmf2dxGOP
ab7/uJ6b6iAee4T2sMeCnA7isUf27vKa64IO4tmCEx2TiaEt7cRjh/LLQyPr
KbfgD9pjhwFC+6/LLG8Rjy1aXzka5VnbRs7LFse3qrZooY2cly3WfLc4Gmds
hcMm5SGTko9ysX/FclYrvHhOhYcBVXnRF/mtQG/nx0Mrl2H77U0t4EVv8AqO
VTuMaUJbwJeODRqZ7JJJxg0Y8aAa5GCGxfccrt91yKRfaDbasLwvBqY1g70d
FTYqrfpt0lRNQH39lvHWGMSO+bJmqpF4rHCCM8cdFTTCIu1hYTo395J55A/E
w0IOj8fbnX+NeCyxnl9bmqxuIN+7BYLdm/zLSypIfjq9dk9kgUNRzgUJXiow
JZW/8SLbHPcLFL9HnLkKF6hxGJlYHzPokzikBItDXbOFB5i44FiZXOWhhLMD
Xsf+1ZihSyyzkFleT+ZtRuZdD/TjPzEw+MhAYUhBHTT7eAQIEhnoLRKfktjW
AfkhotVRga+7qhb+A7dkcUs=
                    "]], 
                    
                    LineBox[{{-10., 
                    6.123233995736766*^-16}, {-9., -0.9999999999999994}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBwAGIQDQFKB37/B4H3+68al3389VzxwC8oXyeIbV7eWUW4
PFv0BtboDYoH/kD5SX4lGgcmIPj2YA0I/oIvnvO/eCL4TcujPx9WQvCfubQz
8fxUgPPPngEBBB+sfb4C3D0yxwuBCCHv6gICCH7OQTEgQvA1ai+p116Sh/Mr
ykEAwT8BMk4GwRcHGyAH58+aCQKycP6LyXYvJ9vJwt1j2ffYou+xDFy+qwME
EPwbTbpAJIPmHmk090ijuQfBlwC7R+rAPxT3SMLlX4LdIwl3jwXYPRJw+U6w
eyQO/IXyb4LdI4HmHnE094jD7QMHt4w4XD8kfMTQ3CMKl4e4RxRuHiR8RODq
Ie4ROfAfxT0iaO4RRnOPMJp7hNHcI4TmHkE4/xXYPYJo7hGAy0PiSwDuHkh8
IeQDfi3x/7WEH87/8A4E+OB8sHEWCL4e2ABeOB+Snnng/PQ3j76el+aBu+dX
4kSjDyXccPkWkPU3uODuYfHf/qzdlQsuX31ML+7/Hk40/yH4YOWnOOD8NQbq
ViIJCD4kvyP4AF8n47g=
                    "]], 
                    
                    LineBox[{{-9., -0.9999999999999994}, {-8., \
-1.9999999999999996`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQEKB/79B4P9K9LfPPp6Xv7AHyg/YgmPzd1Z8nB5
nm0J3NsS5A/8h/IPzXkR0KCIkK8Da5CD8+1fTrZ7ORnBZ/bf/qzdFcE/28nH
KvFJFs6fNRMEEPwXIO12snD3WPY9tuh7LAOX7+oAARm4e2406QIRQl6j9pJ6
7SVpOL+iHAQQ/BOFMscLZRB8iZyDYjkHpdDcIwnng71jJwl3jwXYPRJw+U6w
eyTg7rkJdo8EmnvE0dyD4B8HuwfBFwe7RwzNPaJo7hFFCx8RNPeIoLlHBM09
wmjuEUZzjzCae4Tg/DQwQPBNyj7+es4rBHfP3w0ekhW7BOHyh0C+yRGEu6dp
efTnw0oIvl2y+Pr6ewJw9V885wMRgr8CpDwVwQ+bISzLZSAA1w9Jzwg+AJgD
EF4=
                    "]], 
                    
                    LineBox[{{-8., -1.9999999999999996`}, {-7., \
-2.9999999999999996`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEyB/6DAfuBlelvHn09Lw3nRy7hsbk7C8Hn2ZbA
vS1B+gBEH8eBw3NeBDQoIuQbIkAapOB8h5eT7V5ORvBZ/Lc/a3dF8M928rFK
fJKE82fNBAEEH6zdDsG36HsMRBJwfmcHCEjA3XOzSfdGky5CXqP2knrtJXE4
v6IcBBD844UyQITgi+ccFAMiOD8NDBB8o7KPv57zIvh/N3hIVuwShfPBunNE
4e5pXB79+bASQt42WXx9/T0ROP+L53wgQvDBylMR/LAZwrJcBgg+xFwEHwCY
9RJe
                    "]], 
                    
                    LineBox[{{-7., -2.9999999999999996`}, {-6., \
-3.9999999999999996`}}], 
                    
                    LineBox[{{-6., -3.9999999999999996`}, {-5., \
-2.9999999999999996`}}], 
                    
                    LineBox[{{-5., -2.9999999999999996`}, {-4., \
-1.9999999999999998`}}], 
                    
                    LineBox[{{-4., -1.9999999999999998`}, {-3., \
-0.9999999999999998}}], 
                    
                    LineBox[{{-3., -0.9999999999999998}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    6.368163355566237*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.866666666666667, 
                    4.816944076646255*^-16}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -1.0885749325754216`*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -0.5999999999999994}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.355555555555555, -0.9999999999999994}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -1.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.222222222222222, -1.9999999999999996`}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -6.661338147750939*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -2.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.777777777777779, -2.9999999999999996`}, \
{-0.25, 0}, 
                    Offset[8], {0.17777777777777803`, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -3.5999999999999996`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -3.3999999999999995`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -2.3999999999999995`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4, -1.4}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.39999999999999986`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-11., 6.735557395310443*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 6.123233995736766*^-16}], 
                    Offset[{12, 12}, {-10., 6.123233995736766*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-10., 6.123233995736766*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{12, 12}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_4", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., -0.9999999999999994}], 
                    Offset[{12, 12}, {-9., -0.9999999999999994}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-9., -0.9999999999999994}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., -0.9999999999999998}], 
                    Offset[{12, 12}, {-3., -0.9999999999999998}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3., -0.9999999999999998}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_3", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -1.9999999999999996`}], 
                    Offset[{12, 12}, {-8., -1.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-8., -1.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -1.9999999999999998`}], 
                    Offset[{12, 12}, {-4., -1.9999999999999998`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-4., -1.9999999999999998`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-7., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-7., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -2.9999999999999996`}], 
                    Offset[{12, 12}, {-5., -2.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5., -2.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dec_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -3.9999999999999996`}], 
                    Offset[{12, 12}, {-6., -3.9999999999999996`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-6., -3.9999999999999996`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["enc_5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., 6.123233995736766*^-17}], 
                    Offset[{12, 12}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-1., 6.123233995736766*^-17}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-11., 6.735557395310443*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-10., 6.123233995736766*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-9., -0.9999999999999994}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., -0.9999999999999998}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-8., -1.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-4., -1.9999999999999998`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-7., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"dec_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-5., -2.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"enc_5\"", TraditionalForm], 
                    Offset[{0, -15}, {-6., -3.9999999999999996`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"map\"", TraditionalForm], 
                    Offset[{0, -15}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}]}}, 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-10.4, 
                    6.368163355566237*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552225`*^-16, 
                    5.5}, {-7.866666666666667, 4.816944076646255*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736769*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, \
-0.5999999999999994}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3739009929736087`*^-14, 
                    5.5}, {-7.355555555555555, -0.9999999999999994}], {
                    0., -0.17}, Automatic, {1., 2.498001805406561*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-8.4, -1.5999999999999996`}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"40\"", 
                    "\"40\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.060851489460454*^-14, 
                    5.5}, {-6.222222222222222, -1.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., -3.747002708109917*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"40\"", 
                    "\"40\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-7.4, -2.5999999999999996`}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"20\"", 
                    "\"20\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 
                    5.5}, {-5.777777777777779, -2.9999999999999996`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"20\"", 
                    "\"20\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-6.4, -3.5999999999999996`}], {
                    0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"10\"", 
                    "\"10\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-5.4, -3.3999999999999995`}], {
                    0., -0.17}, Automatic, {0.7071067811865475, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"20\"", 
                    "\"20\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-4.4, -2.3999999999999995`}], {
                    0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"40\"", 
                    "\"40\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-3.4, -1.4}], {0., -0.17}, 
                    Automatic, {0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-2.4000000000000004`, \
-0.39999999999999986`}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-9., -0.9999999999999994}, \
{-3., -0.9999999999999998}, {-8., -1.9999999999999996`}, {-4., \
-1.9999999999999998`}, {-7., -2.9999999999999996`}, {-5., \
-2.9999999999999996`}, {-6., -3.9999999999999996`}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {661., 267.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {29.000000000000004`, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {160, 160}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "enc_1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$GroupNumber" -> 1, 
                    "$InputSize" -> {160, 160}, "$OutputSize" -> {160, 160}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "enc_2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {80, 80}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "enc_3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {40, 40}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "enc_4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {20, 20}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "enc_5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {10, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 1024, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "dec_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "dec_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "dec_3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "dec_4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input1" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "deconv" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 2, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "cat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "conv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "deconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv", "Outputs", "Output"]}], "map" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 64, 
                    1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1, 160, 160}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 160, 160}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"160\"", 
                    "\"160\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7345033195318513`*^9, 3.734503338435007*^9}, {
   3.7345033786575785`*^9, 3.73450341867851*^9}, {3.734504220366514*^9, 
   3.7345042329870358`*^9}, 3.7345044738686523`*^9, 3.7345048102411356`*^9, 
   3.7345050065961137`*^9, 3.734506819301328*^9, 3.7345071301130066`*^9, 
   3.7345074546790156`*^9, 3.734508236013119*^9, 3.734511026237155*^9, 
   3.7345122170741215`*^9, 3.734513065175007*^9, 3.734514858661037*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"d6afa352-4d8c-42e0-b241-fcc6e83b5f51"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateImage", "[", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"imgs", "=", 
      RowBox[{"Thread", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", 
           RowBox[{"301", ";;"}], "]"}], "]"}], ",", 
         RowBox[{"Y", "[", 
          RowBox[{"[", 
           RowBox[{"301", ";;"}], "]"}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", "\"\<Image\>\"", "}"}], "]"}], ",", 
      RowBox[{"RandomChoice", "@", "imgs"}], ",", "2"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7345012817651043`*^9, 3.7345013043541775`*^9}, {
  3.7345020120578413`*^9, 3.7345020296756945`*^9}, {3.7345020719932337`*^9, 
  3.7345020722378836`*^9}, {3.7345024989080925`*^9, 3.734502555309085*^9}, {
  3.7345026226331406`*^9, 3.734502622696309*^9}, {3.7345027446658545`*^9, 
  3.734502778160941*^9}, {3.7345054515623093`*^9, 3.7345054855733767`*^9}, {
  3.7345068484969697`*^9, 3.734506855263966*^9}, {3.7345071519288225`*^9, 
  3.73450716358698*^9}, {3.734508248725981*^9, 3.734508252908126*^9}, {
  3.734511094616025*^9, 3.7345110992583466`*^9}, {3.7345122289577165`*^9, 
  3.7345122344291677`*^9}, {3.734512635162939*^9, 3.73451266004262*^9}, {
  3.7345149376147423`*^9, 3.7345149386103473`*^9}, {3.734515114259833*^9, 
  3.734515155291561*^9}, {3.734515198553271*^9, 3.734515254574359*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"dc004a3a-02b4-41b9-b12a-68ad236add4c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"img", ",", "ground"}], "}"}], "=", 
  RowBox[{"generateImage", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.7345152071508484`*^9, 3.7345152090940533`*^9}, {
  3.7345152743367205`*^9, 3.734515283347624*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"be13ac86-b4df-4949-8fa2-eafcbb72818d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
DIvZ3TMwNC4UCxU+n8PhQOoCzddnM8h53IHuThjc6WjoxdoG4Kuvb2xurKe3
dHXPWu1Ld3/xT9/feXh9Pe3bf7GeXt7ZsplieX8i44/6Fp/eCPk3lxdXL+e2
nz29srax++DGjSePXt54tCozJ/LCgfFJDvRDOpXOaGG214L3whMqL5x7Z+4L
/gDSr3dwZFIoEmqDUB5OXySZyaYiPptWMs3pg5mtAc1myBOAAYHybWii0xvp
LR2DIptv/u7f/9N3T7YP9m9dXlu4fuvRzvaS3Bg/PgyHozGLfzVljR/d3F3d
3r92fJT1Lsb2P/vw3uEnn976NGvwGnjtsnmZWdbbDP8zDqeTUo3sdNXFogCe
JuAZVlc3e2h0WiwSmYLI/PkwbxryWtXCqWE2ss3I1mP/IHigf4xWSBsmPxtJ
P/rmT19+sho6vBoxXttfD+5ciZhUjrXn28mVfCwWz/njK3t3DncvX1nbWl33
eyLZG48PNz/99YePPo9bRKOd4hsBv4vVXN8siAeETcSqapigLl4o2pcP/qbI
H6sb5jbOrEQstgcd4F2CMaR+mLpMDPVgd3IL+LDGRq4nd820NDNb+zUp760v
f3h8FDFljpa1kv3na56FvYxW69y7mo3MJ5b2U9G4PZG4tJG+euwN+mPp1Uhi
4/DDZ/fvvvrwdy+CGsFIX+j6jr6zq67Dd8nGYzUU8J00kA8KAT57pgu8wQiX
J5HI3H6kfmFQv2QsYNdJZ8f6u7AbLhQMXx16TEmup7C4UHRdPHfm4OXLa6GE
JZhezvuNiSuHy6vz+ZhW4cs4TVHv8nwi4VDFIsn46lbGY3eqfJcz4YXcvVc3
Lt9//OYfb0btCi7PZR9s6W6oVb1JDncyCFVVuMqS0/gWAWL8jXDnpBIlVh6+
CDTfZNRj1YinRjHfDLVRqF0qDXHYUN/CamMPy3fuf3tvdwv8BAzL6ymLefn5
zs5qzqMxRBZUkoA7ZLEkovaAKRDcWvfEQrHA4uW8LTa/dG135/jqg5++3fM4
ffzenraW+joCZ93HbGsmVlfjKy9cOGnAaPhA+Jjd6DG/UCpV+73graC5gXkB
9VMJJ0d6Ogo3SzHpQ5YF0o/e2tndMTRhTew/XF5MeD1K0+LWXt43v7u74I4k
rGqjPxX3LGzGvc5E2ORxuCye1cj+o92d6ytHW/Orufyl6/duPnrxyUtvIKOa
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
1tp23qMJrN5Y9HuXV71qoz+aTfnjC7mDvURo7d7bp9tHl288+Phf/6cvFqc5
0wPMztZ6mMMqSy9eKMHuUJ7UL5Z/w5zJOSiQ0FLe502kEpGQ3+u06BSCyWEo
kJZ2es/g2h/efL67HjWaHt0IR3UTQxPDfRN6sd3PMzglYsmU3iJX2FXgmUOB
+aRjPhJMumDYVepsSx+mggJbPqbVxTdW0iF/YnltfTG7eHRr/8rWtRs3v/nt
d58vD09Kp3pRDhJqqsqxl4hQ9l1AbykWXlMcGoYCEWstgYX5gCuehgYX9Lqs
IDBTUMCtbR0tPROPv3v16HAtZNU6lwIwF/f1jYyOCoW2e/5ZjUxq5Ok9CY9V
pjdA3zbFVg4uW4wqocIqVNpDx06ZzJEza61GX8ST9Vls8ZWrV44PLyW3Dm/e
v/704cu7Gt4In9c5yqJUVxOrK8uwl1AvXiwpjnAIIOAbnxWrLe7ccsQVSYNA
B5AAqsQzY30s8PTtvfznv3n72eFS1CSXyKXc6Yn+3rGxYXAV+dy0wCJWcOa8
sUxUbTCabFL1/PFmUi5TqmV6kcRsz5plUuuKV2fwpv1hr0alSF+9++bL+0dr
a1v7x5u7+8/XxPop4XRDG52MHQkqvv1euAlddNEYPpHK5Egtx53BJBRw0Oey
GWEC4Q72dHZ2dPTNffbffnF3IZ5UTgyx+0c5nKFeFrOvp3dG59bIQzq125e/
tGAUy/nBvMsaSdnkOoVByTd69GajXWfgG3bWDVJX1JuMO7Xy9bUrb1/fO9ha
2Lp+I720sxkGHzc+2tdVT4bpowoSEB1SKjl/7j18IyOATyg3WCNLabcvnoqH
0WuJZq1CODnM7mIxO0Ykj/6fr+POgJo3LLByJvgaOX+4uaOTxVXKRJ4tscju
MO/sqdVSgWs7KtVoeSKzyyOVKY02s8PtNxjjGzsRl8cfCUS9Gqk3uX3ri48P
154df/hmK5bdcui1stER9SS1Fo+OBJVjLym+/xrvB2eGR0ZBYKRaS3AxH/BE
UYEEPE6rXolukHf3dLeO6F7+90d5J793YFLvjTmMQqlSNNDSzWYPT4r1eY1U
pxIZdlIencaaMppTTrPW5I4alUqrzuXPZmPheDCbc6lCgdhK0JPf3NlZ//b2
/PEnj54+/nItuhEPOuMWkcbZSqiuKKssr7hYeEfi3Ol7RBh/3CmBBPxjbjHi
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
iuOyxA==
      "], {{0, 160}, {160, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "Grayscale", Interleaving -> None, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "ImageWidth" -> 483, "ImageLength" -> 448, "BitsPerSample" -> 8, 
          "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
          "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
          "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\nloop=false\n\
min=1258.0\nmax=13053.0", 
          "StripOffsets" -> {754, 8482, 16210, 23938, 31666, 39394, 47122, 
           54850, 62578, 70306, 78034, 85762, 93490, 101218, 108946, 116674, 
           124402, 132130, 139858, 147586, 155314, 163042, 170770, 178498, 
           186226, 193954, 201682, 209410}, "SamplesPerPixel" -> 1, 
          "RowsPerStrip" -> 16, 
          "StripByteCounts" -> {7728, 7728, 7728, 7728, 7728, 7728, 7728, 
           7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 
           7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728}, 
          "XResolution" -> 72, "YResolution" -> 72, "PlanarConfiguration" -> 
          2, "ResolutionUnit" -> "inch", "Software" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "DateTime" -> 
          DateObject[{2018, 3, 10, 1, 58, 19.}, "Instant", "Gregorian", 2.], 
          "Artist" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{160, 160},
    PlotRange->{{0, 160}, {0, 160}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzt111qVEEUhdGgIE7DOYiv4hTiCCLokyDEB3E2DtEhmKCQYP46t2/XPnVq
Lej+ukdwdr359O38y4uzs7Pvr6++zi9+fLi8vPj58dX1n88XX9+9/fzy6uev
f5/r3wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMBefr9fqwAAAMwl/Y7UuQsAAJCSfg+pPlYAAICHpN8rqhULAADUl343
qK5YAADgeOldr6re0QAAsEV6X6vqfAUAgMrSe1lV+xcAAEZK719V1UMLAAC3
pfepquroAgDQW3pvqqpWLwAAc0nvR1XVbgUAICu9B1VVVykAAGOkd5+qqt5f
AAC2Se84VVXdpwAA/JXeZaqqmikAQFfpnaWqqrUKANBVemepquocBQCYRXo3
qarq3AUAqCa9j1RVda0CAJxaeu+oqqoCAOwpvWtUVVW3FADgudL7RVVVdUsB
AB6S3imqqqp7FgAgvUdUVVWTBQDWkd4dqqqqyQIA/aT3haqqasUCAP2k94Wq
qupMBQDmld4RqqqqMxUAmFd6R6iqqs5UAKC+9F5QVVXtUACgvvReUFVV7VAA
oI70LlBVVe1cAGC89P1XVVVdsQDAeOn7r6qqumIBgPHS919VVXXFAgDjpe+/
qqrqigUATid951VVVfWmAMDppO+8qqqq3hQAOF76nquqqurTBQCOl77nqqqq
+nQBgMOl77aqqqpuLwBwuPTdVlVV1f0LACtI31tVVVXNFwA6Sd9VVVVVrVsA
mFH6fqqqqup8BYDK0ndSVVVV+xQAKkvfSVVVVe1TAKggfQ9VVVW1fwFgpPTd
U1VV1f4FgArS91BVVVX7FwBGSt89VVVVXbcAMFL67qmqquq6BYCR0ndPVVVV
+xcAKkjfQ1VVVe1fAKggfQ9VVVW1TwGggvQ9VFVV1f4FgArS91BVVVX7FAAq
S99JVVVV7VMAqCx9J1VVVXW+AsCM0vdTVVVV5ysAVJa+k6qqqtqnAFBZ+k6q
qqrqfAWAGaXvp6qqqtYtAHSSvquqqqpatwDQSfquqqqqar4AsIL0vVVVVdVx
BQDuSt9nVVVV3b8AwF3p+6yqqqrbCwAcLn23VVVV9ekCAMdL33NVVVW9KQBw
Ouk7r6qqumIBgPHS919VVbVzAYD60ntBVVW1YgGAdaR3h6qq6ogCAKT3iKqq
6p4FAHiu9H5RVVV9rAAAp5beO6qq2rMAALNI7yZVVa1VAIDVpPeXqqruUwAA
9pXed6qqqxQAgJrSO1FVddYCANBDeleqqo4uAADclt6nqqr/FwAARkrvX1Wd
rwAAsIL07latWAAAYB3p94fqlgIAAOwl/b7R+wsAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw3h/ntnCR
      "], {{0, 160}, {160, 0}}, {0., 1.},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{160, 160},
    PlotRange->{{0, 160}, {0, 160}}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7345152112088337`*^9, 3.7345152849395695`*^9}, {
  3.734515316418236*^9, 3.734515324637009*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"442820cf-534f-4697-ab2e-0edc3bf53e1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"img", ",", "#", ",", "ground", ",", 
     RowBox[{"HighlightImage", "[", 
      RowBox[{"img", ",", 
       RowBox[{"MorphologicalPerimeter", "@", 
        RowBox[{"Binarize", "@", "#"}]}]}], "]"}]}], "}"}], "&"}], "[", 
  RowBox[{
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", "\"\<Image\>\"", "}"}], "]"}], "@", 
   RowBox[{"nNetTrained", "[", 
    RowBox[{"img", ",", 
     RowBox[{"TargetDevice", "\[Rule]", " ", "\"\<GPU\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.734427522949519*^9, 3.734427547454689*^9}, {
   3.734427630603815*^9, 3.734427645892473*^9}, {3.734427689977141*^9, 
   3.734427715931163*^9}, {3.7344284873696413`*^9, 3.7344285079032483`*^9}, {
   3.73450112545341*^9, 3.734501125514572*^9}, {3.734501156352583*^9, 
   3.7345011850659432`*^9}, {3.7345012300044656`*^9, 
   3.7345012860064173`*^9}, {3.7345026444953127`*^9, 3.734502664772205*^9}, {
   3.734503295865015*^9, 3.7345033010217943`*^9}, {3.734506876940613*^9, 
   3.73450688323435*^9}, {3.7345122609288797`*^9, 3.734512264756854*^9}, 
   3.734514929959639*^9, {3.7345153013083944`*^9, 3.734515303660473*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"1efc66cb-cc20-43db-8f7e-a77a260498b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
DIvZ3TMwNC4UCxU+n8PhQOoCzddnM8h53IHuThjc6WjoxdoG4Kuvb2xurKe3
dHXPWu1Ld3/xT9/feXh9Pe3bf7GeXt7ZsplieX8i44/6Fp/eCPk3lxdXL+e2
nz29srax++DGjSePXt54tCozJ/LCgfFJDvRDOpXOaGG214L3whMqL5x7Z+4L
/gDSr3dwZFIoEmqDUB5OXySZyaYiPptWMs3pg5mtAc1myBOAAYHybWii0xvp
LR2DIptv/u7f/9N3T7YP9m9dXlu4fuvRzvaS3Bg/PgyHozGLfzVljR/d3F3d
3r92fJT1Lsb2P/vw3uEnn976NGvwGnjtsnmZWdbbDP8zDqeTUo3sdNXFogCe
JuAZVlc3e2h0WiwSmYLI/PkwbxryWtXCqWE2ss3I1mP/IHigf4xWSBsmPxtJ
P/rmT19+sho6vBoxXttfD+5ciZhUjrXn28mVfCwWz/njK3t3DncvX1nbWl33
eyLZG48PNz/99YePPo9bRKOd4hsBv4vVXN8siAeETcSqapigLl4o2pcP/qbI
H6sb5jbOrEQstgcd4F2CMaR+mLpMDPVgd3IL+LDGRq4nd820NDNb+zUp760v
f3h8FDFljpa1kv3na56FvYxW69y7mo3MJ5b2U9G4PZG4tJG+euwN+mPp1Uhi
4/DDZ/fvvvrwdy+CGsFIX+j6jr6zq67Dd8nGYzUU8J00kA8KAT57pgu8wQiX
J5HI3H6kfmFQv2QsYNdJZ8f6u7AbLhQMXx16TEmup7C4UHRdPHfm4OXLa6GE
JZhezvuNiSuHy6vz+ZhW4cs4TVHv8nwi4VDFIsn46lbGY3eqfJcz4YXcvVc3
Lt9//OYfb0btCi7PZR9s6W6oVb1JDncyCFVVuMqS0/gWAWL8jXDnpBIlVh6+
CDTfZNRj1YinRjHfDLVRqF0qDXHYUN/CamMPy3fuf3tvdwv8BAzL6ymLefn5
zs5qzqMxRBZUkoA7ZLEkovaAKRDcWvfEQrHA4uW8LTa/dG135/jqg5++3fM4
ffzenraW+joCZ93HbGsmVlfjKy9cOGnAaPhA+Jjd6DG/UCpV+73graC5gXkB
9VMJJ0d6Ogo3SzHpQ5YF0o/e2tndMTRhTew/XF5MeD1K0+LWXt43v7u74I4k
rGqjPxX3LGzGvc5E2ORxuCye1cj+o92d6ytHW/Orufyl6/duPnrxyUtvIKOa
EYx1UIg1tH5WawuNgMNXl6MZ5LSCMZSsbvbg2JRILtcH3E6HOwTNF8LrNCr4
40Nd2FMibP5G4UX1S6W3dbJHhuWp+28u653u5cOwcz0TCrvv7sQzIU9i63LA
YvRvJ9yuRGYpGl7a9DvCgfz128cfPbt849beTiYevPTs6q0nH35ydSHmtDrk
3CEG+CIcngg/iLjSkvOn9w+K/hnm8iHutEghNwbdLqc3mgT6In67Tgbpxyrc
M8CuOgwgjdbc3jEwzsu9+MdP8wb3wu6t/c11ZyKZumyzmfSZ/fTNbYPZmohr
tdA7cgura3FfzBJ7dfPocHvjcHVjd2lxcev46c0rd7/+7MstpdYc0Cmn6kmk
0gul5VVEUvXFknfxxSr4gw+6Ad/4jEiptATcbpcfwptKhL0WrXga0q+lCaZe
SjG6VMhAWgOjs31gxvf8+7e3/K6dR/v3Xx4nw6v5o7TerDDljkP5lbDPZPLY
Hc7Y2rzT7o7HElHL+p3nW4ncQTadTS9u7C48Pl69/fz6R7sKnjoa1E5A88WX
lVfgiMRKwHf+bMGhYtWB8PUifGKV0up3ul1BZJ3jIY9ZKZwEdQH1KwxE7+Hr
YI6prrx5fX8tv3X11tKlZ7vxxNrWtQ2fSmaxBRZj0XQgE3eClM4vpmx6pSvq
94KH2Ehv5JOZXCIYXJ7ffXC4ffzoYG8vp9dGUzp2E41KqMIRSDXVVZUYvFMH
jULc09s/DPjUarvX6fGg+36JWMBllPMnBrvR/dJidFHuoVsX9fTOUX70k7df
Xr3z+Ghv6+izJ+m0b3XtcN+llEvMluxlX2Q1Gw9n7PFM0OdU2Txak82SWfKn
Fhb9qdV0PBxI3L63t+i//mR7eSHqyWaU7CYiHk+E4YFQUQoTyIX3HDTCh5Xv
rFircXhcHl80i25s+B0G2Rx3oAu7IXmCD9FX39DU3M13vfiHbx7B4HO8m02k
kk6XJxJZyOQdWrnC5F0KJeejbtd2JOoy2cPh+c2k1Wz0Zy3J5cX5RNQdc5sD
R69eXA7vffz06U7Em3DLumlkZlstuQZfVVFadPjv3D3wh8p3VqLTub1uH4hz
NhUPI+83w+lnobsGlMK4BpM1WL8GaJYD6qP//Gb/+utDe3zRI9c59CazweSy
BHJO9ZzBbUolfN5kNBvz+7XO7cvrK5s5TWQlE/Usb+TyqxAff+Toy9cHG/vP
XtzZSS/bhJJOcoNwmlJTCSlYhg1I7ykgXL39UL6zMr3B63UHwuANklFovhrx
zGgfEz0HRF0N0UcDBsG6MJhTzk++W9m5/fql3bajnObrXU6LxWQy+HeO7TKb
w7UcDnjM0bTX5fN6r+Q2FkAMlrNBDwhXcmEvHV7PJVP7P95Z3rz64ujaV9ed
M7w2SmN3O5lQUlJWgcnfufeje+ZM78DIxMyc3Gj0uT2BSCaP7qsV1Lm3g4Hw
IXg0BI8GydfSMWxYeX2wcmnz2pX18LqawzOs+i0+l9kWWd8L6g3OaNxvdpst
EYM1G42tOcwgePNpr89m0llzqd2EZfVW1rrz3Z357b0r+5/9eDcr5DaB/FXi
qtA7KBWFW7zFW0MFfOxBzuSsQGE2+zy+YDyfzyZg8gVzMD4Eph6aL5gDMipc
sAmQfYxeQeTGiwcH2c2j9M5ewsIXWbKO5HzKr3BeysX8KpPDbnca3FaHUb80
n9Cr7BFfZDtgVHtdenRT25vZfvRi5fDVpaXtG9tbV15fdwoGqXhyK7GsklCJ
ns1hI1yhfov9oxfw8QRqqz3gCcRSuXw6FgZ8CijfnnZGE+BD7gXDBzNvc9uQ
duXhw89ury+mfIkfD1JBnsSomz9YjKtt8WjCb7GpnSGvO2rV2GL7O4tqkd4a
SV3b0uhiHn/M49E5kit3rgVDt/Yz6zf2jvcebBhEAw3EphFKycXS8orK0vdH
zA8KEHuHxiZ5Io3d6feAs8/n0GMFh0EuxOQF3WkslEc9XE30ZtaE897nX758
cC1sim4e+n0L4jG9zj8fT2pU+a1UZjso0xh8qc2AyuW7tjnvFEk8yUxqyanO
LQXMDoMyZPfupaLeo4P81sHDj7+4um7msemUxjZceUVpRXVV6fnz743oBYDs
Ye7UnEjjcPmRs5/PotviNr2MPz7Q1d6M+COR6gr4gD5Gv2zx63/607e3VuZj
6Zx9TpdwmLQag8Hv0vtTe/n4FhCiTO4uLnui3rQvEPdZ5/Mr3qBXFdxeDQWM
WpfeFsrGc5euHT/aX37y/Y3LbvkgtI+OOnoznkgiVJWW/BVA5GEQf3MirdPt
88bS2XwmHg56rDBackFesNcMoHkgfDRUvO0cw9EP//aXb2/mMxsRj1Y4pfOu
hkQ6tUhjjuWXUv7opaQ0tL2q8y0ls1mdOrUYSaQWsn6dLZ7d8PlDCk8svZB3
5W9dvfXR1uLx4weLGuFoC3NwkEZnEHCkOhK+ogR7yH/2ZDw/80HvEHdyTqwF
bfalsrlcJhYKuCxahI+JzCkVuxsEfaOhoamllTnmfPb5t7+5nQhG0ymXSCqy
bS6bedNSrdlpcyZdpkDS7swGbCrrysLWms+TTnl8uUjSE/YvJLKLcatqaX4r
53dfPtrc2d/dOrj9aknHHWGw+fzmWmJVFQE9kqq6cP6dhUEUAr4pPuDzhfzJ
eUi/aMjvtGhlszAbYa/PYX0NwttIZ7R39E9tfvEFWCPPwuHWqkFoUMf2FtKG
aWfYrFMoLVKvxxrOJx1iY+IgHQgvBrKLqz63OxJdSG/mPVmDwbq5txcKLx9v
X3m9f307/+hRxjTOaWYMC2bb8VXoLRn0SgD2EOQ0A1F8ET5vKBZO5eYRPq8D
+AN8zKK7QvAam+jtnR3dE8pPvvtuf3EnF03Gc06tUm2LWSO2wEJUrZEIpuWB
sDKz7M2YDV6/JbKaNLr8wYg14F5dTyQXUymp2HlpbelwMz+/9+ar5/cO9h6u
z6fVwyw6S2AYqMGhBw9EUi2xFHvEfyqA7KHxaYFUH4gnIjm4UjFo6yaNlMfp
62zBBt9aUJf6puaW9o6OIV7qD3/7NBFYyWjMKr9GMC2yRqRSbS4VMWoUSpnO
ETDB6BuySEVyhyuTBlGIBiMJYyZhtwZj81Zh4PjW1oO7mdzSlYO7T69evba5
t87jjLO5KkkLkYivqKwEgORqsDDn3z2GY49MTIlkhmAqFQVxziWjQY/dqJEA
f53Q3mhUMolcR4PSQO8+jc3d+b++v+eRaoxTCqXVyp8z+N2yaYltPeXVKrVa
udXksUVDTp1c43Gakhlv3Ol2ROIGd8zqtDniZonhxquNcMrvSCTnL21u3r3/
5OvMpFo9IRANUWqoNHJNVVk1iUIuO/P+Q9a+kclpoVwfymRiuUzhqYzdqDrF
V0cioztW9JYWRvvAiPrHf/swpRHJFCrZnNIi0ANJajFPDlZd5/aoVB6Dw2GM
Rs0ypcNhd/vNZg/M0w53KhDNwuxgkcoPto12bzgcXtna3dz95Lef/GLBJBRz
pqa6qTR6dy+tpryyppZahbCdO3kG1z8yNSNSGMO5fDyTy6fi7+FrodcjfaGg
xtHSyugbG8394/fXk46w0RA3G7RWDdjtgN8tlliCJkM4aPd5TGrX2s6mja/2
xtNZj0AbtKv1RstyMr7kC8dtJufhgdy1lMukb2yuH2Su/ssXH+UkfVOD41Nd
NOpA1seh4CqItVTC+QI+NKQDvuFJcPfG2GIumlvIJaG7uW1GtWSWi+q3AfMH
1IbG5pZmxqTWdO9f367kHHbH5UMYN5xevd6r0/k9Eq1F7bGLPdt5q8YbTmeM
Zoszubvs11qDPo9DrvCHTP5QPG6zL7x6ks+uJY3Jy7mNDe/Gr/58VS8fmxqZ
nWPX1XiPXd4OQiWOSq0pOXtawWfODIxMzopVptjyfDSTzyZjkYDbjl75BP1r
pddj0xHY0ubmZqZmYfOLP32zm3Ma4k9eXV+ILOhVjlDEFAxoI2al22EKzq96
tDqr22d06ENbt2N+j9kRWEim3M5wLLm4ZAnurF3dPLqx5rXrY6tbVxYXb/2f
r4Q8mXhUwBuop67smz1TpMrq2jpiSfEVHUykB0ameBK1Kb62GEnPF/gDfKDP
A2BPT/ExWjonQvdv/upXV7eCazcXb31+//how6Y3gmwGfTG/wqq1OKIb2YjX
nQqls870lYMFp8sZMHuj4XmfXeuKaG0+b8bnDft3N70emX8x8/yzvbv/5Q8+
uaBvQCrpbGgK3z1yDdWiF7MJJegh8Mkt3sHR6TnQ/9jacjiZzyeiYb/HYdZI
56D/thX1j9ZAZ3QMSbfu3P/2nseeXM14PFFwYl6NSWvIZfRmp8sX9lkswY3V
RDCfyS8ns0vrUZ9e7854rRab1aSRWwNKayyStuhs5kvXAyHj6tbu9Wevvnjz
06Z2vFN4kGVTmjjetKi1Bk0i+IsFk4o95YL4TvFlektkbTkUz+eSkXDA6zBr
pXPgX9qwFw5A/hoZ7cNTpgfP3+wl3NbLSw6lRGbyWsDkqCPHWaXVYfaF9pac
end0LbmwtLIWtsr8fofeHNyOuq1up0kr1cV1am96wTSl9+w+uroZOjy8e/P4
008+/PmedIKtenFpEj3paWHU4iqr8KTqkpKSk/iePQv8CWQGW3R9JRzL51OA
z4f629zEUDf403oqUufGjkGOKvPhF3fddnfq0kJGx+VIjSY1X67zOYQCddBu
1yeupcIO73JmbXcz5bfI7EEX+K4Dv9PqdvlABBMWT9bpsU3L01eOrt58/PDy
19/ff/bp29+80E2w2T5XTyOpqqaWjEfvtRPLL1wsOX/6hs4Q4JMbbJGN1TBo
TDIahv5h08kE6O4L+FMqslYtw5xR7+1P3j7wuGPHt3YiCqFCNCG2Wa1m6zRH
YAxsrMt0C9Gox67xBhejXn9Q517bCJgWv54Pudw+R8S/uBGNQ0bMWxTRpdzy
1bdvsg+evXrw9MsfHklGO5t74CvhyvCUhsoKQi2FUHK+BN3GOlN4zWRwdArx
F1xdCweygC8S8rpsBoVwGt0dakJjR0NjL3fE8vJXb5+sxpP2SCzj18jNM73K
ZGQpYpnjWmKWyLbD5LIqHR6Ty+8OrsRckYA3lggu3s46TQqnVGqwrYQVlqPd
pYzD58lduvToo52jo5vXDq9985Db0w6utwcMTE0duRpfRyZVXTiHvet0tvAc
eBCdpNDbfEtrYV86D/kX8rntRsA3it45aIDgNrYNcVSf/PnXn1+KGGxuozYo
4fKlo8M8UeAemL9ps0drDPq0RrPBY0nkPcb8YdAa9bkCW95o2qDXGwxmnw/8
n9G9sDS/GvT5YpuP7t96/tHxlau721/fm2S11tPo6D5KHaWWSKS0U2BGRwlY
eAcB8TfBE2ktnoW1sDuRTUVCIT8ItFI0U7j9Aq2X3sPRXP/Xv39+bzVqVdtl
EvnY+JRsbHRySr27kjTJdGaLRqezZKGdOTdXHJE8hNdodnojULp6jSHkX912
iC0pf2Axnb8UMoRy+y8WD7/5/vnhwXL+ZVbWz6QRSTR0E76eTCETZaPnSs6d
x/AVAA6Ojs+KVBZXdhXCgoZfDB80kDE2OrzTyGB0DCsv/fhPz9Y2s+n7dyPT
PPGYUC+d5Uulc6a1nGNWbbN4dCqt26FVhlb9RnfUpjW6TA5fKO52uUxGe3At
oXVqfZ5U0Jq+6/XGFl4+czlufvn22pOrS4e7anZ/e11tfUsL5BKRQr3Y3FSC
xffkNYkPBoa500KFyZlcSbpCmVQ0HAp4HEY1CCAY/OYmRkvz4PjaN799u5Be
Xvj0n79/kjYZJGqFzGETT85K7KaJcbVCHBAFci5vyJ7OmXS6hMuSSkTBjscS
Cy7v5vo8yHjG6o4uBzMbd1dCufze66TrxRffP3/+49ubK7IB0DFGUzO9ub6m
Er0/VnLx/NmSkvOnr2ENjIxNzcmM9thyxuNPpeNhEGinWSMTYAMmo7W5Y1Tx
/etvLqWSAf8/vIhs7him5VLRjM4qGBcbLbrZ8VmFTDOdylstwWwkE9C7Qtn8
1tp23qMJrN5Y9HuXV71qoz+aTfnjC7mDvURo7d7bp9tHl288+Phf/6cvFqc5
0wPMztZ6mMMqSy9eKMHuUJ7UL5Z/w5zJOSiQ0FLe502kEpGQ3+u06BSCyWEo
kJZ2es/g2h/efL67HjWaHt0IR3UTQxPDfRN6sd3PMzglYsmU3iJX2FXgmUOB
+aRjPhJMumDYVepsSx+mggJbPqbVxTdW0iF/YnltfTG7eHRr/8rWtRs3v/nt
d58vD09Kp3pRDhJqqsqxl4hQ9l1AbykWXlMcGoYCEWstgYX5gCuehgYX9Lqs
IDBTUMCtbR0tPROPv3v16HAtZNU6lwIwF/f1jYyOCoW2e/5ZjUxq5Ok9CY9V
pjdA3zbFVg4uW4wqocIqVNpDx06ZzJEza61GX8ST9Vls8ZWrV44PLyW3Dm/e
v/704cu7Gt4In9c5yqJUVxOrK8uwl1AvXiwpjnAIIOAbnxWrLe7ccsQVSYNA
B5AAqsQzY30s8PTtvfznv3n72eFS1CSXyKXc6Yn+3rGxYXAV+dy0wCJWcOa8
sUxUbTCabFL1/PFmUi5TqmV6kcRsz5plUuuKV2fwpv1hr0alSF+9++bL+0dr
a1v7x5u7+8/XxPop4XRDG52MHQkqvv1euAlddNEYPpHK5Egtx53BJBRw0Oey
GWEC4Q72dHZ2dPTNffbffnF3IZ5UTgyx+0c5nKFeFrOvp3dG59bIQzq125e/
tGAUy/nBvMsaSdnkOoVByTd69GajXWfgG3bWDVJX1JuMO7Xy9bUrb1/fO9ha
2Lp+I720sxkGHzc+2tdVT4bpowoSEB1SKjl/7j18IyOATyg3WCNLabcvnoqH
0WuJZq1CODnM7mIxO0Ykj/6fr+POgJo3LLByJvgaOX+4uaOTxVXKRJ4tscju
MO/sqdVSgWs7KtVoeSKzyyOVKY02s8PtNxjjGzsRl8cfCUS9Gqk3uX3ri48P
154df/hmK5bdcui1stER9SS1Fo+OBJVjLym+/xrvB2eGR0ZBYKRaS3AxH/BE
UYEEPE6rXolukHf3dLeO6F7+90d5J793YFLvjTmMQqlSNNDSzWYPT4r1eY1U
pxIZdlIencaaMppTTrPW5I4alUqrzuXPZmPheDCbc6lCgdhK0JPf3NlZ//b2
/PEnj54+/nItuhEPOuMWkcbZSqiuKKssr7hYeEfi3Ol7RBh/3CmBBPxjbjHi
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
iuOyxA==
      "], {{0, 160}, {160, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "Grayscale", Interleaving -> None, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "ImageWidth" -> 483, "ImageLength" -> 448, "BitsPerSample" -> 8, 
          "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
          "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
          "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\nloop=false\n\
min=1258.0\nmax=13053.0", 
          "StripOffsets" -> {754, 8482, 16210, 23938, 31666, 39394, 47122, 
           54850, 62578, 70306, 78034, 85762, 93490, 101218, 108946, 116674, 
           124402, 132130, 139858, 147586, 155314, 163042, 170770, 178498, 
           186226, 193954, 201682, 209410}, "SamplesPerPixel" -> 1, 
          "RowsPerStrip" -> 16, 
          "StripByteCounts" -> {7728, 7728, 7728, 7728, 7728, 7728, 7728, 
           7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 
           7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728}, 
          "XResolution" -> 72, "YResolution" -> 72, "PlanarConfiguration" -> 
          2, "ResolutionUnit" -> "inch", "Software" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "DateTime" -> 
          DateObject[{2018, 3, 10, 1, 58, 19.}, "Instant", "Gregorian", 2.], 
          "Artist" -> 
          "Created with the Wolfram Language for Students - Personal Use Only \
: www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{160, 160},
    PlotRange->{{0, 160}, {0, 160}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
u0wkvV3ZjZTFZriQoudXHiT7ZbUNyeU5D/TTDW6oV3iRanMVJ5J1dLqRpHMP
J5JfdrmRWgxzIsn9UzYkO/IbVI81+5Gtst5eKK1KkpHyeLkM6JIyNqSY0NKB
VFXfcCF161QoGZeYR7Wo3ugN1cU8ULFiqBPJ1QkvUg4y5zmssg9zOZKWWeFB
ioVzAkh9rx2U7roURqq9Y3xIsjUrAm3wUhCpz5if30954HcPUo4tHkTSW1GO
ZM2mBJEi84YfyVuW9yDlsAFhJOu8EUorXYPKc82j0KLm+6ZVNdSci7IqDnUO
IenIRP6UReUy30es8vG1c5F0YpkAUjQxc0qs6trmnjer6tG3fqR+ZosDKU/v
90NHmHvSrAo9lSNZoLwTSfNbZyD1xBJOpErdCKWB/AykTknpgeQLg8lI2miT
F0nmF7iQdGpSCKm82zOgjT4KIPWMRA6dRV7V3Bv5lEs7+ZFkkQxDP3vog47f
4UGyq6lRpJxp5lpZpVfNPYdW2QsHfUh6w8zts8rmJxlQmh1A8u593Uh9sUUM
yfsUMZBinfmeZZVUeAnKqz6KIUUzJ1SPSuRxW6T+RN6eRTLzcjZSlZgXg26Y
HkXyzm0NJJ2Q2GdjUXR6I4okd8z8s6csauboW1X5p2JIXtys91rVPXtHkLLA
3PNslV+tGUOKM4k9ZxZVRfNe0yoNTeRIPti8z7Mqa7bmSNb7RwMp5zzvR6rP
E3nKVp/tGUTK/Ym8Uot8zyYfkqopBpK1Ne/VrFIeMpDs7sUgkv62I4KU1crZ
kerKKBdSDs7KRYr1x8JIXqR7W6RytU1B6ulf2qETzkPFW9kcKfMS+4Iskr6v
BpE0b24AqdPMfAirpMZuB1Kc3+JF8msPnEjZ818/khtNMpG0dlc7UrQe7kSy
s01cSPWcO4zU39UNIeXFjw0kfWzOyT3lhfPpSN38KzuSr1+ZgVSrL6YhmfuN
3tBGQ3oixf3qmUi2dUsqkozca0fKPlEbUq/u5oDaTjiR4nRtD1KfnuJEqqLP
u5D6h6tQVeSkB0kP/OlGivcLoKy2x4MkpaNepDh7zIPkDRx+pHD95UHKvJN2
pH6tEpSMXuJA6oKPnUg5Px3KRuzBLpnoRlJV10CK273dSJpkzsdYZa+tcUOT
2kWgx+t6kPrWBgNJPI/cSNXsKkfK7X38SF31IUeKyhe8SJlTNIykH6SEkLJh
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
VnmvGVGkbGT211sVv52MIfnCW0Ekq3TSQKqZWzhS7jLzla3yfPO94Ckn1zeQ
5H63EFLXfS+MJMG/XEh1ck0QKW+9HkbynvUMpCj5FodW01C27ngISWY9TEPy
7819I0+55dX+0MzZHEle1u2QtH6J3kiZY55XrNJWidwxi/KzO24knW7uG7Qq
emSHkWTpeQ9SHjDzHqzyo5edUM2g4vmYHam2zvEh+aXJUOF66EayhlMCSJlv
zs9Z5TUT+6Qtis+3RJCszjonUuzaZkfKl1IdSKE+SUeyU7VsSFJ6VhJSlL6e
iWQXMxxIOcewIVXlU3Yk2foAyoYudSGFvaEDqddc8yJ5kSse6OOAD6lKptmR
bMkMN5IuNPfqWOUDvnIhabl6dqRgmzKR6uxyO/J/Dwgb9OhjO5I2OJaK5AXt
M5Hy0tcOJJky24UUr9XyIumceVB5KiWC5MvyofoPGkTSR2O8SPlJGQMqzL0N
Vml/MzfFqmo1zYvU0uxDtEr+K+FG8lZ/caSct9eH1PmFIkjewBZAMpuZP2FV
1OweQurpGzlSzDgYQNKG5v4lq7xbTSh55n2ojJo5pk8ZetlA0kMeqKj8thc6
baGBJBd3eZEsM9H/a1Gfn+iFJk/zI2XwVw717/YhVYnaEaSe+24IySuWMpDM
Zu4xtioD33IkGdQMKnZnhpH8x5NuJEstnoxUH9nSkbLixF5ImvZeN2jHt7pC
55aE8sk/tkJqUbE3kk860h0p69fridRpZr+PVVblEzdSLhkJpflDM5Gk30AH
kk0YwaEVpviR/IOqYSS5/I4fSad8w5Gq/uoQkiyZ2hcpV70Vgzq2RJFqDfEg
+U2VgySt86NIcW9kBCnvneZI2nlrDpIMk1GkKNQqjiRlXoki+dx72Uh94IUY
kp6fHoc+nJaFVM135iLl5b0xpP56UBTJrnWHkkYHcpCyhXnfZpU+Nuc2rOrz
Zj60VfLCkRhSf7LZgAYTudcWxdwqHCm7/5mNFHPWRZF8aiCCZKtHxZDq7UT+
vkXWQkSQytYFKs+s5ki6d1UMKdeY/dRPea6mHymWJPYNWuT1VkDliu4GUl3Y
CGV1zf9PVsVvzaD6u3NOJK0+xIUkrxbPR4p/WoaR+mdbG6QY+mcvpCz8JBNJ
ro3yIOXDYjlI3dHMV7BK/vw9jFSPrvqQpJF5P2FVR808ZqukWxcXkvUy99s8
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
8SLJ320DSHUicX9qkSxpG0cyx4QIkvQw95ZYVWVezUWyvpE4Uh9K9G1ZFCMG
+ZB6nPleYJWVN/MwrNLJHbogVeaSrtBDkXZIklW9PlKsrFIBqZ8rXgOphsWr
I+VXe5oh1YaTvZF8sZn3bJWFBvZFqlEHo0jxV70cpLpdOgadZNb5rcraSTlI
MvqHCFL0+9dA0lGnPEhV1MwPtirKJeUiaSuZhZTV3oKyrz6KIHUvAhUZ62NI
frG9gZS3P48jWebRGFKX/jAPybqMj0NL5GUjifgIKsZd7gd1fZGNlDu+yUOy
V2rmI6XrTD+kTjPrzFZVsWm50D3m3nKr7GR6HlLMHWUgeYsLWUjZPi2KFK/N
zEOyS8c5UnW/nYWUr2RHkKr2tBykaH45iOSTvo0g2Z4bYaRol5gPt8h6DwxC
42Z+tlX5z90Qkk5JzIVblI6ZPiTvYM5bW6UFtTiSrxgeQYr3jvqg1x5wpG6Z
EUaK769lIMmH3dxI9rsYgKRuEkWq1051QrJHm1Ohs9PdSJ77IIQk374YRUpv
ZgRJBn8MVXd+9CH5vpcC0E6F7Uhy77QTqd/4z40kfx2OIWWdY1Ek/+dJDlLe
+SmK1Nt+jCDJtt+8SDp/ogfa9Qsfks2d6keqL1O9SL6nuQ3JUsx9C1Z12iAo
a+eyI8XNcTYkf7wyEylq5dqROqM0lCye6ETKNrszkazOOBdS1RoEpSlhqLz8
oQ1J/21jRzLfWKiYtdGGVP+kQ6WjRwaSBJJsSBoy6+pP+WYNB1KUjjiR/J0r
DqTcOSqAFMcXQemXzwWRsshoN1KVeN1ASt0iiORnkqJIMrerF1rOnKexqmuY
9Vurym/O1T1lw3pBpLgdDSPJxsS+YYvs5FA/kjToA9XDSgSRclDEh+SnE88x
i6xp/RDyf59PQSRr1YYjyX/dwkjhLRVAEvKRB6k/vh6BzhwDlVMucyQZn5qB
lJcnuKATL3ZFknMf+ZF6aqYTyZ+12ZCq//dZSNY0lSPpyiMGkkzsaEeKFh0M
pFqf5kEylc6R8ugzuUhqdA4ieaUUN5LuaO5BigpjU5F82vokJJ2U3QbanDdA
yoP3KiBp1UFVkFqUbYAkxVgHpMzYAGVjZzughcw+taec1zOM1O0rGkg2cypU
rZ8NJR10AEnb5ASRquUiN/SLXA9Sf9HPi5RtXu2H1IsT7z0WyfUfYki67i5H
qixzbtWqePxMfyRLd4eQfNMncaSaezmCZCPicaT6sCxUDKmfg1RfTIwh2dxt
2dAfBkWQ8t9NuUhSqlE+Uq+8AZXFWRyp6Yg8JF/ePhs6rTGU/dojC8kjb8aR
YmjFPCRfnpGF1F9ejSFF52ZxJD/VMg8pZ3+Sg1TnD0SRpGIi58yiKLUSylc9
gIq6mVGkvv5aBOr7JgY9V4oj+ch0Ayl/N/dRWyUjoxzJPknM9VrUpFEIqQZM
4Eg+/3uoPhR1I8X5Rn5oQfUBSLlskoFU7Rd1QvL6vZKR5JVEv6xF1vIljhTr
fsqBOsz3RKuyQ2sDSZ9914eUbXb5kUJyG5JUmmpHarvZ72OVcBGCfrM4ihSj
zVxDq/qVoVFotf0hpOxu9h1Y1fvN+bOnbP0fR4q8tT4kvX/ci9TF/nIgZdnE
/mOLtOkyB5J9FfEiyaOONuj8z+1IVvd1G1JGEvVpi7rUehuSr/3BjiQ/mfXh
p1xdBcobOd1ItjsLO6GrA0l6b7Aj9cLRUDHyZQdSv1ofys6n2ZCkhweqVu63
Q2MbwkiyNNUJPXLdh6SkpBcpj1aPIcl2M+/KKq1qzgdbJYurBKGF/REkvXAw
BJ1kzvta5XX2upEs5OdIUvcZKMurFEHyH1d6kGTzEh9SlbnjRYrpX4WQ9IvW
biQbm6hPW5Rbn/cg+QeJOWCL+kXz/tsq133CSFbiMx+SLr0L1fvM+W+rwnXX
i5TPm+dsq/RCizSkcpXLhC6a1xvJj3eOImkhYSDJdx9EkPRArzyk6v6FgRTv
ZQSRbO0cL5IvYGGkbPkuR4qqRWLQ2pfykfzgLB+StUvMZ1pUr1RPQ7Iu89OR
qnqhnkhabFsXJM860BIpHm6rD/UdaIZUdV5viZQ3j3ZFEj0qBUk3DDGQssHE
LCS/a/anWCVzk+NIuT8x32+RP7wWR5LftxhI8fdN7Pk7UH3RzH+1qsom6s8W
5Xx/NpIM+L0v9N0xWUhe7EM/dEtibtWifHZGHtR2IgZ9aWgcKSbcjSHphZoF
SBY4HkPqeXX7IkWTMznQnDl50IznspF8XAgq9o7OgX7WIw9J1cU4Uizdm4uU
5UpGkWRTfi6SlzXnua1q3grK/x979xUkZfGGDb/JCIiIgGRakoggOQgLNLCJ
zZPzTM9sJEiOkpokIEFEEEnSSEYyIlmaDAqo5KgNimQkiGT43qpnjh4uD96T
r+qt+nvyO6G2cJndJ/R9X9eVn6HsjXG5SFmjSCa0VutcpFheOhOp/CNzoIey
I0i+fEQmkl1sEEbqt4xea7Oq1UdhpO5bNguaZVwfzMrO0yNI+vl6jtTlonP5
JqnVmMM1y1snRpAkNdoHZlL82jEMnfxlEEkb5lqQovsuB1K3TeyNZJOPZ0LX
F+6IVOdmZCDZ3p0u6L4PvUiyxcgrNavrjMdm3AshycjvPUg2628/knxp5Oaa
pd2M3OhX3NLZg+Q5nbsg9V4jj9Asf31/GMnaVY8gdZ95PiQrHONFqg0HfEhe
yO9HsroJPqTaWNOFFDu325Fq+2woz9fbiqTL8qB88YoM6IUOVqRMWWxB0j4v
rUg5tZ8NSf/814pUqfVsSD3ruBVJrw22I2VKAygvudqBpANv25BM9YGK3dXt
SNLGY0WKn+a6keSm24ZkN+wBpNq8yw/db/REmRU/GT/fZsmvb0JltfEh6LXe
bqSuFN0PMSlmDI0g6arNASgnPiR3Gb24ZkXsNI4kfacGkXr2nABS/bAUKs6f
gbKHRp+wWamHhpCsnPH/94o1l4WQ/MPP/UjyceMgUv1Tw4fkBY0cqVfstsaF
JMfGhpB61koHkg3KzYT2bh1AiuLagWTTHFDaNjEDyddUSUGKQUbuo1m6vJET
yRY9diO1o28OUo6iPqR6a7Abycu/70GSPZd9SPZoBzbLeF/1isu6eZD6cgEH
Utas2gkpTr2fgiTvV8tA6qvzoGTc+bZIGhofh9Sur6CqRaAjdH/5ZCQresSJ
5AcWO5Bi3kUbdLI1gOQdJ0SQ9NMKPqQoaOTJmZXt2viQqtYPaVBm7A+Z1aN3
ZCH52iYcKVtWSkHSmwc9SF7auC82y3r6OZLftTqR4rCRQ/CKias6I8mfdyJI
9l5/qEx7GUZq70cRpLi5LROpnt3OQspzoyNI8o5xXmpWzY3JhDZoGkaymsMz
kWLJoCwkP2T0mZvVVZ/nIun7uwPQ129EkGTPikzoUuP7bVb+WCQLqTOM506z
pLrR42eW1rBDxdarUNLb+D6ZlatWBpF0o3HfZJblDQ4h9YCnHMkLR6/PJlnN
k1BCsjiSeb6BqtRrfiRtPZkjedrPAaQs3DiCFE8GeJCq2gaOZDs+DiE12+pE
so+9XiQturonUow0nuNfcd629kh1bHAKkhxoZ0fKNx96oPuSM5FiwNEAkg6I
zvOaZHleJ1JP/Q4qB42wI1WlSg6ob1UYKZmRm2iWVrWHkXz8ZSi7VjqE1P32
epCs2hyOJIPmhpDicnRf3STZctKF1JkuqLS850Sq8ZtdSNZngQ1acqYdSe73
t0D3X4GyDXdsSL03wYqUcSttSHX1pAVJFpd1IFmB4xakGrXMjtQ3jP1ys+pf
4UCKG5/bkOz++gyk2GP0Y5vVhYkTKbuftCFpnVZuJL9+24GUhZICSF7CmNc2
q8s1DiHVsp/cSH1lTiZShQ87kHRDThApPzfeb5kVQ30RpEwZ6kWSBs9CSF3u
Izf0C+M9qFnZ9Q83krz9Dkfqd++6kPSXt4NI8miEB6kmR+cBTcqTlVxIUWVG
ANqolxtJ3isQRqpB9xxILUqFkPIvY5/bLN1+xYNUa4Y6kHRrkyBSNGzMkeTk
hkSkckeSkSSzcgJSrxiXguTEyD82yzo9diHVuN52JB1h5IGZlbeN/ACz7Fwt
P5I/NuadzYpxo21IVe9FIlLu2tQRydY9ioM2P5KOVK5BKUhydqQLSR/ldETq
EkbvkFnWZ2tL6BciAUlut2uPFMPOOJEyoL1ItecrN5JOjPZPmyTrjFwQs7z5
Sijd+g5UFS8YROqcBCeStzjpRv7XfSzZYpxXm1Xlr4WQ7MKVDKQYtcyGlCN/
8yPJvMYB6DvGfaVZNbjZR0iR/LAzktU8nYfk/yyH6iNbspEy7ac8JE24loWU
KrrPapJM7JAFHf2kM5JdmB5GkgX1cqAPos+dJvWSaO+QSVJiQRDJe7MIkjzW
HiTNGJ6DVENyQkgZF5OFFC+MeRmzssSUbCQdQYNIdvFQJpLnM3qBzKrMYzlI
3s54z/qKt5dmIsnAYz4k7WH0NJpVa1Z4kORTY6/drBp21IfkycY5vFnxc3Re
2CTJXhpB6tHR+zmT9Hz0PNgkKVPfB11bP4IUhfp6kOx+nh2pvoruw5nVlXsj
+YbUbKSYlhYLLXEqDZo/6Eby7l97kST3MEeKmEluJK0Y8CJ5KeP5wKx+YMx/
meW9K7iRdMlRL5IcOxJG8sSkLkg9Mz4bSVY850i5sY4bydbF+ZDia+M68IoX
fobypUYvpVnV7aELSRfUdCNl4n4nkhcznmvNykkvLEhKa2QgSeu3oXLcgBSk
3tnCgpRjZmYg9c9N7EjSKJSBVH2fWJE04QVUzjCed83y2ylWJAkaz69mZWkj
d9msbmG3I0UBY4/ZLAvOgKrO7zuR8ko4iCS75oeQvMl1qPytuA/JfjH2Ucyq
3p+EoRNPQ+WZXzxI1iomgqStv/QhRZM6HEn2NvUjefzqIFI0mh6AHk4PIVXN
7l4k3fLUj5Q31rmR7MwSH5L0+jCA1Ifv+qBFlweQYlAiR5Jjs6Fqxc4wkr31
WiY0s5MHmlgdyvVYN5LZ/+bQfjqAVKcbuJDEV9uJZNWtSdAOUxKRcmL+BCRt
8sSBVC6rHSmbbw8g2cY/ofzHzzxIvf/dMFLt+sOPFPMaxCNl2yXNkfyrOq2R
0r8vDsmb3e6AZLuHJCL1pYqxSDL7SQJSFqkZh6TVtjOkdKa2QarDhxOQgkXf
S5pUmzdakWz+Zihdt8+BVCObBaBbfoPKUFE/krdta0fqHjIDqRbUdyFFl4d+
pKS9odQSzRkxKeb/6kDyxg3SkXrweDuS3zXOyc3qYj8FkWRvwUwkfXwQG/9X
HlLv+yMTKTy/ZyF192XZSBo/Cqp/NnqGzcqz3kwkOXUijBRlKmci1ZPGYSTL
9WYhdbcjEaQqVCiI1OduB5Cy11QoHewLIuUlo5/HLL/xPZTGnM5GkpSECFId
r5uDpKXOhJHiuZHHY5Z1M86ZzYqUdWGkujUiiKTDJId2/iSAJG9d4kg6yuiT
Nyu3eTiSVh3vR7JH+TlSpX8QRNK6uSEkq2LcH5nli8YHkHL5WCi3rYYq71kX
UmwL+KADb/dG8n7RvFSTbNDTDkiZ8HUqUmUftSP5P0UDSLaqZRaSVPrdg9SV
jN4hs//n382N5P3jPEjZ65AD6n7bi9Sx0RxBk/JJ8TCS1TD6mc2KVsZ7d7Nq
71UfktCRHEmf7oXK/cb8mlnRbIEfKT+vYkfqapP8SOnJ70DySo2gzLY/A8k/
LWVHsqb3U5AkPCgdqWdfTEHSp3UtSJLogopeW6D8ibFHa1YOETYkO+yAipP/
QHmjb+1I0uJdC1LdybUi+fQhHuiKfBGknHnLgeQ1pvuQosJBP7RHoWwk37XA
gxQHVkeQrPu7QaS6UCATKR5sDSLVJeP6b1ZXzPMgSfpqjlSfDA4iSf28CJIf
HeFCKpLAoX8aewxmeXatCFJVzHQgSWHj59Is7WfkLpgVm6oFkHJghgup+Qce
JF1Q2IVUvk/DSLnQ4kGStj3CyP/6+iIu14NkqRVsSL3loQXJzkffB5kd+WUI
Os3o2zErb+22IMmgGIZkY1vZkdxt9DOb1d8W9CHVzFEhJJ8z14ZkPDUTKWKf
ZSD5luOdkKpXqyQk6RnbATq6HFR/Wqo9Ug4Z2xzJXDQFqaZNb48kRS9bkHIc
b48kB3ZAWdNDDMlvrItFqs1r05H678p+JC0TF4IuLJeDVHlfR5DyYP5MJCs1
0YWUMze4kazd2QBSHCjjRdKJbqiOMc4DzfIDVwJI9tZWD1Ills5A0i8G2ZDE
WteHZDOi88tmMxp2R8oRZz9CirGf5SDVtdGdkbTe3hwknz8yghS5+XOgP36Q
De0TH0SS3hU5dEm7IHTYyxBSFjTmfF9x04EIUs8Y7UWquYVDSLa+URCal5WL
JLGVs5EsLQ0qvojmo5v9aVI2dM73UL5ySATarimUNDLm8c3KCSWgepIMItWP
1aGMBQJIsTnaR2GSLKgSQvJGk8JI/XKTHzp6QQjJZ7wdQZL7rTiS+3v6kKrv
a37ojGoepKj4oxXJnq7yIOUHZ3ohxbSaWUg52xqPFKfyMpCsbl0vUn39pwdJ
nvSLIMVX+bxI8vFhH1IOsTiRolBcGCn7DAkiVanBYaTs/i6UfXU0BylPXA8j
lXOpGzo/x4uU99uHoSuiz6Nmi6zxIUXXpy6kutvIjSQ5TaD0YjSn2CT/nGUg
VdWt6Ui+cnYa9GJSClJ0KZqGpK8XzkCyefXSkWrbTAuSFjXOe82yHuWsSDHs
JZRMvWaDVvvbjhSpi11IVm6HE6lWRaDyzUgASQ4X5Uj2uAyUfvxNGCmqXIOq
2pwj9Qf3XEj5hpG7ZpZeKh5Byl4FfEg2+IkLKQYZ+/1mecWRmUjZ+p8AUtxs
DVV3k9zQX89HkHx4vyCSfbAlgCSj6nuhR49xpC473oNk33wQQPIGx7zQEct9
SDrunQCSLC/CkbzFmACSHrydidT5Ihyp/m0YQMp90Xl9k5Q8cyLlsBXpSPbz
x3akehjtpzXJCv+eAe3cIRGp9u9MRbKhE1xI0nGqD0mv27E9jHMzs9xWM4AU
K7t4kfzwLTtSfrfQjRQFSzuQfDRtjJTNeB3oe52qI1XCo8ZIMrBQEvSH2Fik
vHGyI5IPM3KzzMqRyQlIMr5FLHTe+mQk75ZlR+rrb/qR6oNKXqQu4AgjFWFQ
UnaUB8mqfhxBkrSWViQrdtiPVMWN69IrXtoWQeqZy1xIFvOuHymDg1xI0fUD
qHrH+Pcxy4eMtyLFuRNOpCrgyEayk5ezkGJttUyk/DQhB1rIyHs2yzevgerV
9bHXLoSRpGpaAJp93oPU/br6kCr/Ro6Ub9cOIXWzD8PQLkYulFl50ZijNEv6
TQoiWbF3Q0habWomUtzrA6Ubjf5hsyTL6DEwy17PCiNVh84RJP36AZSXaeRF
sqV3fEjq+NaL1FeNuTOz3F/Bh5RnFkLJaWOuyixVzUJI1v6yF6nbfsmRbPMh
H1LWrs+RdH4dJ1IdTvRBi0V/P5p1FHMhadlhbiTbNKknUm4rn4mkM+rHIuVn
T9KQ9G/j/Mos6z3Zh9R0NEeSmX29SHnS2H96xXlLnUhR4KkX6ovuxZpkTysE
kHy7MS9jVr7RO4wUBw/5kfLyBi9SxD3m0EHvYD+aHEKq94ze0VectROqX//d
BV3EoDL8nhVJZTUbkiSQDCTNfJkG/XFUMpKcXJWGpMGsDCSP3ZSGJLXuWZBs
WUVss+oupL4Sna83W+0PK5JOMHqJzapjWTYkKdzciuQJf2VAW7dxIuU0I4f+
FV8UciJ5yh8hpKho5KOY5RdKZyHlujwHUp/dz5Ey4bobSfdF++VM6u+n25Es
vR9HqvAEO1K/FX1eN6l+vudEkphvg0hWv4AdKQ8/4EjSuoQbqdv/5kOyUl85
kaplNTd0RAEnUt4Ou5H80HcW6IvaPqSk0flck6zyEI5Ul4z9HrOy2Q2OVDVW
+5C0HHdA2yyyQt89Y0GSidOsSDVtuxcp6nnc0EXDE5H8GbEh1UftQ0jWZ1cm
ksassCJFdZcXqbYbeX6v6F7lRMozv3uQokVXJ1LvaxKDpJUetUaqistrIslP
0xshZbmdTZB8fKUYpKy/OhXJ75zKQMou9aEspVcHpLy2LxHJIwUt0O7RHHST
pN1LqE6f6UFSspkjWcGaIaR8MSaCJOnHPUhhaQZl/Xe4keS+34eUn7weQurs
OWEk/XOmF0lOG/M7ZvVfpb1IVuETF7RZdA/GJK98JYxU3xu9mmZFvR0cKTe2
DSDZUeN83qy8uiUXqVbO6YzU5y9FkHJ0oyyk6P51ECnnGfmyZtXA3i6k/HWN
B6m0kWdjlr3cC9WLhoShk+ZkIdmUvDBSr7yaiVRH2kegVe5kIenU3bnQ+ec5
Um2pEUGSXzM4kpN3Ikjd7ZIbSXrcDiK1dXgASZt1CiL1T3Pc0Pbf+pHM2tqD
JNd7BZHycMSNVMNlGEna3vQjeX8Lh0ojh+kVL6YGkYqXcyPpgNsWpJwhnEhG
GvVGEvunuVDfnHgkKzs5HUm+KuRF6kcUSibJEFIv7e5Ack9TL5IE1ziQPD4m
hGSti0Fp5HImUs+Ifi5NqrPRczCT+v0DISTf+cCHVAd8AaSOXwzlG2aFkGz3
ED+SDzV6UczS8iX9SPLxEgdS5htjQ+pydTOQvE05KP0iNxWpBkb7RkzKRu8k
I+nHRyxI3WZrGlI+6GtF6nHP05AypbgVKbYdhvLXjOcws3pLRSjL/5YNKQtU
siBpp889SFmrhh9664swkjw460PS/ZU4UpOXQSQtuy0MLTXEhWR/GNeHV8zJ
8iP5+0khpP4r2Qv9/UIAusrYdzcrtswKIEnLz1zQ/nUdSHrIyGMwy/7u40Xq
dL8DKSrNg5J2U3xINTE6Z202rZwdKedi1b6jTiTfVd2HlB2j+zpm3UZP8iu2
MXIdzNK1Y6Bk03I/dHefMFJt725BkrkToar2/Q5INjbcCamPRDoi2Xhjz8as
mlMojJSln/mRdOt6B5L/UzmMJOP+diFVZ2Ov3Sx5+KYdKT5eFkbytsUtSNJ8
Vgp0z9XW0GrHGyG11d4BSYv2aQr9akcbpCi53oqNsSH53oFWJL0/PB6pCley
I/X5RAdSlO9uRaqfW0P5748d0AN9/UhWZStHqg+NPiKz8pQxP2hWbeoWQv6f
H0wPUrE8J5LnFQ9Bz0Xfq5lkVXpmIcmd4V4k/emPMFKUKZeFpC+3QEWNYQ7o
mJsRJAtd9yDlH/NCSFInJhuplvXoihQfL4Tqk7UjSPnNRwGkdn7jRZJQUTdS
vxzkQfIvWziQIjnaP2NS5qVnQacfDCHJhN85ko+9kgWdYPSFmmVfdcxGiuQ2
WUhGbmUj9e5obpNJfrAtVLQblwkNvpmF1FOMeTqzoufiMFIX/COIpBfaQ2W1
/CEkfXuHByke7Qgg5arxUDYmHaq7lfEj+YSiIaRq9zmUVSjsQYqmxn6YWf2a
0UtjVrX72IHkttUepNhIeyPZuLZhJC/5exxSV+yfjhR9i9qRbK/0I/X06OfD
JEsNe5CKRvNDTer3S3iQPLAMyn55iyN5m25BJH29LUeqAgEoyf3Hj1SvdeVI
uiInjCTeBQEkP/oohKR3nW6kGHLLj2R1VzmQ+rOGXiQfSG1INmwBlDhLpSGp
6GaFFiubgtQ5rTOQIr1qClL2ep4BzZMWpCjU2Iqkv75hR4rPzlmQdOHodKTY
Ee0lM6luTLMj2eEJGUh5dooNKa5V8CDZI2Pu3izvUc2PpHtaRZDSXiSAFGf6
hZHs7hGOlIkNs6Avh/mQovexAFLWuONFkhHGfqRZUeSQHSl7PvYiSXFjf8Ks
/GGzH0m+KW1B6s+M+WizakV0ft2k0B94kfzZRgvUtsaK1Gv3W5D0u3QfUp19
3w2dvyuI1N53OZLPNnoDzLKSj7xI0sSYb3rFup9nIPloY77PLGv3TyaSP8xI
QRJP5TikPvciBsm73mFIOaWtFckXPXAhZYm37dAp0TwGk3zipy6krhbnQPK5
oXQkW2nk95vVQ9r5kezMIQtSdzdyr1/x3aIpSLWmfwskcxxqjOT9StRBMj0x
FkmWfpmAVL17piMJ6WxFqi7udKQ8fN+NJIXOQ1XF6L6jSRHTiSNJsedWpKj7
MAyt1SOI5LdWhpE6O18QOsYZRtI3JnuR/M4VHzQ21YtkE4weUbOy+uQsJFmV
F4KmRXspTHLffTt0zlo/kr592Qkt0sCCJJ8kOaFHB+dBh33QHSmzZmZBy46H
Cn+xPKRSa3tC6zzxIVnmMI4U27wOJH9wPIykf+53IMXKUtnQjxxBpJpbPhPJ
LSXDSDa8QC6SkiscqTqMyEGSF2UiSOHOyEQqm8hCygE9w0jxrzE3/YqFfw8j
+fxQBKmXng4haZstfiR5+TAELTsCyi5fCiL529H5VpOka5UgUt9aGULyXleh
tHl8ABregPX2DCG147wTSW+lWZBqRaobSX1f9UIyd4FsJHm9ZSJSVolNRYq7
0o3k5ZtD1fykIJLPv+xCyq4PPEjxsqALyfYZ+xZm6e5NHDrPEkaqx9HcUJNs
9NIQUv2S6UfyIfUDUI8xd2ZWnjb2182Sy9G9QJOiaIwLSZ40wK4q7kby7x7Y
kapd9P212QpZ6Ug996s0aLkuqUi1bm8aki/fn4qkswZnIMWp2HSkLmLkT5uV
A4dB6dVtNqTaYpwzmGWTalugn/o9SN3gkh0p/m3sRdIB1SJIEhgdhrqPBJC6
4g9uJK/dJgTtZsyxmhUnbviR9I+jbqS0nw8i2RtGn4ZZ/bBOAEk/H+1HqkrR
fCCTclMwhCS1LFC5xsmR+tZGJ1IN7u5G0nJtPUg2uI0Pqc4a92Vm2flrQaRM
ynEglbc+dkGOCzr6WxuS16qfhhQ1d9qR6tRYK5LUvxlCsp7Rc1aT/NTDDKS4
WTIdyfpF511Mip+NnthXTM5JQKr3532IlKUvNUSSZbs7IdmnPeOQKlLTgqQV
pscixaWxNujd15KRdGQcVGz8MwXaIppnYJKfN86LzIqKA1OQauU5J1Ke9jMk
W/djByStNxrKf6qSiiSf/9MBKf4+2AnJ9KlkpFhiXAfM6rOrOkELLklDqn8y
7Ui5q24KktR+bEWycOs0JI+PdSHJz0fsSFZ0nwvJd1fmSDVggBOpZxufO7Pq
0WEXktarFkLKaYM4dIA1Hcnq13Qh6fY0O1LsaO9EkqXG59Qs3T3GCj0zyo4U
k433AWbJW5NzkGLsu15o+0+zkazeX3akbjuyB5K9dy0HSYsac8GvWLeXB8lq
PEuHrl+SCPU/9EHDqyJIeczomzWr/9oZQZItJboixa3o+b9JlvQNlNw7kY2U
W+f4kPrqhUykrBB9X2OSjNERqBoUQMqEuWEk3/Q4AL1t7N+bZT2HhJDyh0te
pCYdgkjZtFwAyRekQcnooyGkLLrYi2TSyHcxq9JjPEh9fyZHyhGr/Ui2L9aL
JDeNz7VZUXBRLyT5slMEqVc54qGzNqdBnVXtSLF0sxfJr3wUREq9y4VkZ7+w
I2l5ox/ArJg1PoTkh54HkWrzUh9SfpUVRIqWZXxIPfgzP5KWGRBAiuZGDr1Z
Sb8MIEWhaA+S2T2n7Ug51tgrMiu+7+xAypdXodR+w4LUx2rYkHzkgAyk3ljE
Au3tT4UmGnvDZunr31qRuiu3IOnBiTZorfFYbfSJmdWHyqYh+V+Hk5DEUjAD
einOi5RPExzQZcqNJI5oLr5JtnNiJnTdCw9Sbor+PjPJv/jAh5RpfTmSXKro
RfJ3jHkHs/JaaQ9SiwphJE8z3nuZZUN2QMmdMRak/v5gEKleC3mQvNGnXiRt
NMWK1H8O8CLJ3EwnUn59wIdU5zq5kOzhWA+S/nvOhmRVH1iRfGVxG1QPgdLv
nyUjVZViGUi58konJC2/OB7JY2ukIcmcIkEk4++4kDqB+5FK3U2Bzh6TjKS9
LsQjSYF/O0BrGM8rZnkF4/eTWXV4WhxSHjuXgaSlikFV3ZUpSLk9MQNJM89A
Sd856dARSbFI0SrcAZrla4akPQZ1QOp742KQvMzwOCSbs7s1ks9cEock9tmJ
SN5lqA2pq/9iQcp76RxJSnd1IFntb9KR1LYgFSkKdPMgpW1nBpJPs7iQcuvP
aUjdMV8OUn5bOh3JMmtxpB4UY0GKmLYuqHNMBlJVaw6lVUd2RPK/p1qQrM9w
O1L1CrmR/PsTqUgWXA8Vg37OQJJKk+xIXXmdDam6R99TmuRjhwWR8p+kXKRK
j/arm+RzK3eGWqJzvSbZ86JZSDr2WkckX1/ShdTfV/ciqfe3TCRPM/KozJLc
uREkL7iOI9XlFtlIfux8V6QaNZAj+S+NcpH0fvcspBh+AMp8xtczS07/G0GK
kuWCSNrllxBSHZnnR4q92QFoQooHetXIbzarp/TzIdUzo9fILOmdFkSy5otC
SNHCyOUyy4YZ5+pmaVuvF8mHF3Qg9fvMiaSWQ72Q/MfEbCQtXDIBqe5WSkHS
BXY3kica84Nmyc/GfIRZvb2HEykuDfYgdSOjP/MVW9zORso2nTlSX97nRcod
N3xIsaRAECmX9QpAP7vrQbLlPICkgQshpHYa/X5mRb5pPiTf/5cLSUsY31ez
anpBO5SUtyJFfGoaUr805nbNym+bpSHV+hQL9LaxZ/aKqrcNyWK3ZCBp0jY7
ksROzEDSS40t0KWN0qExPW1I0e2EHbrYyDcySyd4XEi58zOO5AuehZFkSDko
/fWaEynvnw8jxXfROQuT0vJ5AKnjz3qQ5KsHQaTKNc6lzZKZ0V50k2pgHz+S
l3jkRLJJ/e1I7Ta+nlm+9bkLSR+lO5BsUmso9WR5kSq5rhua6PcjWfdcKF3U
DMpbn0xDsjO105GigNMGvVUrFqlLdHMiRUq/JGhkdCpSbZ6RhNRXv81A0re6
pSOJ+iiCZNOH2KGja9uQYmZyR6R+etOK5Iu+jkOq1sZ12Cxpmz8VKbdcsEHv
dE1BqvJFrNDOd21INqiWF9r+ego05i2oKDMnFUkXG73Hr9jobjz0wKlYpNzw
tBOS031JSFZ3eUdo/0MdkKpBKB5JXG/ZkSK5lR+pC+5wIMVr26xI1WopVJ77
yYMkTcvbkXKJkcNqls0Zn4zUjuYeaJX6ViT72ujZMKu653cg9a3yNiQv/ls8
kpb4JBGpVx9ri5QjHycjBU9wI2XX79KRooPRC21WH8jnQLLus5KRfIeIQ1LX
N4lIvr8DlM2s7EBy21Q3kvRu60WKPj2sSL3FyNU2qzqcSUWSHbEtkcI9myHJ
jNUdkbJbg05ItXqdA0nuGX3RZkX/J1BVMD2IJP3eCyPltr+6IGmHamEkiauS
Cz3ZoTP0HW82kr3ZA7tXc6RYvicbKcfPDiPFsJMcSUs38yHVkNJhJJ26z4dk
B9aGkKquMd9tltVMDiFFGWsEqXobc81m5cHKmUh9KhxAqveM/sNXzJcfSi83
6Yck5XaFoANaxUNHrklB8g7pVmij8h4kWf2GHymIw41kF2ZBZcWMEJIkR8+j
TFIy34cka6tB1VLjftMst37iRoqB3iCSli0G5RtvceigkB/JFoaDSP5igQtJ
3jPyv83K8sk2pBI33UjWq7MFqQ+st0HH5UtHsvWP7Uj5bGA6dJfVAvWehrK7
/W3QIdUzoPd6WJDy5MU0JJmWlQId6U9CqnbdbdCGCzlS1ijtQuq9HQJIVn4T
9na079MkWVucI0XtaF+7SZ1634Nk/cdyJC3T14/Uzt+CSNJ/hw2pu6/1Ivmp
0m4knTTBg2TDv01Fqgk/+qBFFtmRvIfR+2GWTSmShlSTj7iQ8vo/TqSmrTxI
8nKHF0nPL/cgeVoPL3TNr6lI3eSnDCSv39EFXfqsHVJltWsP3VyqOVLGXGZI
pqo1Q+ruFRiSn1KNkGLVhRZIHd4ajyQ/NU5Cyk6Fk5F0emsXkl+ta0fScmke
JKtwKB16+Ts7kn/qgsrtDxxI0WVDHFLdHwPlX+RPROq9D5KQ9MM3OyHZxEcd
kbretvZI0jYMZTNHdETKfjFJSFIhmIakSastSDalNZS87OeHdsqBsmEZYSTp
NNsHvTmtG1LsHxhGsttNoWT1b1Ykuxf0ItXH+X1I9sFcB1Js/tqHpOXyZyBl
jPF8Y1blK5aIFN87UqCkEnaqkXtqlg5914Jk40+mI8XaT21I3qdmGpLYRRJS
eUunIvXu9yxIuqENVLwwcvRf8eA+N5InvR1AUuq1I3WbTRlIVm1PClL/e8iB
VI2LOJE8M78VWqKnC0nnnvUief1bYaQ+aOS8mpV3n3IkWb24C1LdnZgLTSrW
FUkmL45Ai8zujOQFxuUiZdlmUH3/UQQpnTkcSV+GI0g2rWUYSXdG87FMkoJ7
wkjK82UiZcORYSQbMhc7uVwEqYIsE0m/aQtljfO80JLRvByTqlCyCyly1/WC
5tueiWRJ1ZKQ/PwCqIz50InU5f+wIenL6HmUSVLE6UHqcs4gUk2+7kfqNZW6
IoVrcACpasd7kXRydQ+SeOwhpMhXwYvkz094kDQ51Y+UNQMhJLl7zgfd0dqN
5EtinEix/44Dqbb1tCJZJ2POzqxq3zcFyWbuToWOfg7lP9zIQJIzz6A89MKG
ZOcdGUjtuQ4lBT5PR6pDfdKQLIdZkOQ+syFFx2cBJJ1UN4gUw6dxJO0xKYLk
f4yA0ncdIehbOXakGvWNH0mWfhSG1lvuRupuZ3xIujMfVNmjvUMmyZO/fEh1
uAqUdd7jQMpjVTlST4ruK5gk5W65kazHExs0/XWoiBhzuGZZ2OhLMStH/euC
FivpRfIpR5KQsl+TRKQe0jwJKQoVsiH1lB4dkHJr7Rgk3/FNE6QY0vpdpP53
Q3Wk9LVqiRTfdaqBlDdutEfS2CPvI/n9ylakaHKqI5Q+cyHVxnQLUk4uwZF8
y1YrUl5IskNdv2ZAJ8+1IMnQQDJSPDDyol5x3i4obdQ7CSlLvZaA5JRD1b1t
adDv2scjpWzXCSnKJ2Ugeb8qaUhxZbQNKXeeSkGK7sPSkeyisCN1jw5hJP9n
eQg67qts6KxRTqT2tstD8jpt/Eh9NS+AZIWNOSCz6p93fEgeXyyAVIXXJSF5
q+XJSLG7fAqSNPssA0lfbI5Hyt/Gt0KK3E9ikeq73XFI4esC1XpsApK0fDsD
Kdoe6YBki5vHIsk9Y37ErAx94kUK9bYDqXwLLdBNxlybWXLGOId/xeHDkqD5
+7dDyoG12iPp31tjkWTujWSkdpy3ItXZTy1IfnGFDckWGn0yZmW9oRxJJ1zO
Q4otv2dBixXMQ/Kyp3KQ1DYOKtMacKS49S5UWz7OQtLT8zhStCvqQ8rvP4HS
w4U4klyfDuUlozlMZktV9EG7hDhSTF8eRqrxxt/XrLxwKIzUHSZyJH/4sQ8p
xhh9R2b1LNYHSY/v4Uj99lvxSHW+WTKSVNmQAX3fuG6YZZ2uuJFCKx9SH87n
RtKhm4JI9qxGGKmHCReSvz/EjVTFdgeQsrQxH2RWHDA+d2ZJcpEQkta6z5Hi
z+M+pLI/cyNZ8Ac7kvcw8njM0oIpDiRvct2OpFXftEAPBq1IUdbIYzPLqw+2
IsXhFlC9fYAFqX5w2JCkwO0MJDs4Ox2p4h8mQuvFJiPFb3nxSHqgRwJSL+yV
gVRdZ3uQfOhMH5JZm3Okvmv3QSusCSLVwYZOpFRG75BZfWC1DUk+NvJHzdId
ARdSTDF60c3qgUusSNZ3XhD6yUEHkk/Z6kWqw9FcQJP6aB0fktUx9l/N8vNv
OpH0tR4ZSL7llAPJavRxIWkjI0fWrJy40o/UJ/LbkLLpd26kurbKipQnvktA
sum3GJLMmNgQWqhSVaTo1r8ikiWfL4akHzd/G8nvta+CZPkuvgnNGdQCKRN1
c6Re2CMJyff5saUSM5E6YW8QWtx4j/6K4xt3RXJyNxNJn7NeSLVwQQ6SfPtj
b6R8cCsXSe6d7I3ks2VP6Iz7g5DaVa83UtVqNxxJvZWGIEWZ7f2RuqznYyTV
zwRSNesyEMl33BuElEc6j0GywocGQL/XQ5Bi5le50N2bc5Cq78nOSPFh2RCS
TBkE5QOuOZC6VSEPUv4hA0j60RUo+2u7BSm/eNON1Odm2ZCiZUEnVA9vgyTH
n9iR0tk+FimUcZ9ilnTLn4TkzWYmI+nUzxOQcvOWDki10dYRSW8mN0ayK0b+
gVmyaFcH6MYPbUi2XaUiefhdG1K3r5GC5Nk7Y5BqlS0ZKWuTNCSP9LAj2eL3
M5B0yi4rkn0Z7VE0yasmBZAy90Iekq7+JRupCm3MQdI2BTOhry39CMk/+4Uj
1W1nDlJ8/kYYGu6QDX2Q5Edqh4sj2U8DvUjhqpUJnX/Sj2Rz6kSQNNbYbzar
qhTOgv7Zwo9khWpnIbVjqQdJZy9yIOV7f1uROuGT3khWr2E2Um3JTUKKD9pD
ab2pDuhRIzfCrC7WzoeURYp6kXpFfY7krbwepHzs50h1KpoPa5J8OdMFHfem
D6nZdC/UegJKfjX6qM2KPVugMnjKh+RFS3mh79mdSHW0pwOp7za2I+X6gBUa
qW6BNnSlIvWZby3QGuWgdGN9G1JVn5CGZK+NtyLV4bkWJP1wAVQeGRuLJO2X
JiJ5393xSPrkehqSxX9qRcqvch1INayVC6l3jwsjxUkF5aH3ofLGMBtSdXng
ROr6xu8ns6LotQB0Qk8PUh074UDqNc39SL5vQRCpZzf1QNd18CH5y1NQ8kZ0
D8MkG2vktZil3xV1IPX6kXakrNHUjVTXCzmRssEFqPorLojkI4x+MLPywmQf
UtT62o1kW2JtSF00pSNS3HnUHEm77mqAlH9crIoUMZFiSP7mmTeR8s1qbyHF
qm6tkfS7CW2Q+tBvTiQpb+RtvOKBC4OQtE7DMUhZpPgMpN68fAFS9T0Eleeb
LkPq8/2WI3mw7/dIeWLMTmi/L7ciabc3d0AbT1VINX7rT0hd6Oe9SHqk72Gk
ODNlL5LVfrIbSXdd3IHUts4KmnZ1L5LkfaSQcm7J9Ujy5cDvkPzb1xcgSce/
ZiBFyomxSG69NhRayNkVyZZNCCDpsQMWJP93jx3af4wLKebzHCRpdsGF1L8Z
8xRm+eI0KBX3M5Aka2EnpE5bH4uUp0rFIfV5ezJSFc7nQson3likHp6UjGTr
X2uPFO2zGiNp07K1kPz75Q2RrLevDVIUWgVV9aqlIMmvCXakfFy6A5IUfxqL
1HVPpyNlS+M83yz523jONsvjbjuR+klcGlKePm5FsreMnNpX/HdCJlItOhhG
ilbFcpC0ccvOSJ0chPKzRh/1K54emoPUvUKdoaUGZCPJsOi+skm19bUAkrZ8
lInUU/dxJPl8L1S9MSyA5J9FwkjqmBlB6rd8QaT4dkwWUv09hSN1wZYeJOmQ
5kLqsz/0RfJfjPNGs6RM405IXWhVElJUr2SB9jTuE82yK0WdSL1tdhCp2DI/
klbQPqToVN6FlMt+dyNFxSpeJN9q5KiZpb9F3EidXjkMTTX2O83KJtHzZJOE
jHQgue9bN1Kfo3Yk7bzZhZSDjfdqZnmlhm6ktCZakKraGjuSNYjm6Js9WseO
JA0bWZFisZGXbFYNWmxFyrd6piBV06GxSHrivY7QuQtikTx9TEekUC9jkaTd
qE5I7bU7kez6agd0ytkAkjgbBZG8SccsJNv9jQdJWEIImjfPimSdpRcpy9dy
IcWRlV4kL3HNgiSXyvmRrFYvF5Jvf9OPpB2/tCHZC5cPqb5t7kLygoOgpE9q
OpL+PtyJVA2rZ0LzrQohxaAhHqSu2tuFFGsu25F67nULkh7yxSHViq+xVed8
iJRDHbWQ9OskimSLh72L1O8Wq4HkJfu0g8Y0ZtDK0XN7s3JgTyR5a9LnSNH7
xw1IPjh9D5Jce/sEko4eewHJKkz9AykasctIuW32X0jy4otrSGUpcx1Jz167
hmQ9i91A8gETryN1+bs3kHTL4utI/cbn2N+GQ6X88hqSvLHjL6ScP+MKkh9/
H0raXvkTKd8MXkSSDwv/geS1Gh5H6kFzdiPF5ksbkGxVtcVI3frmXKQqScci
6aR2fZGkz9IAdPqXTqSYOcyG1OvnW5HqXQmV7xhz62Z5WjSX06T6/nACkt49
kI4Uukt7JLvpjEeqT+8mInlEpyPF7+taQiev+BCp/9paF8lKvl0BWmV+ZaRI
KNQEyY++UR+pt6SkItnCue2RNMHoqTOr7nyfjGR7srKhtLEfyUd1zkTqEkY+
6CtWqetBkqxNViRLv+iF/lQ+D8n3L+mOVB0W5yF1nSHZSDa0cQ8k7Tc2F/pX
zc5ItjF/NlLUXJuL1Gu/CCN5g1MRJL1YJIwUFzxQPTU/R7JCMoyU9ypypDhr
7G2/YpH7QSSrVCgLSd5Y6UbqvKZWJM2n7EiRMao3Uh86lI3krrwMaOI7yUix
15hDNMtbG72sr1j+PT9Sp//hQ6pp5TKR7PRBJ5JXrBVAiufRXnqTkv3rQdLi
Pb1IcbG0D0ka/exF8jEL/Uj6+LgHKVqFvUje5KULSSYvtCLlwXVQYTsPJd3i
LUj5RjS/2aSKGHnPZumGVelI9UXlDKQYP8eC1O5QOrRGdRtS3ViUjOTH1sVC
8x9KQeqvz8Qi+e/HE5CEzExHsm6v26EvKzqR8mRfO1JNeRqAfrQijJS/1g8h
9S6jb8csGVgTKvusCEHPlPQhyfSCXqRau9OJFC+7B6GeXC+SLdoZRKpLW1xI
Ptt4T2BWTzXyq8yKkpOw+7OsSJrngrL3P/Qgacv5XiTzL3Mj+a6aXqQYlRqH
JPN7JSLFo5JW6IN7aUj+MqY9Uq7a1A7J5tZui6RtfuiAZLVmWZH6xy9cSJk9
2oLk75HeSH3t2BdI0XnZAiRfN+oXpA63uAidU+cKkt35+jpSjki/idTNL95G
ypWnoXTssb+RatFlKD/zCEqGYnmZF1DR7jmUbsKSRY+grMljqEy7CtVtNLb+
fqhM3gSlq5xQkdkSytpWvY2k0z+7hRRtM64j2fPZV5HiTlAj6Q9/nkaqbTP2
INmsMd8j9d0Os6DfuHojReYsP1IP/jUbKW5UtEAtw61I2qq3A8nfW+JCyjbV
HUixfn8sks1t3BypV+TFIcWC79shSc1THZBq8r2WSHYi0hypPntWCylLJdZD
iiszKHTK4WpI5v+0JpILb1uk6LM6HskyejqR6syJDGhNtxv6T28nNBzdYzbJ
/vI4kcLZKx2prpVMg8ZF56RMskk7IkhVIj4HKR/+lo2kj5tlIeXj0V2gdfxh
pH7rQDZSts7NRdJdTbKQ2mHzI9lXdwJIWtLImTbLrbWhYt/7ASS9sNeHlD+U
CSNFfiPv6hW7GfMpZuUtI+fPrCj4jx9J28W7kWRF0IXk/1zvhRSzN0agA9yd
kDJrezJS9VmXjmRjb9qQusdcJ/Thd36keGu6B6lYNF/VJH1cF8oTNnugNXb5
kPr0nACS3B3pR/KTWzm0464AUjTr5kOS7jftSPHgMvb1UxaknDvQidTWIzak
qkwcSHHnQwuSNfrIiqSdRkJFYWP+3aw68jmUeT5JR5LvE63Qsn06IlW6tT1S
Tu8bi+S/Z8ZBu57siKR3psQh5evDY5GqXUsLkm4dmooUaUZfsVm+IpprZlIf
fi2CZOuMXLdXLKTdSFW2tAUp6xrz+2ZFl8/sSE5vuJAsa4IVSTo+CyL53WZe
pJzSzIake59bkLKl043UWdqKlM+NXCuzfNrnLqSc1AHbUzqRur7XAR3cyoKU
v0yFqpueRKRYssGKZDUKxCLlmpbtkOKvvOZIOrTeu0g+vlMnpJpfx43Ua2vl
IUXSyolINSN5I5L+2mgfUu45exHJF524imQtZt5C0ocF/0ayDUeh/MIdqLzx
HCqSX0LZTSx59B++wKr/kL3Eqv/wv/48eY4Vz7DsyX94BSuOYtkKrOiIlfle
QNWFB1BR+haU/DUFqoe9A+V60y2kLHroOlIMmnUZKa/qC0hdYeyPSHWw9RIk
W/aoH5KHg2GkCI3LRnJbEwtS3q7fEakH/GlBqrrnW0OPtmmDZH+UaYikk3Ma
I1njUDukXJu/LZK0blYPKVe3bYhk7ERNpLpqa4yUtUe3Qer5Jeoh6a0PGyB1
1wKNkeLSvjgk/dTdEkkW7myOFL8+7IRUJbdakHqP0WdoVq6+mopkViOv1ywZ
940dWiODI+Wbc7Ogd+M/QpJaJbohddUx2Uh+OLULdOmILKSy7/0ISWMTOZKn
f5aL1L8NCiL5R08iSHn8Vx9Spy4IQ4t/4IFmBIJIPqa/H6najQkj6YBojoBJ
sTbak2RSdZzphB46Y0OKujuh8mD33kj6sTMXqdXTFCQ/914npDzx1IHkq/db
kXRjFQ5Ni56LmmSn74SQfFslG/TccgdSTI54kdxRArs+yYOUnUZBdcmVASQ/
sM6P1Fm/epHq4HYPki9KdCJFi7IOpJ6VbUPy9FFQPXG+BanYOijrVSMdqSNx
ViTveQzKel+xQVN2piPl5Z/SkHTFjBSkXNEyAcnjtyUhaflf4pGq4pROSFri
eSyS7PekIunSYDJSvc7SkXTnPA+0stHnaVaGjT1gs6zHYReSuB7ZkXR+PJQ1
euhBkuqL7UjRt5QVST7r70CqaQNcUM8aG5LUHupA8oU5LqQ6fjgDybeuikfS
IVNdSHFtsBPJsx5A1f0qDqSY1s6F1POmu5GkkM+C5DFj05Fivz0Rqdy/pyLl
7HsZSFLhEFTGRnMbzZLfI0iWYPkcKbpNWYhU8wr8hJSb+/wJ9bLrSN7w3G2k
2nfwb6Ro8Ayqxr2EkhtY9hwrXmL/z393/ud/P3f/3/75//o+q+fY/3p+Z9ex
5Oh/uOwFVNx5BJXL10D5+vBtpHzy/Q2kmlH8MvTnNSeQYlnTbUhm2yaRvEGJ
IUi69GoYqSamO5EsJtrLbVI5a8Qh6Ydb2yPVoIkNkPr71HZIUr5rM6TeWKs5
Uqxo0hAph/7YCnra3hCpri5rg9STjzZAiouDmiBpDVtTJCke0xxJHbXqQyvb
kqCT7rdAqi+iezBmV92CcsasSMGNfBez3G+zIFmZEp2Q6vwtB5J8uCiM1GOM
c0izNHVqDlJ1MnIHzerBezojRZzIQaoN2/KQtEWRXKT2LsxCqi67OJKSeyGk
2tiUI+mIwkGkFk98SEobeZAsd1kQSXdkhZFs0nscybe2hYpuHQJIXeS2A+ty
Ifndbn2Qsp/R12RWHS7UCbp7ZyKS0gUpSLm7rhu6pJgXqS3JHMk/neRFisRx
DqR6xw+VM6QfOva5F8kWlvAh1fCnQaS+9U4Y+kdiECkbT/MiuSfLhmQliriR
Ot86G5IcH+VCqv7GealZ1sfIvTYr7xl9v2Z58V0OJI0MtCJJ7VYOpPo2ml9l
UriMXMBX/OlDKP3L6DEwq2p/wKA9HnVA6lIv4pFi7IkEJLc+ao9UN3MTkfrj
SalIlljQDj2qHUh11tjTMivey8lE6l0D/UhWM9ML9R3PgP5o9BC+YqXo39ds
4cVQPexuOpJWfeJEshg3VP5ZLgNJtzI3kv/9lQP6wOiReMUP/FYkC68NQGNq
e5Gym5UjWV7tDCTZV8OG1AUbpyDJ8PfbI+VZY97ZLIvvnQbNX9iJJE+75kI/
rjQSqWJXSiRf+/gAUibbNJIuu3QVqV5sv42UX23/G0kePIWqRS+h7BH2v85P
/2+f1/7n/1v+3z5f/9d7D3ULS3a+gKqpd6Gs7VqomF3oNpLNanwVqSc6NPSz
WoeRqli3NUjK+o1Fyjufd0ey23dDSLmyayy01OIYpI653RQ6IfwuUmbVrY5U
bwTrIPWWSE2k2BSsj+STt7dFip2FmiNV4pn6UNv9Rki+73FTpHp9E5SeKFMT
ySYNqIuUKV82RLIVH7SHTpnQCak9P9iQ/KhxLmFWNK/tR9JT91KQYrBxv2yW
kbgQkh+o3BXJPinVBUnW2LORovTzrki9tVRPpBoyrjuSPEvNQWrVtAuSxoTD
SP5jZgSpS0Wfo0yyHU2hVP3thxa4EIBOKBtGknpzOJLq+wHo9OZhpFL93Eg9
7YwFSS8a979mhdXeB8kOH8lGylb9MpD09qB4pM78zY7kXiPn1Sz7eVoWNH95
P7TrT17oKmNv1SwXRp6rWbbneABJjxl5qGZJbMCJpJ9V8SBV+kuoZEa/k1nR
4jUPku0xcmHNyowdUJoXPZ8zKSv0sCLpojwbUhSbZEGq3UWsSJ663gJtXtGO
lPVr2ZC8YheobtfSihRFjF5fs/rcZjtS1XkrFilk/3SkPrc7DfrjnnQkm/5P
KpIvuWJH6vq/WpG8U5cgUib84kbSBSITqVo9DSPZ84oepP72KbZJghdJLlR1
I3n9ET7ociMfziwttdaD5EfsdqScc9GNVHXftiN5qd5WJP26SAySjPKmI4X9
ZSJSd5R2pJhyLQF6srEVqe2D4pDsj2cpSLlKtEeK3dEeX5M65pIdKUrFZiLJ
uOEjkPTKexOQ4vVF3yF59rRjSBE/+TKSu3ffQsqO5/5GkpTnUHb2JfS/5m//
67nmf8+z//P/T//zPPohVm1/AWXZj7AzukFpvhY3kXz/L1eQ7NMux5Ay+dFO
JJsZnouUnhO9keI73QkpT8Y7kPxOsB1STXkjDikWfVsfSfaei0PyBm+8h9QV
Qu2RfGT6h9BjK1sgheXlh0hS70oskm13tUPS/H80h87eWBupR96uipS/Pm6C
JKsfNEfSMYtjkfzAxg5INr10GlIvfNuKZBtDaUh+db0bSRstcyHVw2shJDsr
wtBpRt65WbHqYTekytidhxR/eKCsTVwWUlQoGEHqq4V8SN6yYAhJum/wI3lg
JpQV+tONVM6XXiT/p5cfKZuM5EjqCXmR6tPxIaQYPMGP1O1nu5BUjnFC07/u
gZS734ggSZOrCUj5441EJLlYJgWpf/vBiWS7k3zQzPlupMox8uHMiiu77EjW
420XUrxt8SH5/VQ3kjXZF0TqjXewi50B6MfrXEjatzxUrV/vQApdwoVk3220
IeXxL11INWaBHclOGnuKZukbERtSFY32B5ik81KgKu2uE6n5FzYkv13ciiT9
i0FpqR9Tkax2agJS3nqUgaSnVyYh1Z83U5C6ek8oe7NqMvTr+24kH3rXjiTL
nnuQssI/DqQ6ts4Hbe6EstfXu6DHjf0tszwuy4uk2dlupOgz3o6kT8e4kfK7
Q14kWTiCI0XS14lItf1xDJKU4B2Q9MXiBKRunWdHynIVkpHiQvUMpPrhVAJS
n7XHIUnp3HbQFUXaI+VxkQItn+GCzrs0HKmnV5BI+VrOfiT/YeklJPnmxnVo
seJ/I0Xpu1DlewkVj//D/5p3/d/z7P/8f9D/PHf+j/c54hKWrnkOZac0VGz6
9TaSuR/fQPIaX/6JlO3m/wx9lCyRdPaUCFLH/8aRsuyIDCQf82dDJFvKGyM1
K10dKW47GiNZX1IX+tg4d33FZv+2RYqtsWlIVeZYPFLXj41D0sMxDMmHdmuG
lH0eNEaS/QfbI9m/59sgZeeCsUhxYlYakrXcbUHK5OU2pCj2rhVJspd4kaqF
0XtjVj5vF4ZuKw2l2d9kQXe99hG03+DuSJFQCkro/SykvLo+FymGLPQh2eZQ
GCnr9A4ilS+6l2CS5l1yIUXZekEkWdg/gGT0RRhJNv7sRzKLMZ/+inVquJHk
t3tWpCwf/dyY5D1+7AV9Zuz7mtXdqqQgaaRsIpL/+9yJJG8b529mWRN7GLp/
uwPJC5yFitRnVqT+2ThHNSsnu4JI5p/sRNLfm0LJ02M+pC77rRcpN91zI4n7
hQtJL37lRrJlG1xIseKIAyn7J1ihg4zzn1ccWdSKpFvqOJD602ifiklW7l8X
kg5+aEfK66McSDG/lQ1J5uRmIIW7pgXJVs6Bkm/XWJF8TZ10pKrYwIbkl5dg
F590IFnCBh+SjoizI/leo4fcLHnjnBfJf/mTI0V9Y3/UrCoQnYs3yU7nYR8d
9iLJzBE2JKvztwup7j5yIuUn26F0/S8pSEl+ikWq3x5AxfOp8UhyxtiLfcVK
++OQYvWPdiR7GM3XNMk3ZHRCij8mtUaShLxkpChdLRbJfn1mQ+rp8aORcvM7
q5Dq8Oe/IOnzKtehvw68hZTN1v2NpLmPoWLbS+x/3ef/b3/2f/5/7N1XnBTV
9sD7rYgKYgIREZUSAUFRJEpmkwaGOKmn0/T07u6ZIStJUEQoEVFEskqWAhMG
giAIIrIRRQUUCZIkFFElSpIgMPeh5/9S/Opz79w/HPT85+n7cNqmp7qqz157
rb1WgZfpWr9wgTX/YMW351DbuwhVRQYdJu1ya/aTct75DaT91MzZpHFp33Ok
0O88RRpv9WqFHgw1Js2yE1H1ZbAGaRXbVI+03xzZmNQhXyvSeOW15qTd/pbW
pDVnuCTlB9mJpNVvVjN02lpJirWftCbt++J9QJ0a5We2RI/ntkM7FU0lzazc
TFKntvKhq+t6SXnfdWHS6PVegNSxZxRpjYrPgXeq2094ijSuf7EzKaf+1Y00
pv6VQ+oudWKkWDIjQto3nwuR5l21Ffp3vA+ZU33XS5mkTDwcJEXHYyFSNYz3
IXMq7hoQQuuWiZCy6JkgaaaM96K/x+dIOxW58X5XTo3RKyOk+uqbFqR++cbW
pF02qy1ptonPc3Mq9MJ0Uj263EPaK+N99J2KxIEeUv18BDWeaBgidZdV6aT1
bN55FIfm5vi+hVPhmxEmzXarPKQVWesjhbdKGqnXjAqS9orBaaTuc6OftD4s
lE4a258LkjrhVBpplxvoI+WtB1Gx+QbUygh7SHX0uRS0VPz7cWp+7kkmZVp8
3oJTe+afPlIt6BFE37rDT9pfDAuQOnyXhzS+fDQbzZrmJa2qzytSLn4ljRSj
9oVI+zudQYq1rdNJ+UsPVNzwbYi0GycFSDW/iY80M9enkbr0HamkaJHX99Gh
fv3PJFLE/mxLWk2aNSXV3XObkcYvuilpbj3aDi08ojFpVdpRl1RLf0Dl3vjc
Iaf2BwNRI/VgH1JXPDObFB8u+RX9tPxB0qrwxBHSzHnnGGl9fBEVW3NR86KL
BXFugQVeNV3rJf5kjX6XULF8Oyq3bDpKql/++I20NpXfTsruC+eQ1teLh6JP
rvKTKmw0I41eXZqTetQ+1OxgVibV/NJNSCtlVx1Sz5jdBv34+Sak2D8ygTTL
zm5G2jveb0Iat1VvTlqPX2pBmqvHtiXtewYmkcq3Mp00J+XVYzq0Ii+kk7Ji
8QBprlqURapXZ0dIe8b93Uk501SkPvJJjLRevKsLKX5s1INU1597Cj1dNYe0
+hfuROqEvRF0ymK226cK3eFH1XVLMkhjT7zu1aluUyVMGnUaRUh7xFdhUj5V
VJHm8z/4Sfvh7BTSumuvh7S73tiTNIp16UhKK973xalYEGmBPrsolTQ/mZ5G
2v4TUdJauC+dNA8+kEQaF3JSSLW5YYC0suPnAJxqdUs6KXs9j4quD4ZJa8EO
P2mYRbykWWw+u2wQO+U7VN70qYcUPTqnoFXuTCftQkvTSPPHx9NJe0B8Do9T
85nbfKTVuY+XlH+UTiPF4V/9pP1NLy9a0k4n1equPlLcFcwgrdGnwqSeMTRA
qvL7M0kZy+sv4FA0iM9zc2pN9ARI0feLTFJvLBMgxT3x/uJO1fi8+NOhtfpN
L6lGb/OTeu4XGaSxt28qKa/f4ieNTf3SSFtMTSJ1pZx2pJhWuCVp3tMigVTn
Z9Ym7ZXv1EOz4ufFnZqFT7YgxSO9a5Dq64lNSXG4aRPSON4imbQubTLRwd2m
krrkl7+gG0sdJOWpF46S+rZNx0hV7RKqj+ei5iXWdZ7OVc6LXan3L7DA/yZd
nxeXuVoilVU/nUTtT2seRUf6fyN10bc2k/KztDmkiA58gTSOPppBWjc9HiHV
ommtSfF7oUTSfCFvPpxDHR7TCs3ObEAaXz7cAp2flkCKibUTSXN+r5boM980
IY0WPZqSMiOWQOp18/2kMfnbDqQo+WsiaXl1Kmn26InqB5amkGJnpShabZKf
tMt3j5Kiqhe17zuRRSq7Wow0BtzSiRQLOsVIa3e/CGn3r5NJGkc+CZPWwj4Z
pOrwCCo/XeMlVcUiIVLP/ihAWpdWK/Tn/kFSzq2uSH1D8zApW1QJkOpYaR9p
vhjsiQ5dHiGt+99sTqpOq1qiXeq1JuWo2T7Seno1qho+mErqFbcnkfKpB7yk
8X1zP2k1L4uaa28KkjL0Wpg0biyZQdq/mEFS3rk8Dd2a6EPHTvWikz4LkLrO
dA8pasXzlk7t1773keK+4kHSrDQuQNqLH0ONHT1DpNXxXh+pbh2QSsqklh60
9e4gaWyNpZPi7s8DpPVRfP6YU9Xyl46kaDXDT9oJ8X4JTs2nEzNJo1P5HFKN
n+sl9e91MkizTN58IYeWuNdL2huao4anjIc0F49FxcmvAuiHRSOkOtjUTxqJ
3XzoK/F+b07t2JI0Uj9wri0q6jQljRW7UWvFoGakmvpGC1Ic2VyDtE9c35g0
Bix+glSH+jQi7cPxOj6ncvmmqWjDzutJY8tbB0mzYupR9OSeY2jtXFSeYkUu
m9/zuVeqP9XVfv8CC/y/oOs8aJd+12IRazy6B5Wzjx9Fxx06QFqNftlCGrr9
x+i46l1Ju36fzqSsXTZImmFffdJevOBRUs68vi6p3i9UB33mnQqkjk2qS8qX
KqLGY7takcJXqhapB3kbktaQUcmkLnkWtZpfn0mKpn9nkfrmCYq0724dJo1T
X3UkredfUqSa2qYTOvtBRRrPR7uQ+uLazqT91/ksUo1v0J20lvwUIc1J57JJ
NejrDFKkx+f3XmbJMmFSfvUUat1yu4/U98T/d6eyVmIGqY2tEVL8+WYmaTZ/
M0rKRtJPqhIfeEj5U5s00p65sidaunMOKUbc15a07o2fk7vM3vHzvk7tv4Me
0nxtjyLlB594SPHob8mkWTpep+lUTasRJPV18foXp9b5mR5SlbnTT1rlN2aQ
eoUfVe9c7yet1A2oeUyzL33jJXXliqjdr1sqqZrNSyet186noXK5n1TquTT0
BW+QNNYt9pD2C/F+xk5F0o8e0nhkso+Upw+kkfYX9cKkeGJ3Bmk1LRUjZcv4
+Qan6oMhEdL+oUImOixeJ+JUl+rgRUe9l0Fa1tEUUn/exo+G/Gmk/VR87q5T
1SOvvtyh/O6sj7TfXJlKWh+PzyTFt0e9pGr0dCvS3j2vJSlHnWpLGt/Hzw04
1QnV25EyWqIZafw+vw46TieS+nypJuiec81I0TurKzpnygTSuLHCWtIesPwP
0hy44ihpVNh7jBSHL6H6r1zULZ+b3zjX7fWu82VczO/7XO33v1Jxd0E8XuA/
WdfnwOX3QX/AqsdOodZjvY+iOzv+RsrpB9eTpu+GmaQYO3wQaYy5LUzq77an
kta4InVJ850eLUj5Qp+apDV0TDNS9urTlNQzKrUm7ZRgHXRyt6bozgrNSOP7
eR1IVaxfO1Ku2h4ixeHjSaS62CtAGmeWp5Kyeck00tpZM0CK92w/qc5mZZD6
/A8KPbAiRtrr5+SQ5g+/RtCdXyhSbo3PNXJq1VjL3lo0TMrcNajw3BAizfvj
+SunauwCVHrqhEmzTX9Fyi21MkjzRLEoaY/4KkTKE6/7SCP3z3RSf/xqH7TL
YYVmtGxKymhCa1K1eL4taWZqLymG1vGT9s8D00hzw7cppB2c7SWtSqkB0n4r
Xt/q1LrvjUxSbH6affpYgDRuyg6SVsnnPaRxW6MAKQ72TCfN5MmKlA8keknV
dmGItM8N8ZHGgPVh0t59KUCa2+N518tM+4C9OeQh9fvbUtEVJTyk9fBLYfTF
Nemk3JI359ahqrjLR8p7jmST4vtNIVI+9HCUFG3jz6VTc+szEVKMWOEjzb92
BUg1eFkqqXOfSCft4U19pH7qgIeUk2uh+rrmPtK8OW8+nkNjYI6HFHvi++hO
jfWF25H690AbUm47lEDqdr72pJn6cGNSjLlXklZWpDq6eGcN0n7yhcfRoolp
pC6hXyWN3cfnkWrysH2kGLn/CNp72zHS/OYSKv4nf+vUJZ+b33jtSsWnbp/H
TXnJRbe66yvklfp7C+Li/0wes2Bf4j9zncXfrO7honcTKu71HiXl/sq/kcbj
D6xDowfGkeZrS/uRqkM8D+NUDn20IWmUH1iBFFmf1ib1Zgs1ls1sQIpXXmxE
2pWm1CGtD89UI+1TqY1I/X5WK9Isl9mMNF6+uSUpez2UQJqD5ySS6gnVkrT7
5ETR/vG6WqfmEX+MtI7/pUjz7ac7kvKmeB7YqRrXtzO6Z3cn0uy0JhOtsTFG
6ovXo+KwjpByxThFGqOzUP31PagxomeYVHPrK9JY8Alq6ZaofrFOlLSGzAyQ
KrAxhZSd5npIcd93vUij94PZ6Me/tCd18L7mpLW/UAqp1PxUUk5/IUKaPW71
kLr70GTSHPp9OmnFygVJMfKcl5R9J6eRalCajzTSYgHS/uJBP2mu6u8h7bT4
fCqnet5oL6ma5PW/dlr5gXRST+uVRsoXP/SRavRpD2k0+TJAqpTuPtK6a2KI
NCfcGyTtEvG4/zJfKp9ByoHrQqQ9eh8qqh8NkmpYgwDae6EiLTvex8up6Ds4
SFpdh4dIUfupDDRlmY80B+/yk2rQL15St2+N2vdVTCO15U0n7fbxeURO1fvP
ZZB6Qfz8gVNzdHzfwqm9YV2QND4b1IIURWslklYk3ofAqb6jXHN04JqGpLFc
S1JWPtMUrZkkSftQfN6yUxWZ15fUPYrOI+XpSzapRpQ+StqPHjhG6t8voebp
XFRfYkU+17dXKt/qGp+6nEN063Orz7Fu/aXd6jnd5rS6Xbf8/l0FcfF/Sfx7
hfaLrvV1ulq63f/6PGv0uYTq9rtRe3TuYdJ6TO0hjcj7S0izUeh10qr0aHdS
jK+QRlqF5zQlTavSY6R9zzJJCjm8AWlNH9mSNH79swZpP7wtiZTbUuuTon+7
pqSx4v7apH1ooZcU9Y/WJ+12rduRqsbmBNKuPTyRlLGnPKRqE5/34tQqOiFE
GiNvyyFl2xZR0qzbPYe0Xz0QJuWzUxS62I6Q9vD9IVJcaK5Iq1m87tWp+Vde
f22HsnpbPymye2Sga6qGSH3rXVFSzFkSJM2Pb4mht84Nk/bg+PlUp/LGlj50
Q9+epJ4WUeivi5qiy7u3Iu0EXxtS1z6VTlrL4vNvncodef1yHKqdH6Kiw+YQ
ac9elEkqTw22YckwuiHeH9qp3HHeS9rLJ6Bm4XgdulP9cnKANEsV8pHWjtwg
qQ7kxSUOjQ8fCJEirWOQ1LG6irSnHEGN0X3CpPX2XZmkfDh+Ht2pemyKhzRL
5XjRRQcVqT9P9ZNK/51Bmu3i8e5l1g5GSZk800eq6Nh00ujUJpVU3wcCpJ3w
tofUL6zwk3ZKdipp3O/1oqvy+kw51JXj/ded2p19PlI9Gj+3cZmj54RIu3uy
j5QV26eTYtSbyaR5e7lWpL0jrRnaoW5NUjx5U2PS8G6vT8phY6qSanqrDqT5
9fIX0esf+pS0Ik1t0h438whpjN55jBTnL6E6L397mS7x2pWKs/Idx7nF3W75
3Ausazx7htV/s279qF3j3Hzml6/UdS6Ip/4z8W9+72e3+za/+z/5vU+u9XX9
315/132DnazxzXlU3v8Qan0nDpK6YWgrabbq+RFpvNqqLymmNe5M2p8fS0Qn
vpxAWsFzT5Jq9vwE0u70Wh3Satu3OSmKV2xByk5bmpK6aKVGpDX8g7qk+Lh0
A1KOzK5FimGfNkG3/p1AGj83SidV39oeUndvEiatnLYxtGilHFJ3ePIpUtzX
LUbqPh/nkGpfPO/nVG+4P4s073olhIZjijRqx9f1TtWF2Yq0tuf1P3Va5pUI
aW87l0EanyyKktYtKkQaL3eLkrZK85PW2rVppHwzL7/qUBdb3IsUN+R2JK0i
8TldTs3BvRPQnfE+YZfZ7mIyadd9JEwaCUs8pH1mRCppNBvqRR+P9+NxKq5b
FiJlEcNHGp54f6zLnLcNNa8/hSrv5x7SzCyXTtr+39hVo9JIWSLvXKZD8yOR
SioRz686FYXe9pJ2uKoiRf+8c7oOVe+ZYdKeWDqD1BtkiJSfpgVI47FaMdL6
9NF0UqV+6yPNlBkB0hrZRJGiWfx8iVN1Ir4/4dTq9YcXvZAeJFVSfL/Eqdms
cIDUZV5KJ9X5WV5SDpnZAa01xENaXZqkk+p4nRCpK0xMIs0PvkDl90t9pLht
UyJpdI/3o3IqbG8ttGqLpqQadKQ+aa+rVodUW3cESfHN/b1Ilen/EB1Zezep
y/xxhLQKx+eHODV/vcT+z3lcp1fofO6Vihdc8z75jCvFRdYtfyTOsebfrFue
1/U8Yz7zwlf7+ot/SJzzbzO/97Pr9+uyf+LaP9ntfnbxvzVedr3+51gxi1Wn
t6HWqIeOoiPX7EWfeXIVaXfcOIYU6/s/RVp7ZwfQIXNakvpkzEPKfptakfbY
hS3Qxwc2JWX5YEtS7apdn7SGL21G2sM71UQ/PlyLFGVmNCfVY1UkqfsOakWq
siuSSbPe5iRS1s2MkXa1m8Kk/rBZjFR7a0ZJeXfXMKnWjwmSYmjNLFIaIUWa
X89m3/05hLauGCGNdnnxlkO1r3KI1J+MDaK+UooUPZdESNnnpwxStU6Ikvqj
DzJJaTZOJ+0vu3tRfaIXKRK3KNLM7tWMtMaeaU/KPQc7kGat372k3lQ+nbSr
xvvTOLVWxOt8nepxXYOk/CU3QIrtexWpHhwZJs0Rv2WQ9qy7PejYewKk0fxk
KqkqzAmQ9tKu6aR59/FM0tpRzEuKd6OZ6DO/ZJCqcfx8v1Ox6GZUyRohUm7s
5yetovF+3k6NamfSSF31pI+0Fx5VpH5vlZcU7zRVpPH4PX60VOUoKQ995ifV
2scDpPlahxTSOBrPbzs1N45FrfPb0klxekQSqafXSiPliS/SSdW3PapTr/OT
suSYdNIekpKJnvd5SdM+4Cct/6Q2pL7zxoZo76mNSDvrxmakMezV6qS8bowf
rfJjb9Iw5LukpYrsJeVv7x4mxdyFx0ijwSXUbS6n67o6n3moK6Xb+tzt87h9
/vzGv65zhN3yw27zmNz+Xbf8VD7j5X97nPJ/zfzmed3q593qFvRZ1rXOIZ9z
xP4t+yeu8a/bc72fVfPOsDf0RfUHHxwkzfZHN5JiTJ1ppBq/7UXSbpwWJa3X
J2WQalNZid5bPZk0/qjeFN1cQpKy2n1NSGvJqMdJaVSvT9qll1cj5ZbvGpN6
Vrkn0bLRNPSpO1NJcWlfMmnVHx4kzQW/5qA7T6D26hc6kbLMhhzSDr4cI62q
jbJJva9MhDQ/9cXQ2+PzNJyKMxVipL3qXkWqr+PzeJ3aEwuHSP3QK4q0VgvU
zm0VIU1f1Ux01/QIqU628pLywYYppFWkoYdU+lBP0qpQoiNpP/JMGmk8J1uR
Ki0+b+cyW/6WSloXbwmR4ucxXtJ+6YVUdK7HS6pvFwZJY2UmKton+klz/wRU
nnnTR+oNN/hJ49DzqaQskpBG2qF1qOp6gn1kmofUnlqoWejOICkrx+fSOLXa
bFCkaBjP6zo1SvWPkDoxKUQa5c0AqeuOUqj3cIQ0B3Txk7J4PL/q1P5kUIi0
KixEzUkX0kg75+10Uj5a04/6f/WSelPTNNKeMDWd1PWuRw3PYD8px49NJcXi
vHPJDo1dD/lJPeJMKmkGPkwjrU4tU9mPMkjzsw/bkEbRHk1Iq+6pZuiWyqi9
Pu98gkPr45TnSX3n4vdJVS9pLykzw0dI0enjY6T58EVUHMtl3eKvK5SfvVK6
xt35jDdd66Ldzv+6xKGu1y2/eed87ifk9/X/tHjk/5r5fY5c402Xc+jCRbe6
Bdd42cX81uH/W+Jit8/vdn3EE6x120FUXJp1hNQHO+4h5YPzFpLGxYvjSX3o
la6kMe2uVFL9siuJFNeNbkGqwu+lkmbZWYmk+CvcilSjZzQi9b2/NiFFnw8a
kHbt9u1J9fzMlqQosSeFtH5NaEvat0XTSePj8T7SfHFnFqnerxAizVmvRknl
L5FNWoPHZ5BqwaogabWdH0H3DVFohUmoUeWZEGm9UzpKqrv9IdKY0CmDtMzn
QqSc0DKDVIO2KXT/twHS/nuWQmdMyyTlwve9pLn+Dh9pFG/XE23aN0LqUp81
I416F9uS5lcbk0ir6y4vuvKEn9SvDkonRfXlqPXywyFSp1dEbesWRZpbD2aQ
xsfzQqRc1D+dFENSUOPRBamkmZDjI60B5zykeU98rrhTceBhH2l8fXsIffBZ
RYoptSKkvv6ebNK+tXUEXVvYT5rhIh60w3uoHNTTh64vnkmKDdO9pNX6iJ8U
lUJppD3xbCZp3Bqfd+fUOv+4l7RLDU0ixaZ4nbJTeTE+192pnvyOh7TPz0wn
5bOf+kj9R1lUPNECVSvGoNbh3gFSVFucRtqdmqWSYtbgZNI+2r8FaTWq1IxU
ExvUIc2cnKak7vdhD1LN3/kOKu1d6BNTDpHizDvHSOP186jcnou61tP+/1y3
/m+92vlft7jYNV+cz7gyv/HmlXqff0t8UeCVjYvzWydvnmdd92FcvNr37bW6
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
4hd9pKryaTppPt4mSFrFWPOtGxVpVT0eJcU7T7B/x/tLOTXmvK1ItSI+79ep
WPReAP3ua9T2rQ+R1mtPR0nT3BckjRJ3BtCtt6Whf8Tz8JfZa1YaqTq+kE7q
NclpaPg+H2k/M8BLqvp10knduCm7YEAaaSxYnEKK6+P53ss8U7EtqUcnJJOW
1bM1aWSvSSF1mb7NSHF+Dqq+iXUkjU3PTCXtGxdsQkt2OkyKW788Rsr3L6Gu
c3P+S+OsaxUvX+144Vpf1wL/O71Sz8XVfv9r9Xny/bzn8zy1PMHq6S4mnkfF
a1+hRmahI6S+rv5eUmQt/ZK0TpSbSJpLfh9I2l/YWaRRLvlp0nzi9ixSDxno
J60lX/vQd/emksaGnm1JebqoJPXchq1IuX1fJmksfDeblJHaXUir0AeobDvp
KVJtn98VvdXTnZTjivUmdeGVUVI+ojuS+sx1MVJuOp5NikPjMkl78dkoaf7Y
KUTqiQk5pP1Z0SBplOocRb+Ox1VOzc6Dckh18HlFWj3qZZOy2mMBUty2Po1U
m2OppC6/pAcpeuzoTprP7EpFiz3cihSRG9JJlbY5hdRPXsggzRZTAqRxR6YP
Tbw3g5SHxivSKJqOyiER1O7yQ4A01y3wk2LGHz5SFuqeRtpv908hzT0vp5Ey
+DOqP3zGT5rFSnlJe2583+syOzUNkdZn/WKk3hV/zpzaT9+I6n13ZZB2zd8U
qbZ1C5FGqX6KFLPHekk9Lx21D/l9pBq7OEjKpL88pP1uvC+7U30h/r05VVt/
YsfckoT2viGNlPVyPaQef10SaR4+2JrUT/RqR1r9XveRerOVTJpNNySS+qEx
TUi76oKWpGxwl4806kd6kOaQmgtJeX2dA6S56IljpPHqBVSczEX/W+Opa53n
+afkxa7191Dgf6dX+377pz2nbjrzuP+jcNG1P55bX+2jrLmPVYUuofq146jd
f/9RUlYP/k7qW7auI817T31GGqeSxpK6+0cDSNtXshdpPmorUvcuHkMDdT2k
fHNmW/SD5c3QIp+1JNW0xg1JcXOJJFK3ToyQxteVs0id/mc2qYaW7kKKd/d2
JI0WT7AbNnZCj7+aRYr1r0RJNfsCarUaiYq5a0Ok0alRBmmenhEjVZPmYdJe
viSTlF0rKNIa9XyUlEfqZZF2oTGKNKaaMVJu2qjQUBM/ab2e13/Wof1ox96k
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
3lHCT+pw99ak2cOLWpldU0l79p9edPzqCClrvuAnxU/xuUZOjTWqM2kPuphD
yhF3dCbNM0WzSbtknyzUVy+TtGbF88BOVYkbw6T8pV+ANHdtDJJW3RYZpClX
hUjxWntFqhZLI6T92MVsUh1ZGCHtm3tkoZFhUdKcdyZAisVvpZNye4lnSJ20
P0qavZ9uSsoV8X6uTvX0xu1JdVPIiy68PUTa825R6JaXw6SR8kgWevNLMdIu
tiOHNJuVVKTYLLPQ4i9lkubDz8VIQ17wolXj8f1lzkkOkuaXDaKkHTkXJsUA
S5F6w9mOpDHpT0WqF+Pz05xKPVWRanz8PnIqbDuD1J+9qdDX24ZI9fo9MdJ4
0uMj9YKlflK8eSmZlEfi/duciuYxL2l2y/SQYlJ7P6km9gqQckJeXbZD6+Oi
AVJ+081LmiN6pJEiqXR70mhcuCla7O4nSfPHjTVI+eeT9UmrZcd6pHr/6CD0
tU+/J+3ePfeT5rt3HCOt9/9GRV4fUKdXO67J73rMLa50rQO8wLrFxa79q136
qbr2n8lvXua/1Ct1nxRY4H/Sa/VcXKv4102331V5ljUns/LSGdRocBv70vQ/
SFXqk42kVcGeSxq/jXydtDOn9CfFxbPZpH3pNi9ppHbJQH9JSibNm75uQ6pd
vmakWW5HO1K+0cdHij9qZpFm6uIQeii3C6kLvxUhrdx4n2On5ty/c9DnBnci
xbCELFIOr6dIUfxVH2kNe0eR4mIW+8aeDFJFJgVJs3W876xTudETI83Se1HV
cn82KWcPySLt6c92JK0vZCZprqmQRur1FdNJa8aZnqS4OdgZ3VI0jTTb125G
yqJ596lD69vPUkl5+s4M0i6/JZO0bo9mkGJs3vlUh3pKRhap7j0ZJa2JN6Py
xnic7dRYfFuENJ/7I0AaOZ38pGheNJ00mnQPkHbvXagatT+T1M/sREWvvVmk
Gr47QooDn0RJmf5ljFT3VYmS1hoPajQtHyPVCzlB0mpRVJH2llcDpBWrm0ka
PT/xkOqLLC9pnpmaQsoXjFTS3r4ojVRP3BUg9bp4XtepUfktH2mevi5IqpcP
paD97Q6kee7rZqRu3bYW+mF2DVJuubEhaQe8EVKvKTmMVF+V3kSKNlMOk+aT
7x4j5dlLqMiL8y7zH7b+dF2PuekS57r9vfok67bey29e+FrHowXxb4H/F71S
97NbvPnfuq8l3XQ7F7OetddcRFX/UagcW+QQaU18fQtpGscXkMadvtGkdejX
3qTt6ZdNqgNL0kjr/l1tSTO1aiIpfrqnKalWD2pMGme/bk3KfY06kOKuuemk
fapMJ9Lo0M5P6m8+95HmwF8DpPH6qzmkXPtFFim8wRzS6JahSNm4SoQ0HnjE
S6o+g8KkHDDaT4r6NQPo35NQee75EGm8Es+DObWqt4qR5g97M0n7tvi5W6e6
6e1R9JseQVK9E98XcSrnWr1I8+SfEVLVK9OElNdNaUla3wZbkyIjwYte2hwg
ZfLCTNJI+lWRsnuvbFLPej1Gyh+XZZPqlUIRUt50Lps01rcJk3r7XxFSjon3
CXaqZhmZpN0j3r/cqV62W5GqV50oafw5SZFmo19zSHXDd1HSuqG/Iu0t3gxS
vBrvM+dUz78zRBqVHshAh80LkHbui2FSDH3CT8qf6gRJI6NjKml92NBPii7T
PejGGWmktf5rP2lXLB5E9WRUHVqPylqvpJG6u9dDWv2KJpDytcYtSP1Noxqk
LFSoMWku/DqBtA7Hz8E4NUuXfJ805vh2k+JvcYRUPQ4eI+WaXNQtXhP/sHWp
6+d0izfPs67n3c676BZHu9RdX+118tX+Xgos8L/Jqx0P/tPi3yt1fVz/Lrdz
IQdYuecSaj65DLUqdT9M2tP+3kWKe9bPI60Xa4wnjRnP9iN1tUgOKQbuCZDW
iPdRfeGGtqTZZkgHUr3QpgVpiGbJpPzmsJ80xlfxkfpMzwApan+lSPnhSi+p
a/bNJM0m40Ok1bqijzTvM8OkvrVjFmnmxNfLTsWlIUG0xj1+0szZGyRlv9QI
aUdK+klR494oqeeOjZDGwKc7oT/k9fdyaC/YnkOqB4eESLH6fDopU0t4SKPY
2F6k3lylK6ma5ySR4pnuzUg9fEUSadyyM5kUs5/2k/ZDjcOkajiIPfh9lJSR
ijmk+fhN2aR16/4sUhwuGyH1Xomax4uGSGNJ3SBpv9XZS1rn3guQ9p5vQ6Q1
J6+vudORlcOkUfW5HNJa+FiUVJfGZJHG8jtipMiYG0FP98wgzeSuITTpope0
c18JkCLphIdUaQ3TSWPdvFTS3jMmnRR732hPysJjU9Hch5NJ0XuWj7TPlU4h
jdZJXlLu3+4jrdqn25M6c2YTUi4MPkGa1YvWIlXbXEma2VmtSWtoh5dI4/zk
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
4lvrufP8h4fR37z6vBnb7tPVxdm199m7bQIpMjZHktraKTGkiprbixQv7e9K
ytVvJ6BNB3UmzZITY0mrxWUXenq4G/367QBp/JnhJ/U5HyejUb+g8pvM/tE2
rc39QqTRYY2ftG6N8ZH6mlEuUj08KYm0Jt9MJM2kxm7SqNYXtbZNVaSZXipI
auvfC5D6VyWCpPq0KaotP5BMmld7B0m9bzdFqicS/aQsID2kUf5xhU68EkWa
H/ldpPbmQFT/dGY7UluXGEnKl1tEkeqNgtHoxg/rkNKc2YjU/jjUlhRLp8WT
2pNLppN6xQd3kKLUnJOk6d52Bm10G3XKt2ZX/OX09455Dae5lA55Dcd89GnW
KV/sdA7OqT7Q6fydY12i0z40i88H/il54Zz2fnK9t/HdvX6/OWV9snpfzerr
OPZPcNCxnjmLZtdzvLv974s4wWrv/o3K5RVRrV/eo6RwVTFJbUb1WaRRrIAi
zY9WdCHlSysiSePXrs+QZt661dBVu58n1a/hOmW72n15q6IPHatFWlX21CT1
bnsrkcbxYpVJ7cb3NUh1y1ePFOVadCDNV7+OI8WQAcmkWvaKizSW/eAjxXfh
+kq7xs/hfrp21cl5LtKqq9yk8X0432tXiynlJeX5x92kOai1h5Rf9vSR+sn8
LtL0HFPon0Pc5P+O4xNIrfHMWLTz3l6kXFcrRFon1rQizdPNoknrl5ExpLoy
1U9qlxt6SXPFm0HSiNmVTFord2WQ4u01KaQVqh8k1f3v+UjDNz1IqhtveUmr
7RCFzsibSKpNeT2kPntIEmm5anlJM18rP2k8tIoVs9NJ0atlkDQSvwyh5zLP
FduUQzf6SH2tL5E035wYR+pPD3KT1o3NSaTo8V00aY6LSiD1mKmJpLBejCfV
75M7kOaIqp1Jkfd2NVJ7Lrk+qX7f1YDUvmjbkhSPJb9MGqd2ryCtry8fIrXP
Wp4hrQ03Uf3/zLuw6xR/3at9YBbrqB3jYqe5lmdY8zwrL7BO54Wd8teO+8//
Yr92R37nLueFc+Oaf7fZlZfMLu/1evzb1jOrcWtW5/k6Pre8Rzq+T6fP9yMr
rl1GtXah06TV6apF6sc935LWqqrjSfONnwah82/5SBU/uDFp/dizJml2n/0U
aQWLlif1s5++QJrvVpakfq1MC1KW6duANGSwFmkt8tQl1WxZgzSeuFydNB+K
jiDV0UUxpFVmrYsUWnh+r101O5zXtSub/OEntYhlKaR18CsPKV4Iz0eyq2Zc
9ZFi6+lE0vpopp/U/zidRBpVOgdIfaPbRVrubn5S3/BrEmluWhtLGts+QbUL
3/YizYbP9SSNFR8kknLER5Gk0exiEqlVaOIm1fTwvGW75lsNgqS+am6ANE+W
DZF6/RIppHJ/4yMNfVqI1E6eUqS6lOwlRaUvUaN2KTepBbYkkKL6Ny60kc9N
ypnD/aR5eraHtOYVDZDahiaoKDs8iG7tFCJVYrg/ll2zWHw8qbo8ESD1v6sl
oXJfIqnVvtiZVE9WTCKNtPAcb7uia+d2pLbtWEdSpr9eHy2TVoe0Fs2tj/6U
3prUl1zoRZqVt71PiouuvaT6texp0px28gzq0MfS8Xl4TsuDOO3TnPozO/Wn
csgLi4usPO3gSdY84+A11ql/l2O/ryzmi7Mrz/KfFr84+W9dt7sed9yj5zY5
bd2y6/eY1XUW2eTdvs9k2zpnsa5beFnt2lFUDm13ilQDdm0ntfe0OaR4YcYE
Uo1um0GK8p4oUrbu15LUBgRrk+boFlVIa2n74uirRWqQ5rHBtdHVqyLQEyXa
k1qwUjRp9NUkqadkno+1aY7/JJrUFrwYSVqRBduTRvWdEaR59GVUlXhLkdrP
412krHDNS6oPw32k7MqeVb2kaPeki1RvXfWg+R9JJPVyq32kdv1T1Ay0daM9
8/hJ7cJmRZrFqiaSupgUR8qD8X1J1fDrVFKvfbUtKTbfTCCNpamota6SjzS2
pipS+JeGSLP3etQYmNyNFEPbp5D66U7JpNH3mkKvvJBMqg0PeNEaVwKksalp
Aqlv2KtItdBwkeba8Fxou8b8VYrUuv/pRz+ekUqqOdv8pH55QYg0fjnsIVXl
04rUW6e6SDXCiiONuqO9pOy/LRHtaQRJUa1mIqmavI8aaXMjSRH/cGPSOLe9
NqmtKNKQ1M3vq5PmlsptSO2FhHdJVWPgVtJsvO0kKZesPUOa7W6jjn1L7tE+
02m/5LTvcnpu7xjnOvVvcTgv7DTnUZxlHeeJHGMd664d4t+s1ktnV3zxb43v
suq9Wp97tW7ZFX/90+Pfe/093611zmr9TE67b2R5fRzm68lrrNmeldHbUf3s
1uPo1ee2kNrGtI/QkgffJVXCp6+QWtSk7qQq3bsTaW4e3pi0vvq5Gqn3XFSD
lOPKNiPNn6vURUeO70jqD3wpSdHz72hSPz+kAylWvR1NysKPxZNix4ZYUh4o
3IHUb4TnStnV3lnRgpTVPokk9VYxXUh5eV0MKba/5SKVO1w/a1cr8pRCSxVD
jZOZ51Bt6tX/UKSMLxIgzWtNPKSWkC9AWgnPukjtSINo0sozOo40zxm90arx
3dGnvk4kjUKdO6N5yyaQwr/Mg45t4CfNzUVR63ATVG8xL0harlYhUj8c8pHi
92IB9Id3FKlNfcNLyhLhPKRds46VROpBE1Whcl7S6l4BlbtLK9KaGO0nRc+r
qEqvHiJFsWVBUttUOw0tXtFPir2X4tB5VVJJw98miRS+Q9GkOXNaJKlNLB2N
tn7JS5qdj7ciZZeZtUjxRZE66MFiNUl9wjsdSPlus6GkemjJj6Qxq9FJUtR9
6wxprPwbdZpjm9P2k477K6d9msNze6d6Y8c65EsOOsWzTv2vnNzNOvXdcqqv
dpwb5bAOOS3+zer1kN3X3f+r9ypOyWnrf6/WIavrc6++37u9/tl1nTjeB7LY
tyqnXc9On8vp/Tvmea+wRolbqPzlW9SauvYYaZyd/T1pGQWGkqp04nuk2a5o
N1K+XdmDLgrX597hA+83I9XNhQmkNnNIFGk82jeSVOdqRpOiyfIWpFb4u86k
fN9oR1qt20SRov/YLqSZ58to0rryQSRpLPytBfrOnmak6BjTkLSm/96aNEeE
88x2La2NixSHqiSgQ/72kepIZVS0qOsnLddVL6nF1/WQ5tSv/KRsNMxNGlUz
583YNNdUcZPi6JgkUs+Xmfe1KT493pO03v0shZTF+rYjRb7v4klt0ftxpLF5
oCLl8Hns7N8DpJjyYpDUKpdLI9Xcr1FtzoUAqU43VqRZ8KKftLZMTiK1U34v
aebzJJJG3uYeUn5/xIXeLuwhjY/L+Ejr0jt+Uo9amI7+EZVCygNtuqKfrPSh
MUtR8d37LlImFE8i1c83AqSsOluRWsVSkaQ146cYUhbe1JE0ZMEWpNZwYnXS
ijvwPCm6VKlBmvGtFCmnl19Mii+3HkVXrjlNqlvhuUN2HfOSDvsTkcPii6zu
0xznHzntc5z6Qjs9H7jAOvW7lmdZp/jaKc51+ntxjXXMC9/lOOKf7r2K++5V
nHW31+Fefd6cFs/+U9bf6X6bVbPr/WTX+3f898KhD6E8xOq/3kCNh3ujWmrr
I6S4/yWTtBIGv03q55r3JqW/pE4aO/r7SGvuHi96MjmWVEWrukjrA08CafZe
5iLVilfaoaJUFGmMP9SZVN9UiCCt8zc7kaLaXzGkNmJsAtphZntSf71JFGlN
6tOcNNJ8TdC5X7UitckDE0hj+FwXadba6ifVyf3JpPXko35S/TLHgz4S7l9r
14jzuNGkwsmk+XdhH9ppWIiUU865SHNi7XhSjfssmhTP9u5NmhPO9iTV/DpJ
pFwVFYGm3fagvQu6SPF+1QBp/vhKkJRxD/tJfWj4HOod5q+RRsqzRYOk9epy
H6kWuNykODDcRWrNxrpJq3ttVHsmnCe3KxIjXaQ6ecJNmu+M9ZH6oE1eUiv0
bJCUNU75SVH0oWT0+2EB0mw/LpHU6zWPIo2x4fPHd/h5Cy8anBVJ6mfzRZBa
y6uo9fD8KFJ2KF2XtAa/VZM0S22rRRp/vhZDapsbzSH1U9X2k8aVCadJzXv+
DClX3kZzWlyT5f2kg451zk75X6e+0A465VWd4mKnvlWO8zKc4uXLrFOc61TX
7VTX57SfdPJeXQ/Z9Tp326yu572Oz/5t5rT1z+p1e7ev56yuj1P86KTj/dnB
rH4vWX3/jv2rnZ4HHmPFlw7mv4DKt26fJo0i7Y+QavX9a0nRa69OytWFhpJW
+ye7kmKhN53UloxUpPr7iShS9OqVQMpdnnhSpD7uIuXzN2NI0eaDdmjblhGk
6Xm+BTqhdxdSHH0wgrRq3UKN/NM6kOZP1aJINbZhS9J68HALUml7q5PGV3lb
o6+WCZLWvkt+UvszLUTqS96LJ6V1zk+Ks+Hzx3a1Yid9pBjQH9Vf6axIceBL
P6mVH+0jxZmfk0itZJVY9PQ3fUgx+q80Uvb/uz1pRPVLJNUrDRNITYTnFds1
u9QLkPrBoimkteBwiDQXfZtOytEPZZDiRr0U0tw4zkXKtuH+x3bVgSQ3WrOk
nzQKbI0nrUZnFCny7HCTqlwJH2kt3OIl9agJflLujU4mrT/HoupcDGqWTvOS
2tgjblK8Oz+eNEKvxZJyUfjz2dVf+i6KVL9mzvuyqdX5sB1pjXqnOWleLlmX
1AuWLk/KQV1QK2bWENJMe+BrdNCkv0hrZ3jukF1T3Uad9iEih8W5TvsWx/fv
oFN853R+2bEe2EGnvtDSQce+zQ7xte6g41xgp/y103ntf8ickbsdX/zT46+s
xhHZ5d1en6zGWdm1Dtl1Xd0r7/b1nF3fY1b/Prt+X1m9n4sjrN6FFT3/QtWt
6adJ/fHRR0k5/8+t6O/PTSe1OsP6k3L25IGkXjVFkcalG/GkGFYvkjROL+pA
mtcmRJBy91tdSJFyIZ40ht8fTVpjBsSSZrfw3Fe7xuGyiaSekZZAWvWbe0nt
1VmKFKJDEmmVSvORuifc19au9dKGpqSY704kVd5L3dErLwbQoa8lk6LnY35S
m3DAQ6qbIkjK8k/7SfP64ACpgvt9pCh+OkSan0x3kdaUhGjSaF4/irQmf9gb
PevvRWr5fB5Srz2zCyneW6/Q8y/7SHWifjI6ZjMqxrzqJzXRNYB+3SANXfit
n5TrGqNibFEvqTf52EeKnYXdpD6okpfULv6USKpuEV7SKp4fNWJGKVK8G+sn
tf7T2PrhONiuMf6zAGkFPkgm9dGHfKRZ3RVNao3vC5B6o4NxpBi/vwupflyI
aoWKdyDNhkZ90qg1oxxppZevRYpTpeJI/dBnOmk82/4Qac6ofYY08t9CHc+9
5pD9mfiv9mlO8ZlTPjaLf+8UDzrOKXbqk+zUF8XJLMbFjnGrQ57CSaf9pHDw
XsVB/xTvdrzm9L04+W/9fh3joGyaG5td71PkkPvpf+W9uv6z6/eS1evW8fWy
eH+WB1hx8xaqlfwBtTp3OkWaJR84Qgpz+A7SnFDxM1I7dHEMqb/7x2ukuvSs
Iq3iNyJJ7eGvo0mr+ZWmpIi+2gJ99O9WpNXhm06ktnBlNGmdfh6VM6bEkkbo
yXjSKlkziZSHw3W4ds1tA9NJq1TNNFIrN02R1t7FPUnz4Z/iSG3w3nTS2qi6
kVr8bDcpPg+f47QrSx5H1dPSh6aPcZFWqaFJaIEoP7rzRy+plenoJ8WT4f7W
dvW/nnajz3WNRc1vepGix09ppJoVfq5jV96ulYRmNHaTevvDQVKtXxUijQ2F
U0n9ek1UW/VJOmk1Wt2dNL4pmULKpt19pLF5a5DUPy7mJq2/9vlI/cUn3aRR
qbuf1OoIL2nW269IY2s5Hymn9Aqi5Qqnk8b23imkbBrbjTR6zAyQ5jArROqy
oJu0luWLI43hJ72o/8sEUrli2pHaeW8HUpTMUxnV3M+T8uHJtUh9Vt3OpCr8
4lek+ODbE6QecfoM6dSXSeSQ/dZ/ZVb3V477+Sz2Y8nq6zjOr8yijvG4U99p
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
+JzAoX+dEXENNTcvOI322Gqhx66uJY0ZRaeRYsHnGaRKOhtLGnkONUWHne9E
yndXdiH1qVfdqLydRoqJ13ykWXp9Oql1r5hC6lqpEKkNX42KjxunoTW3hEjV
MI+flMtKB0jj2NcppHbzm3RUnxok1QeJyaRePvO8r02rQ4k0UvZ9xEfqDbqE
SHPy+35SK3g7SKpARzcpZ4T7A9nV3izpJs03NB+p/9UxkTSuhOuX7Zrdwucp
7Vrnz/hIY9CUBNIqMNeNVsycc2XT7Fk+mpS/DIslxe55PUl1bW1v0vhqZSyp
Lw4/x7rD/R09pOwuXaS19sE0Unv/bw8pSh4OktbSrj5S81YLktbUEqmk9tbL
flI1SQyS4v1ffKSxaVoiaW5eGofejIghrdnto0i92blY0shfL440B65lHwsm
kNq5kagoVMZLygHxHlK8/KGPNJ9/0UMaNxbFk1p8tbakuLBYoqHIWqR29WYZ
0hyStwqpt/qrHWk9Uv0TUo0fchKtdPEMKTLrPe8wh+w/cs2VzK68mON54eus
fpZ17Fv1OyvXsGKbgwdYpzjdqQ+Y0/Ou7IqD7vV18Z/i3c4L/6fFuU6fy6mP
nOpzC5UPLEStT4zjaIXt60lZOGk2+s6Y0aQ5tHI8qd4I94Wya3z8cTP0QLtO
pHozrQtprvnZT4qDy5NJM1/7EKmKvusntZ/W9iBlyXk+Uoz0u0j9zEgfKVoM
UqRxOtzv2a7anjm3x6ZI7Yfqbz0UJNWbuwOkWairn9SnRKSRWu0HgqQY/EaA
tNY/k0Ka8VXSSevqd35SPrwkQOqXpyp0SbgvtV3ZbYUi9QUbUavxJz5Stuzr
J42IzD7HNsWmvl7SWDpGkXJoZt8om1r0/nhSTX4lgTQqlu9JqppVMkj59PK2
pPlHmVhSdByXRBrrwv287YplPYOkNbIgKgcWCZHW1AJBUrs4DRW/T00ltaR5
QVL/K2+INEaOC5BixixFak/rcaQ+9J0EUrobRpL67p3xpBh0fxRpVYiKJ82K
j8WQxuvp8aTy5I8jtZcSUbNhKJE0JtVMIE3f1VhSr/xSK1LlCce7dzhaaqSx
v0ZlUmu5oiYpXuneitQLVJ1OGvUXHCGt18P9ruzKzP4cdkUO2ZfkmmtWzOr+
3zHv6RA/mtdYcYGVZ1jzJCtPsOIU6/R+HN//XT7/e6+//1xz/W/pdB84zFqP
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
PzJEqj+sAaT4vUBP0kh/U5HijeggqRpsQY0bn7pJ9dgy1KxxJZaUST+4Sf3p
ZxT6bH43qX58VZFmq3gvKfrdVKTZrLqPFGXr+El13zhUFqoeIK1PRiWTWsfD
qaSRWi6NlCcPB0gxsVAqqeaE61LtalMikkn9aIaftB4Jn2O2K0aU8aA3BvtI
2f9NLyleCM/nsWv9WspPymLhfsZ3OPwdH2lNrBdLil0rXKTprtqT1B5r2Z0U
+U51IfVjkzuQ2tSF8ah3UCw633KTYmd8HGkcHuIntXfnxZHWqMV+0tge7ltm
1xrRkZ27iK3UMYBezMsuW6BIuXl0Amk+Gc6L2hVnK8eQ2uSGCaQ+bEEsaT3W
103qU08lkar7Dg9pFZ2g0ArLfWjXWLbSngCpjcvnIUWFl2PREX0iSLNtqfak
tbxrO9IsMDeWFEXKjCGNrtU2kWLrqJOktSCzH5ZNp/45Iofsb3LNNTvMcjzn
lP91yCs5nQsWN1jzCqtfZ80bDjr1ucqiTvFyblyca07Q8fnVdtbqchlVSR1P
k7L/4f2ktajGQtLYHT8EfW1dLGk1ONGG1M89iBorH40lZZ2pyaRanCdAiu5n
+5Jm5lwgu8a3nfxoy+4BUiv3TBwpfEtiSVk+Mg5d+3MUaZacGk+KFycnkPqi
cP7tDl/ZyT72pht9r6CXFAXvTyK1izM8pNV0io9Uo5Qizbb7/KSRlhwi9fJG
kDTWHveRcmGbIKmGmj7SUB+zxXp40X3hPtB2ZfNdqKiz3k3KMh96Savg74pU
4wqESKPGWUVafw8MkPo7cX5SJjVUpOj2WBJptvutK6kVfyJECrG2BSnb/9qF
tFYciCONwovjSTWqhZc0nn4gnlSrB8eQxoNjkkhtfTtFih09fOiCD4OknlAo
RIqvagRJNT8DNY42S0a/D/cVuMOLrySR2rI3faS+JxBPimNVfaQydySS1pEf
/KR89Isk0lgdqdAe6ai17EUfaZwLKFIXbRNJ6481btL8ZWAbUrv0dARpzNzX
Dl3awUVqYz7vj348YSlpNrGOkOL4r2dI/f/su23m7mNz/TeZ1fyvY/7UIT8r
rrBOeV6neNYxvr7JZrX/s2Ncn03x773+nnP9d+r075T4+zqq3a7BRn5qkVaB
3WtIzf21jp5emUGKusvakJZZrCWplDuJNN5NDZDqqjdImuMKvEqKjC+6k6rf
9ACpRSxMJ639ppvU5k6JJ+XOYkFSS2jgJq1PWnlJvdOQBNLqeNBDyh+j3aRR
/cNE0iwy20Xq00ckkuKhD93oka8UKUf39pLiWGY+2O6TN3ykuedKKjruGx8p
L/ZPRg9dCJD67VEp6KjKXlI7MTxAWqOKKvTNegFSukYnkkbLh4Ok/lg4325X
JTwdJGWdKz5Sa3g9RJrz2/tJmVEsltS/Pp5EqrrP9CSNVidTSK3+uTakXP5e
e7R46WjSOtIzhjTnhfOTdsVjC7uQctMgFyl+ToojVdLbIVLrkE+RVv+j7Jlw
3cQdhvwBUnl2B0ltva5IPRDrJ41qeTyk+dX+OFJqK92kvqqLh9TGz44n9abt
XKRRPNpHynZ5PaTeO1w/Yle7mM9NGpXig6T1WEwSqR4Z5ULjR0WTsoo3khRd
q0eQRt8C0aSqcaArac4NTCWN4Uf3kdonGadJ1TdzrqHN3Lxwrv8m73r9cxbz
vPI66zin20GneDmrcXFW4997/X3m+u9UOvRFt878jaq+Y1F916AjpDF2wka0
+PIJpHimlp/U577QnDTeqN+K1D/+pQspylwKoS+NRdXVkSmkHn+hG2n2bucn
jcUFfKQ2Pdxn1K75bDCWNEr9EEXKKb1iSHPc7/Gk/LlINPre5wmknvxpLPp2
fQ9qPphEWk3C/Z7tmrXD5yntGkPD55vtanXCeR671vVkVAbrBknz859CpFH6
ZIBUHzwXJPXKA1JI+elqVC8dG0Qbhvt52zXHf6JI66ebqCr6B6pPf9pPisGl
fKRWc0eAtK6+HyRNPfOcrU3x5oggaQ4I58fsGostF3r21URS7RbdSaN5EUXq
9+2UpHm+bRSptXs8ibSeDyaSZt3bHlKbOSyWNGqdiSGtLtuTSL3JB1708XAd
il2tf/i8u13ZbHOQVMeHh9DeR1Ar7fcUUg3a5SONbT+h8lRKiFQ/3hePPtYm
QFp7bieS5o9pPtJonegixTTNS+pTprlJK+ovRaqNeVHrVFkXqRV/BZXLJ0aQ
5okCUWigeXtS33V/F9K49LuX1IMbR5NGm2s/ot/3OIbWCNdB29X33UZFDtkn
5ZprVsxqHjOrfbGc5iU5xcuOcfRFB53mHznUSzv26cqNc3P9H9TpepNXWLXj
JqoXlKgWUeEIqYpW/pnUO4+aQmpDp2Wg49xNSb1dO0mqK8u6kNo7GxNIWfz+
AGmeeqkbqeU5HEI//dBPyvXfovqSj4OkPD9CkfrCIYmk8n6bgH67PkSaKavd
pDGxiYu08rZzo+WHo4Y3s17Y7tIUNylEFT+pNX7VQ+r71/hIOa6tIvVJ4f+/
XdEzPB/GrjZhj580Hz4QIOXKcB2oXfPs0FRSJWfmzWxqFYegeusLPtJ4e7af
VJ6ZihTvdkXVO9EeUnsww0fqdV70k9rYnqj6OvP8uU1z+nDU8g33kYb7QhfS
Op0ZZ9o0rKNdSXPT7ADadEYrUpn3tSeNCm9Eoz9aiejbPyaRovGoWNL8I7+H
lGVSY0jz2bNBUszdm0Bab73mJ0WbAz5Sb9w4QIqVZ/1om9ns3y0DpJ5vpo80
E2orUu54DRXbdiaQVv4/vaRokDkHzKb+0TQPmlHLR5rPH/eTmvUUu7pwkNQL
dfCTquhqD2ns7+8i9dVDIkl1umwMqZd8tw06+JxCNz6cjBZ+4ytSe/mHPaSx
LXz+ya72cvi8lF0z83n8Hebun3NkfHev31dON8v1vQ469uFxmiPsUM/sGP9e
dvBvNrv6XN3r7yfXnKXjeYELDr7A6g3PsPN+Oo2+vO4QaawtvpU0U5dPJI3S
LXuR4hd3Q1K9UK41qQ95uA16LMFDasHXYkirYzheucP3lihST5rpIqVoieqt
ZrpJa3OjJFIv5I0l5UfLI0jtiUEx6PyesaTVfmA0qX/2ciIpm+eNQyutQVXn
NS7SPLE7kdQnjveS1m/Pukmj00gPKTaNR82ev/hITQuixv2uAGlO6xsitdu/
+0nrx/Dr2ZXbp7BL5qHarkFeUtQexZb9RpHWtfC5art6u2RURjdT6MASPtJ6
Kj5EykNFAqSK/DRIyvcz+1Lb1H5/0kVaPx2MI2WP2WmkKlzDQ2r+qi+SZmSe
SFJ+Uz8JPdgPVcqv0N9nxKPFFkeR2pWIJNK8f7eLFGlJitRXFfaRYshqP2kV
3Z+M1voTVQ/NTSGNknlSSa3omyHSqvUTqp0I99Wzq7qF6ybsaluWK1IWDz9P
siuGhudZ2dX6h5+32VVzw3PY7Fov/+Un5ZN9FanfOukntfNxIVIZi12kOW9h
IqlOrW9Dmu+ejiP1Drsi0cObe6N9y00itfJJ60m1b9NRUs7oeobUn7+NOva/
zSH7tlxzzQ6zq47acW6RQ5/n3PO5uf5PXs+O9f9zWRVxnn2mBqolRJwgrXcK
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
/FFPLpIufMWJlFuuOpD0ZC8nku/KcyHlNepGasekfCSZ95sHSeun928shXOw
F0mz/vVAz5vfz7b6KxqGPjwshJTLvokiFTH9J7YkXASVdQMFSHqjfCE0L1mA
5I2uppDss+VJpHxzQgopuk2MQSe8FUHKcTKAZLd/iUG7lA4gSbUbHKkmzg4g
WcWWSSTfYM4pbWnvtzhSbKrgQ9KcfUkkL/GlD6nWTU8iaf9nfEhR1cxd2sob
PUNI5r+QRIo2Zt/aVv+9LoWUT5k5QVtxvH8KqbKW+ZD09zopJN85NoaktWcl
kPLJEgEkuXg5gaQTFEfqZXcS0L2mH9tWfW/yyG1ZhfYxpAx+EEeSA//5kWrJ
xQSSj10XQZIW6R5iS/mfK4Ak7a4kkXpMep/S9sKPSSS/OtaHFE1N/7MtffFc
ANq9WwzJBwQ8SHp1eQKpP4qEkXTX/xJI/d3GKFK9078QqR+sDmX9z/SDLuuN
vW9CEZI+twTKyqxKIbnPVYBU1VZGkTSZ3lew5DdNv/pdOoaGkWzkW1Dd/3gE
qZymV+0u+zYPIbmvuw8pSnQKIvlPxIeks3xuJLnxvhdJf18JJb4mUNbJ9FbZ
8kfCTiQd+4UXqTPS+S6W/Jf3s5F03q7eSHn1aydSe4/nIsWATBeSvD/Hi1Qb
zHOTLbuxx4NU4YoOJA8tdUMr/elA0oH1oXx3o15I1fTBnkgZKJmBFP0ac6R6
tFQ/pO7wbw6SXG/ZG8l2dXMg6dZtOUj14aTeSFJ0KxMpL5qvY6u8Kx1INuMV
F1L3DLihv33pQor5A91IWXukD8meejaC5GvMXIYtW2T2h+5yeTSG5PN4AqmX
n40h2S/3JJEiMI0jWfOpEST/9xWOFPqZJFKtPlGAZM0Px5Dk7ZUppCrewZFi
wMNJJM+aEkPSB6dEkSTLE0ZyMSQBPWz2g+/yGXMOass2p/esLEXFfhzJf6oU
Qeq+5rnSVjbZ5YZ+2dqPJJcGZkIbN8hF6vXNs5Ck+wQHUl/u6ELyH9/NQ6qd
a/KR4omnc5C82ch8pL68KQvJp5pch7vsZfIObUW8nBdJQsc8SFra/P/Y8i0d
oPLA5ihSdRkVQpLp5WNIOtLkz9myUDqvxHb2jRiSzDxbgBTe8WGkbPRzDElL
FIWQbP61OFJHTJ6BLak7LQi99kMMyXqa3E1bOmVpFCm3/eVH8l8bhJFk79Eo
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
      "], {{0, 160}, {160, 0}}, {0., 1.},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{160, 160},
    PlotRange->{{0, 160}, {0, 160}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzt111qVEEUhdGgIE7DOYiv4hTiCCLokyDEB3E2DtEhmKCQYP46t2/XPnVq
Lej+ukdwdr359O38y4uzs7Pvr6++zi9+fLi8vPj58dX1n88XX9+9/fzy6uev
f5/r3wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAMBefr9fqwAAAMwl/Y7UuQsAAJCSfg+pPlYAAICHpN8rqhULAADUl343
qK5YAADgeOldr6re0QAAsEV6X6vqfAUAgMrSe1lV+xcAAEZK719V1UMLAAC3
pfepquroAgDQW3pvqqpWLwAAc0nvR1XVbgUAICu9B1VVVykAAGOkd5+qqt5f
AAC2Se84VVXdpwAA/JXeZaqqmikAQFfpnaWqqrUKANBVemepquocBQCYRXo3
qarq3AUAqCa9j1RVda0CAJxaeu+oqqoCAOwpvWtUVVW3FADgudL7RVVVdUsB
AB6S3imqqqp7FgAgvUdUVVWTBQDWkd4dqqqqyQIA/aT3haqqasUCAP2k94Wq
qupMBQDmld4RqqqqMxUAmFd6R6iqqs5UAKC+9F5QVVXtUACgvvReUFVV7VAA
oI70LlBVVe1cAGC89P1XVVVdsQDAeOn7r6qqumIBgPHS919VVXXFAgDjpe+/
qqrqigUATid951VVVfWmAMDppO+8qqqq3hQAOF76nquqqurTBQCOl77nqqqq
+nQBgMOl77aqqqpuLwBwuPTdVlVV1f0LACtI31tVVVXNFwA6Sd9VVVVVrVsA
mFH6fqqqqup8BYDK0ndSVVVV+xQAKkvfSVVVVe1TAKggfQ9VVVW1fwFgpPTd
U1VV1f4FgArS91BVVVX7FwBGSt89VVVVXbcAMFL67qmqquq6BYCR0ndPVVVV
+xcAKkjfQ1VVVe1fAKggfQ9VVVW1TwGggvQ9VFVV1f4FgArS91BVVVX7FAAq
S99JVVVV7VMAqCx9J1VVVXW+AsCM0vdTVVVV5ysAVJa+k6qqqtqnAFBZ+k6q
qqrqfAWAGaXvp6qqqtYtAHSSvquqqqpatwDQSfquqqqqar4AsIL0vVVVVdVx
BQDuSt9nVVVV3b8AwF3p+6yqqqrbCwAcLn23VVVV9ekCAMdL33NVVVW9KQBw
Ouk7r6qqumIBgPHS919VVbVzAYD60ntBVVW1YgGAdaR3h6qq6ogCAKT3iKqq
6p4FAHiu9H5RVVV9rAAAp5beO6qq2rMAALNI7yZVVa1VAIDVpPeXqqruUwAA
9pXed6qqqxQAgJrSO1FVddYCANBDeleqqo4uAADclt6nqqr/FwAARkrvX1Wd
rwAAsIL07latWAAAYB3p94fqlgIAAOwl/b7R+wsAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw3h/ntnCR
      "], {{0, 160}, {160, 0}}, {0., 1.},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{160, 160},
    PlotRange->{{0, 160}, {0, 160}}], ",", 
   GraphicsBox[{InsetBox[
      FormBox[
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1:eJyV3YfT/VdZ733nPFI8FPEcJO2XSBfQI2AFFBULViyAcuyCFCsgHcsD9oKV
jkiLFBMSwEAaJAGSQIIQQpQmyDBYRsdxxn/hvM9+Pfc1K9+97xueNXPv+d57
f8v6rs+6+rWudZfHPOnhj/9vn/d5n/fUW/fx8Ec/8yFPecqjn/2IO/TPDz3x
qT/3hCc+7rHf9cSnPe4Jj3vKAx7z//Tlq/+/v/97/MM//MOPetSjfuRHfuQn
fuInHv3oR//Mz/zMYx7zmJ/8yZ/sy4c//OHf9V3f9ZCHPOTrv/7rv+7rvu6r
vuqr7n//+3/FV3zF/9q1r9i1+973vn351V/91V/7tV/7oAc96Ju+6Zse+tCH
dtX3fu/3dnn3fNzjHvfTP/3THX//93//D/3QD/3oj/7oT/3UT/VNj+jXH921
/71r9eQRj3hEZ/7gD/7g933f9333d3939/nO7/zOb//2b//Wb/3WutHNH/zg
B/eUnlVnenTduPe9733Pe97zS77kS06dOnW3u93tPve5zz3ucY+6dK973eus
s87q+3POOeeMM8744qP2P4/a/zhqX7Rrd7jDHfrsXwd9fuHSbn/72/u83e1u
53PT1i9vu2ubn277ubX923p0rS7VvXreW5x22mlnnnlmr9wL3vWud20EvuzL
vgwWjUzjE2Tf/M3f/B3f8R0NbOA2yD/+4z/+U7v2Yz/2Y4HbUIdIJzSwDenX
fM3X3O9+94Npo/rlX/7lIO5L4D7gAQ/4hm/4hm/7tm/7nu/5noc97GEDbnOm
4/B65CMf2VOC9dG71q89qEfXgR4XuJ3QmT/wAz/QyU0P4DZbuueAa6b1Fj23
PgTi3e9+914Qjr3ml37pl97xjnfsy86B753vfOeGArh33DXgftHN2x12bT0e
iA31enwyvis02or7wXab29xmwD0OdECbhL3FoHz22Wf3js3qpnpjEsoD8bd8
y7cMuFr/RmXIrUGOdhrYBz7wgYGIXr7sqHWr8P3Kr/zKbtUJgdvdIjrgdqvH
PvaxcYNQ8w0WEeU2hULZsx61awMuyu38JkngNrsCt9s2FYHbLKon5hhSDdy7
3OUugRuU0W8d65t771pk+yW7NvQ74B6k38F3vhniHfrdJ+F1/IdUV3z3zzwO
3zn27xxsUK6h5V7nTne60+mnnx4hB3Gv3/RGyOESITRoDXJDjZqQbRRkhBve
GOM3fuM3Dr5hep9dgy/iRbmRWIh0YXdAuY9//OO7ed+EWkQ6/GE4M55ca0Z1
Vac1qTq/SQLc4cz1IR5Sh3tcDzXNotbeKHBDsDmMhHtN30e8fQn6RmAl3oMs
ej1Y8V2R3W/72G0oev+0k2E9oa1A61U9XNl1b9qLx9NAHBU3aMH6E7sWFg2y
4Y03ztiGXQPbfOiSlXgbZMQbWRG7XRtAAReyP/dzPxeOEWOzpWnTU/o3cD0r
rDsN5QbuypmbVz09cIczB+5QLgWgCdZEjQkPuE3gc3bt1K6RTWFNLvf6jQOe
NsiunxsSXg824B4kTG2f1jYE6+AgqR7E978fanP+yrF7i96RPGpYgjiAGqvQ
aahxy4a64R1kY4kNbODSZ4Kygf2ypfVvAx5pB26XhEvgBlmU+0u/9EsxZ6yg
25pC8PUs+A7lApdEMLuGM3fzwO0pKQB12BwbsRuCgRuaceDeDpcGutavmLN5
PvxZ25DwKnaPg3g93lDlPoWu6K8Qn0ywg6PjL1jaQZTrEl49VNzgJJ4Q4E/u
WqPdODe2QzI01QZ2uGJTArL4c9/0UxOgyRAuzY3ukMB94hOf+Au/8AvdMH4b
gtgysVvr+x/bNYI+yoUvzjxid+ZY968PFObRqYhd4AZrCJ6+a8i2F0TRfuqt
95XngyT8WfHteFVoB2KjPf92cIKo3fDnz0qwt771rb9gr80E8NwRxysV49J4
ZqIwCqIth2xDGj8MvqjGwCKckG1i9Bnx9tMo4YRs94lyn/zkJ6ceh92A278M
ov4FLuE7+JL4iJfOTDSYYxvOTLwCFysGbppGb9fBGUet4765066N/N2YSDjz
4DvITpuf+hzgNubShlefIHA/d8k71ApQKN961zbkvIF41K2oIHJgENFyG9j4
IYbckEKWWURfpZd2VT8Ru9SqiDe8krlPfepT+6QVh2awsoY6oMIN8dKZR60a
ztzdhjNHvIFrjplgid0Bt4mKM8Mx4EAMzTvdvA2+NQJr9GQirNY5A3H/OtkN
zZz+XYmUubR+s1G0Nrz6BKwHqZWQIbhPvIP1oLwy6tGok1MNV2QVNA1ywxvV
0KYCN9aNbFm7gXuvXQtfxNuZJG+gxGAf85jHBO4v//Iv84302TdJ4T7HoTHE
O/iSvDjzGLw4Mzay6szDmePAZ+0a9rvS6Wm7xnAYzgzfgbhBQO8reYYOe4qL
o1/NnJ5CZzOd+p4ys5HCq3F0giw+gTnvs+hV4K6EvNKy4w2j7k1HnY7K4pOI
d1wZNBnIDluujXnVOQ1+KHRVpBdkceZnPOMZP/uzP8vgShCnRadrhS/hO2rz
WEZDvOPQoFZRAIZ4ceaeDlxak9GG7PBnlsJKs5s2+pUzN5y5gzA1B0yP/h1w
KXIjDrDrE4ymDSEfxHel3+NE8D6jXvG91a1u5fsVYjMQCVOEGlumbkOKGaLZ
RvVeRy1w+5dhFVlxj4RIMIXj0572tKc85SlwDFMmEv/VqM1DvxH42LyrWbQh
3sTEgLuKXWx5iHdDv/v4sn8H31Vt3hhHodyvWNxpR83dRhDQ1UGMK66mE1aw
mlHDnDd8+zZHToxRifep9WDb0G8QDxV38yHh+hkJN9QNbwPbqAYZU4gDAab3
3LUv3TWSl8MqCMI3XAL0SU960jOf+Uw2bzz5CU94ws///M8PvqNcoV/Eu5q9
5C98uyeDl9HNKKsD44SkU43OvEFhhXgYMr66wde/q7cKUbOk5nzserQXP1HU
O1516X0S3reR9+l3w5xXlD9HcLWOCWJT1KxuHjbCYUTyrsSLGzewcUX4Bnc/
TSghFLoqGoxUn/70p0e8kW1sORYduJlIHYT1OCTx5x/ZtfFsHHSX0QH0hMLM
GgJuyG7wHUxXZIdgN7rWQOyE0Z8bllGi5tp9v+V4BetDo0fjWsMQx7Hog6L5
ZPtoVaKmgXIF95a3vOVKwqMf4kINb1oNyYsfrsR7j11Dwg31RBNYRqlkbKIk
b9Qavn2GbN/84i/+InzxZ3x7QkXjcxbFiHipzdxlDCIK84ZyR2fe0O9oVhud
eZTqlZMPIW/Y9fj6TAOjNNOJaKZ7435Jik4elXs/+jCA7iN+HBUfZNG3Pr7B
dyDuqtvt7PE+vXu0M0GE8SEg3nssrXHmD0nhafxjztFaAEWwT9q1oAzQkO2Y
iyMu3a/sI/iyjFhPI395RIczc1XVDXOMzN2Au1LuhoT322lLWw2o1WKC9dhB
faLovidtdQPBsqRwP86xjbtjZdQrza6w3u7IV3mCc2Pso+HJ+8Q7+IK409y2
g7pU35J6DexIXvKugcWZ7373uwN3NCvEG6GRvGEaoEgVuE9+8pP7jEWHL/qd
aO/EjAhfyjPOHPFSAMZX1gTDlvmQzzxqKyVu2gZQvo45c6TqRjqPtDJ5PAI9
UtTjbPGlOEyd6QSmMdxrXb4COrwaYz+Zclebdx/ok+l3A67W94i32/b0+tnY
NrAiRMxM3vswvfuuhS/NCnNOMkZlkXwAxZCj01hxdNpBxu9Tdm2D7yZmNMSb
aBhwMRACwgTruRM7QCmrzrxBeaXilRvDd3VnrZNhGDj1mO3jk7Tt0c3A5z3v
eVkHzeEYS2fSzVhMg+/q8oIy+3rcm7c5ivB224P0u/F1fI7MeQPxkLAu9ayQ
itluNCvEO5y50Rbq7QWbzBFvElOEN1gfv2uRbcg+9alP7TP+DN9w/+ldG/k7
kjdwuwmdip+5DlDdJzbEk7xhy/sH+4Q8+K64zzcjUvcJf7gu0m60m4qvfe1r
A7d3rIedQMUa+u3fjYrVVf0aSx8P9kq2K0UPshu4V4iHRW8Moo38vcUtbgFf
ELtt/Wl4N2bRBt9GO4oe5hzxJit761DrlXvxqDgSjnifumsBTbnqV/iuwhe4
4vhiVfzMTTDSQWxIDGiCfSvlgnX1TO5DPGDRlHDUYc7wheNQ8UwAUgDiXZiM
YOg1IRsN/Pm0nRvfHVjByHZokKtztNmDSvVtb+6FPo5R75PwGET7+A4JD77R
zvisxsk8+JK8fS/JKhZK8kaJwYpCe/cwfdquYc6UK87J8TxLxcGZY3qjU1GY
PZ2TasAdFCCCc56xtH3PxgQaJiyI3ChFA+X4KObLuQO3wBB73zQmvXizrl5R
vU47Sn/q5MbQSPYvkqfBIr3VQKZg72tctzuKQI3kHXwPmr23unkbfIeEKdJ6
wmc16RkcVoPvOCQRb4SWrBQq4l6ONpveOPPgG3PmnEz4cjuvPsmVM49omEy5
NfAH00FzaHa1WUCw6s+863faOYq5p8KlmwucxTbRuGtx2tOOXNacV50G+nlQ
n/J8zBMTj+7XJWBqVnSf4cAreVLh9n3UG7Jd1eYV333i3cd3FcGru2Nfc2YZ
sXn7t5GfPJy0oJhqSPFTMWxTm4M1cMUX+jfER/iuZhGxG+UCl07FGjroXj7j
5m3VlPYNpYFYypmDfm1Ie5FmlPBTx5O2NByAtB0n9ulH+TxOm3P4N1i+coF4
SCJMAGEF+04q7q+NxbRiPbr0PsQH1ao+B8qDWtZw6WHO8B23FZ+VUO/k4cRO
AyhiDLjgk2eVNjX4xqjDN+EL39WtIW0v3h5bZnHPo8dJNQrzgDvks8K9r1yt
GhRm232aMKHQ4PcivUK35bvmoZpbcW70ZSfI1pNveaclLMhLCXopBJgMlotF
s03w8LBjQd/2KHK3uqlXzjz49lNkvmpWK75DyPv0exwVmyRDQYQv+tWk8fST
gEKcPBtQvs0I1kh1g2/KVV/Gn+VRr2oVa3fE7ih1DLEJ2Q/xjs27T8X7xs7w
7TXiA7g4RlMrFoTHzswhTBvk8OLu7pWDmGgmiOtY/2LdXcLZQrdHrX0PZXB0
B+yoZ61xh9WGWv0h444Qa8ZXN2GjwfdzQXZ1Z3UJ8celwPKdgJEkq+hLNDDN
Shxf+E/4Pigj2JB9+tOf3iflKvqV1r4h3oc97GFxZn6qCR8MZ973QG4gXnny
avkO3xarBYG70abSIZuZ8Z9+6mSMghEUvt22N00x6B0lS487JWFd92hWyH88
pbRr/YFvz+qze3ZCk3aDb+esvrLJNMCxaWLdqpNXLWujPx8H7kGUkfCM8wQE
tY5X4o3cYqoNQmDJygjfQES/q3K14juSl86c7E49k+yKcuUwr2mQ+zrV2uab
Dbho9uxdC6O7HDWaMA0KVYZLB/wnqM/USkA0k+thyqR50lP6aWKja3SS+cOH
T7/ChEcTnpyB2y1Zjrwipx8FGYeHQLkLXfUFS3rVyRAfpNwNCY/wnSQN+M56
hwnlx1otMEmzivGyf8M3nhzxwnf1bIxmRa3q8mbIRCF5mDdid6MzrwfjkRjK
HYtpMidRGf55110LFPcfcLFBAqhvxBeIy2ZdvKjJTMjixmMnUuy5oIljlDjh
pxGszO01lWsCst12JiR9vq72Lya/6lqrRn2c52of4lsctcF3dUvee2lsXmaR
JMkwCt+QxZwTr+g3WJ++aynPIgvhzjKSBGt9ShxyUggi3lldcgLxDrL72ThD
uWh2ZO5w0W4r2Zu5FzTGll5tMiCfSeoI8UaDVauZKuygM48yN1az2rWn7aLG
YwhTzAZfJpg2qp2Z3GfTRoY2Kt44sjZeypGqBwl5XBwrvhLXNxlWQ7yT4Rw6
8djAClbYRcXhGJrh+4xnPGPwjX5Zvs2BmPnYRONkNqNmdclBJ/OGM+9Hjs44
So4KROTpTIhM/nPzR3IgJuxBrJtOM7ATFx6eP9MMNzB5zljSRfRBkh7bdkh4
XNAUKmbXuD1FIScq3U3qYf2hpa869sqZV+V53/m8IeTP//zP3+C7z5xJXg5n
0SLrAWO2w5w7CMe0ZcrVBt9Zp9ZVvBmrziw8tGZCrhGiFdN9L4fhokfNIgU0
y4/RtBz3dbD26LhHb2etGXAZOJYWrgHicUyN9+zUUVu1er8yfjfLW4YhQ7/T
6szocubDaFk9cdUqMQFtw5w/q/7sOGTDdyXhVfiOZsXmHbMouWmNmKzIBKvA
LuM3fId+k1+Drwz2iJdaNSHm1cm8vt0J+G7oeuWcxGLNDSNVuQq9SP/2IKod
K3uouJ9YZP4df4W7TboIsT6Ue+ZR/rx5MqbxULF5Qo/iBOvkmGHn84z1L/eC
y80fgyBbwN16UCTMBD7BPton3hG+gy/hu+JrbQJ8aVaRgNW7YA07XDo9KoU5
zYpxNJEFylXMmeSVNk+tmjRmnBm4g+9ZR21oZ0hmPc1oWCdIg6JK9RZJ/KZi
fa7/fRmIX7lrMuQ7Z66F9aApW5jKhyf0jQi4kQ8OJw8cY5SN96wvYVcn2QUs
6A76svv3+vxIop/mw+gPpx9lB3VPhtJBETxtQNzI31WFlr4uCVYbzUqSc0pR
wjd8MedZj9DnKM+r8Rvo/RRzRrwk74Mf/GApVfzMQ7wD5QrxgL4h3vne8KJZ
+BrMJtKb3vSmmMlDH/rQem69w7wanwNl2yXWzM6yaKyMqizwTSHh8aj15fR5
2EjtzJ1HFFvoDn3yhvlpFow0zWIsdazpNysxe3r3H1uJGsCUPhgIHrId4t0g
vkF5lltyTiLeXnazdiykaM7w7VNMH3OuRcUT1g99ZhGHxhDv6orEAA8S74A4
y0+Gaa9KMjKELF7d0L3yla986UtfWoebV8l9jpRZgjF+G3ZfPzX36qTsL6FS
Czcogdzv4dLIjJ11amkkeIjMcjb6Hl69Mpwu77nxvRe84AUNWtpIXaqf8TeW
mjlMu+YzWcE9zjm5kupQ9ErLK74r8Y5ZFEANlFQrbkn4SsgJVvgyfqNo1lOa
lbRqDg0rEfg0wncTu1/hW5tfTztaFjea2KldXQJOcvaFoe4RMY2mVo/uICq2
dobp3Vx9wK5NFLu3+/ZdS0Zzpfay/crk51vrwGI3NR9wHtPpbrtGAzcV17AF
oh5rS+gqA+QNb3jDn/7pnya5+peeM8bXfHbV+KJXLesEybsK3+Pw5ZAkeUWL
FNNohidMs4YC9zFHjfBFv5wbCV/MOSFoTUTDS222YG1SXns1YK30u8H3rGVh
SI3VM6TNs0SKzaJm/pPQCa/AqudNM5Ya7+h0rG/SBut5LxJrSiH8f3etF+kY
WXWHXrk34qhpKLpzdI0FWb3VQwnisYsZxQh5jILmQNOvSxrqJlK3jVF4lwlo
OtMx0cxvuRpK+2Q7xLuRv6NlrSuMxizqLeoAyetl9aqxollFpITvKFeYM7ck
s8hiQOF79MtXxjga2cQwXI2RcVmM4jEHcxoKot/ed9fqc/3s6ZJ1ZcsHTQA9
85nPfM5znvOHf/iHce+/+qu/eu1rX3vppZfeeOON//zP//zRj3704osvvuii
i6644orLL7/86quv7jMO//znP/+P//iPX/GKV7z85S//kz/5k1e96lV99tbN
jWifpOa35z+pP+P3CKPesfft+1NHQSsuUJlO5nmsoG/STLrJqqXT+rpksrZW
F+VBfPfBncY4WpmzaCAOFkDBFLuznmiS5cJRQt2kbazMOS7UOGDOLCwxIyRM
nWt6r3bQQXznmP0y/Lxja6AsobJwpkfUtz//8z9PxfqVX/mVmE/TrL6F1Fve
8pa3v/3t73znOz/96U//0z/900c+8pGbbrrpxl3r5AsuuOBd73pX57zxjW/8
oz/6o5e85CXB+ju/8zu/9mu/1nx497vf3R3e9ra3dflf/uVf/tmf/Vnn9LLd
vCfKBlReIJbC8RJYjWTMpB6Ogy7IxFvlsDUOgdtnt4qldHzG0VJl9NtndvR+
oH/lz8fhu0I8+E60KHzrrbVF8K0D8m2E7NGynKvxbCSLMWd1HqwnQrzdR2md
BmTwjVltbJ9VcRooqbucjZpyQA1pd+vfOhy4DVoSJPZ73nnnRZsNWse///u/
H9yvfvWro80QfMc73nHdddf97d/+bcdR5Wte85qXvexlgRVF//Vf/3VqT0CH
4K//+q//7u/+biT/3Oc+N1kZssEd/UbUUXT3v+qqqyLzyy67rMszK3qjhELD
FVE0kpw2kWSvXD8VsghZWqsMGUZi52dLvvCFL2zEYj4NCHaNO/XWGcJfcPMl
oiew6H1y1maRoNI6rMUmmIWfKlklfeTRhS/nlbRnnucRvtwalopjj5S06LeX
6jP+6R17nLjqBPWGeLFccK9K8iSDESIYfv/2iCZMd2Z3B2joNNn+4i/+Itr8
m7/5m+AI3+C45pprQvb1r399PwVZuD/vec8LzT/4gz9okEMwGg/0hE7MPOzS
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
CPFnqZXc9VwcTOBJ0dETroyO+VcbpSbztdde28uKlVuPk0r54Q9/uEluMREH
MmdL/WnSWqcf6Pxs/cS7Etvptk7r13qFgQc9z560N4lbkpYlbkk+sZaBDjas
tW/qksu5jmO/41RpHCjVXVXnw3cK6DVciDfyzEC78MILjV6EnI2AhGtN714/
0Du/V2v8x66klyJedVcE9Nf9K2VX0plHv7rVzdu+/csLap8Uk5aLkpNBrtos
oRoXR9OAi4MKvUmRVQOnfqqQHAS9Y28dxFGxpUMCBO973/sahIhXNotkjFi0
+Gycn1+xR4SmvAsuBVWk+jQN6kkXdmcOZ/4NzqtepGcJPEmBk9bYlOOgVr2h
c6L0F77whdaFMaz6poNZ+y+EhEU3IJzzYveqCXXP5E4gpip38zQrK8FTns87
77xk0z/8wz+EeI+g//ep6BnWJ+9F6E1y7BRy36zyPk5/3shfNov8q1Gx6mds
RLkDi6Fm+2b82dJC42yrhe7QrUbFEsEneXtKb33ddddlL6RTxZp4jVi1qSK9
vlJUTEJlGWx21kFdUsyn51qz0KMV+emTb6GeCAR0Wix6cjNwm2hQWKoDITDE
NWnMsXE+qN5ajLJzeqm+mdosnBtRq0r+xqExaQ70dvK05faEqeTndCpLVnvB
aBb7uvTSSxuErppdWXsFC4VGFsvJmW3RNusXRvLOcsJxUW7wVTx/VCz5OdZn
NTMbDal0ImjjopQsygYZE0lxldlb0G4soRy+3Txjv/fKBgzNpE8D0vjwFQeW
jOLJo/7qXYuxfP2uqXTaUEcXDWkEi2nwe9RtvqO6J89qllCNn1zQJFwitKhJ
iQYra7is7RHcyfUqXbcuff+uNSUiT546Oypa0cC/wRFKqe7mydYAVTxNuqaS
0SGbgpFiGUWrZxg/twNI75hq0YFVsUm3U7viZrOt4ewuui4hnJ0oDyZSrhAP
vhidxb/1uZFhp/cuVKypwz8uyjGBlThWUVOUcHJvOgjxXiHRc/XVV8e1Lrjg
gl5ZpYuG3RJd3JgaYI+MrnrwrtW9iYDwlPLG1MkeGjoxnzgP3cb6vl6hXmEO
9VCtmOZqI2/JZ48T3LfrdJNBQrtNjQNO9N/GE/KfI148oXFojlk+KZG+PqiR
FWqKilvK+txdC+II2aNjXFObq8733N6LdamYm7LYU7zOyu51c9LZ+3u/HMc+
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
SUvAYAfWaf8HWrL9KQ==
          "], {{0, 160}, {160, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag[
         "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
          Association[
           "Exif" -> Association[
             "ImageWidth" -> 483, "ImageLength" -> 448, "BitsPerSample" -> 8, 
              "Compression" -> "Uncompressed", "PhotometricInterpretation" -> 
              "Black Is Zero", "FillOrder" -> 1, "ImageDescription" -> 
              "ImageJ=1.51r\nimages=120\nslices=120\nunit=\\u00B5m\n\
loop=false\nmin=1258.0\nmax=13053.0", 
              "StripOffsets" -> {754, 8482, 16210, 23938, 31666, 39394, 47122,
                54850, 62578, 70306, 78034, 85762, 93490, 101218, 108946, 
               116674, 124402, 132130, 139858, 147586, 155314, 163042, 170770,
                178498, 186226, 193954, 201682, 209410}, "SamplesPerPixel" -> 
              1, "RowsPerStrip" -> 16, 
              "StripByteCounts" -> {7728, 7728, 7728, 7728, 7728, 7728, 7728, 
               7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 
               7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 7728, 
               7728}, "XResolution" -> 72, "YResolution" -> 72, 
              "PlanarConfiguration" -> 2, "ResolutionUnit" -> "inch", 
              "Software" -> 
              "Created with the Wolfram Language for Students - Personal Use \
Only : www.wolfram.com", "DateTime" -> 
              DateObject[{2018, 3, 10, 1, 58, 19.}, "Instant", "Gregorian", 
                2.], "Artist" -> 
              "Created with the Wolfram Language for Students - Personal Use \
Only : www.wolfram.com", "SampleFormat" -> "Unsigned integer data"]]],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{160, 160},
        PlotRange->{{0, 160}, {0, 160}}],
       TraditionalForm], {0, 0}, {0, 0}, {160, 160}], 
     GraphicsComplexBox[CompressedData["
1:eJyFmGtuE0EQhBtuwk2GOE4ck6fzTpxEQuI3V+gDcKg5GiJ0FerPseDP6tsp
ejfrmZrq+fL95+bH54j49Sniz/X9X34d79d5ORrnt7/XOKjxK/BlZ+pjXfc1
vumserlHHyd1XZR+0znB1MeqdMXjurPq5R59HNf1sO5fdx7gHf1RXYvndeck
Qx/Fsazn3XR2PfFN5wFWPTHvx21n1eP/C7yn3nvcdna9+i4TPMC57ztKf9dZ
9XKPfud3vevseuL7zolx1RNz3s37zq5XnA+dJ8Y9r6U/qPu1LuKxs+uJHztb
X+tygq0vHk+drT+t+0+drS+eYOvP6vrc2fri8dzZ+vO6D7a+eIKtv6jrtrP1
xWPb2Xr5Ilj6UTzB0qd88qXzxLjnl/TyKT3vpbPqDfkoWPosnmDpQz762tn6
4vHa2Xr5ENh6+GTCh6N8Zr52Vr3UOj/s7Hpa18vO1mudLTtLH7WO7IMP0Itf
Ow+w/Zv1tI6OO9s3H3s9sb6v1+lxZ/sq9GL9fqF1uOpsX33qeq9r8qqz6k3o
xQNsn0Q9rXPpve71fK3Tk86ql9CLvb40vu5sH4bevkBed7Yvb7tePMDOR+J1
1/G6U+e0s+rxuTvvrfEzsHwben4381ln+zq+O383j5+D5fvQc97Yxy7A8nno
d+at+LKz6nHe2/e4juCjqsd1al/kurzCuHwaevsAfQY+7PwMvdj5QuP0Vfk8
9PZh8m1n59G3rjfffvzcgf1B4/67sL84Z4uxP00y98NN58T+OMH6XQJ68cT+
7XnB/Xzb9Yl8MKD3Ote8gt7rG/lF+om8k8g3iXw0oB/IVwF9IJ/Z18/B8hnk
u0Q+HNAP5MuAPpBPk/kU+XYw3yIfz4euN8uXka8H8rtzxBqsPM98j/5C/Yf7
BfQngf4j0P84B63Ayhnsj9Cfub87Br91HmD3f1rXZOUq6PflPPsF+ttEf8t+
2b6wBKuPhD6QO51jD8E6L8D5gJk+BPZ5h3xj0dl+Dv9O7A/O/WCft8hXwN6v
sD8F9r/A/hfYXwP7a2D/DuzfgXzgdfvSOZFfJtg+yHyD/BTIT4F85nW37ZzI
jxNsn1t1vZl5+rnzQL5O8ER+t++J0R9MMvoL9wti9C+TjP5Hep8roX9yjhCj
/5I+eM616PpEP+v+9hqMee3zxNN+P3leqPmGcxSz9DjHSepxjmSWHudUSb38
Cud39uWjj6+J604djf/nuZ6Xh5393loHPDfVuPqaRWf/fsyZxRM5eIB9PqD5
DraeOZx6rUf0i3NPHzGgn+hLJvTyi4m+yn0N+qwBPe8nrqw7oed7Bd7L/Q/7
pT3fJaHnd53Q8xwh8LvwnGJAz3OShN77P+eNfKjywGA/oX7o3/hv8c3PrQ==

      "], FilledCurveBox[{{Line[CompressedData["
1:eJwt08dOFQAQQNFHFQRRFKQKPHrvvfdqpSegINJBUUFAkI5Y/8vf8ryExckk
s5nFzQSXdsY/hAUCgX+EZjhRRBPLXe6RQCIPSeYxaaSTTQ555FNCKRVUUkc9
LbQy6tAwIwwyRD8D9NJHNz100kU7HbTSRjMtNNJEPQ3UUkc1NVRSRTkVlFJG
MSUUUkQ+BeSSRw5BssgmnQxSSSOJZGKIJZwI/vKbP/zkFzf84JrvXHLFORec
csY3TjjimEO+ss8Be3zhM7t85BOhgDts855Ntlhng1XWWGYltNNgkxVWeccy
b1ligUVe84Y55plhlimmmWCSV4zzgpc84zljPGUk1JwhhhlgkD766aGXLrrp
oJM22mmimQYaqaGWKqopo5wiiimgkCC5PCGLDDJJIZVHJHGfB8QRzx1iiCDy
9i/+A3gCNII=
          "]]}, {Line[CompressedData["
1:eJwt0+dTDwAAxvHf7864s9Wd3uSFv8esiFJKXnCHyiYUUVZkkxkhW0SUvYWQ
kZVR9oyMUOjT8eLzF3yfp0dSSmRyMBAIXCSWGEYwnFGMJJnRpJLCWMYwkQlM
ZhLTmMoMMpjNLOYyhxwWsJhclrOM1axiHWvJZyNbKGA7hexmF0Xs4yDFHOEw
xzjKKU5yjrNc4DxnOM0JjlNGKSUc4gD72csedrKDbWxlM5vYwHrWkMdKVrCU
JSxiIfOZRzZZZDKTdKaTxhTGM+5/g3IucYXLVHCV61yjkhvc4iZ3uM1dqrjP
PR7ygEdU84TH1PCUZ9Tygue84iVveM073vKB99Txkc984gv1fOMrDXznJz9o
5Be/aeIvfwi2jI3WtKItbWhPOzrSgc50oitdCCWEMLrRnXB60pte9KUPEfQj
ikgG0J+BRBPDIAYTSzxxJDCEoSQyjKTgv180AysAd2o=
          "]]}}]]},
    DefaultBaseStyle->{"Graphics", 
      RGBColor[1, 0, 0], 
      FaceForm[
       Opacity[0.2]], 
      Thickness[0.006], 
      PointSize[0.018], 
      EdgeForm[{
        Thickness[0.004], 
        RGBColor[1, 0, 0]}]},
    ImageSizeRaw->{160, 160},
    Method->{Automatic, "GridLinesInFront" -> True},
    PlotRange->{{0, 160}, {0, 160}},
    PlotRangePadding->None]}], "}"}]], "Output",
 CellChangeTimes->{{3.7344275286968293`*^9, 3.7344275499844403`*^9}, {
   3.734427636112464*^9, 3.73442764637676*^9}, {3.7344277016792603`*^9, 
   3.734427716337242*^9}, 3.73442851080697*^9, 3.734501073716978*^9, {
   3.734501114968526*^9, 3.7345011187375493`*^9}, {3.734501277327305*^9, 
   3.7345013065249496`*^9}, {3.734502014518385*^9, 3.734502031857496*^9}, 
   3.734502062288424*^9, {3.7345024942256384`*^9, 3.7345025528716016`*^9}, {
   3.7345026251327887`*^9, 3.734502665117121*^9}, {3.7345027391662264`*^9, 
   3.734502740728381*^9}, {3.734502780454027*^9, 3.734502793710281*^9}, {
   3.7345029409253917`*^9, 3.734502964106038*^9}, 3.734503255601392*^9, {
   3.734503301866028*^9, 3.7345033072167253`*^9}, {3.7345034027735453`*^9, 
   3.7345034203070126`*^9}, {3.7345042221886926`*^9, 3.734504243655456*^9}, 
   3.734504278327917*^9, {3.734504475256804*^9, 3.7345045152103386`*^9}, {
   3.734504811610355*^9, 3.7345048371249523`*^9}, {3.7345050079697657`*^9, 
   3.7345050360314317`*^9}, {3.734505362504715*^9, 3.734505420494813*^9}, 
   3.7345054551420803`*^9, {3.73450548860542*^9, 3.7345055066711435`*^9}, {
   3.734506820583762*^9, 3.73450682880363*^9}, {3.7345068590269985`*^9, 
   3.7345068868198895`*^9}, 3.734507131918925*^9, 3.7345071677180133`*^9, {
   3.7345074566643224`*^9, 3.734507465227092*^9}, {3.7345082372896457`*^9, 
   3.734508256039448*^9}, 3.734511034375862*^9, 3.734511100991989*^9, {
   3.7345122408700724`*^9, 3.734512265303342*^9}, 3.7345126191699705`*^9, {
   3.7345126638010044`*^9, 3.734512678264612*^9}, 3.7345130695714164`*^9, 
   3.734513693754134*^9, 3.7345137840305386`*^9, 3.7345148671069727`*^9, {
   3.7345149305563335`*^9, 3.734514946483006*^9}, 3.734515070747033*^9, {
   3.7345152702875376`*^9, 3.7345153262688775`*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"309749d0-69b6-42c1-99df-e36b04c7073a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measureModelAccuracy", "[", 
  RowBox[{"nNetTrained", ",", 
   RowBox[{"X", "[", 
    RowBox[{"[", 
     RowBox[{"301", ";;"}], "]"}], "]"}], ",", 
   RowBox[{"Y", "[", 
    RowBox[{"[", 
     RowBox[{"301", ";;"}], "]"}], "]"}]}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.734501855417742*^9, 3.7345018902995343`*^9}, {
   3.734512272996289*^9, 3.7345122971278715`*^9}, {3.7345124191375256`*^9, 
   3.7345124345166645`*^9}, {3.7345124776574187`*^9, 3.734512481485302*^9}, {
   3.7345125730940275`*^9, 3.7345125815100594`*^9}, {3.7345130874521017`*^9, 
   3.7345130925007954`*^9}, {3.734513625439833*^9, 3.7345136344498625`*^9}, 
   3.7345137175106583`*^9, 3.734513793928401*^9, {3.7345143052142105`*^9, 
   3.734514340129414*^9}, 3.734514375875886*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"5896264e-4c99-470b-94b1-be892b1f72df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9864665798611115`", ",", 
   TagBox[GridBox[{
      {"1", "0.99296875`"},
      {"2", "0.9958984375`"},
      {"3", "0.9914453125`"},
      {"4", "0.9883203125`"},
      {"5", "0.991875`"},
      {"6", "0.9912890625`"},
      {"7", "0.988671875`"},
      {"8", "0.9916796875`"},
      {"9", "0.981796875`"},
      {"10", "0.98796875`"},
      {"11", "0.9800390625`"},
      {"12", "0.9866796875`"},
      {"13", "0.9848828125`"},
      {"14", "0.97984375`"},
      {"15", "0.981796875`"},
      {"16", "0.9711328125`"},
      {"17", "0.972890625`"},
      {"18", "0.97953125`"},
      {"19", "0.9780078125`"},
      {"20", "0.9675390625`"},
      {"21", "0.986875`"},
      {"22", "0.9709375`"},
      {"23", "0.98546875`"},
      {"24", "0.9882421875`"},
      {"25", "0.9861328125`"},
      {"26", "0.9856640625`"},
      {"27", "0.988125`"},
      {"28", "0.990625`"},
      {"29", "0.98828125`"},
      {"30", "0.988515625`"},
      {"31", "0.988984375`"},
      {"32", "0.988125`"},
      {"33", "0.9908203125`"},
      {"34", "0.9877734375`"},
      {"35", "0.990078125`"},
      {"36", "0.983125`"},
      {"37", "0.9833984375`"},
      {"38", "0.9863671875`"},
      {"39", "0.9829296875`"},
      {"40", "0.9884375`"},
      {"41", "0.9933984375`"},
      {"42", "0.9910546875`"},
      {"43", "0.98671875`"},
      {"44", "0.987734375`"},
      {"45", "0.99078125`"},
      {"46", "0.9905078125`"},
      {"47", "0.9928515625`"},
      {"48", "0.9917578125`"},
      {"49", "0.9940234375`"},
      {"50", "0.9880859375`"},
      {"51", "0.9936328125`"},
      {"52", "0.990703125`"},
      {"53", "0.9916015625`"},
      {"54", "0.9856640625`"},
      {"55", "0.9876953125`"},
      {"56", "0.986015625`"},
      {"57", "0.993828125`"},
      {"58", "0.98734375`"},
      {"59", "0.9809765625`"},
      {"60", "0.9851171875`"},
      {"61", "0.98515625`"},
      {"62", "0.987578125`"},
      {"63", "0.9834765625`"},
      {"64", "0.98703125`"},
      {"65", "0.9805859375`"},
      {"66", "0.984296875`"},
      {"67", "0.987578125`"},
      {"68", "0.9940625`"},
      {"69", "0.9826171875`"},
      {"70", "0.9856640625`"},
      {"71", "0.98375`"},
      {"72", "0.98359375`"},
      {"73", "0.9872265625`"},
      {"74", "0.981796875`"},
      {"75", "0.9808203125`"},
      {"76", "0.9750390625`"},
      {"77", "0.9820703125`"},
      {"78", "0.97828125`"},
      {"79", "0.9960546875`"},
      {"80", "0.9821484375`"},
      {"81", "0.9867578125`"},
      {"82", "0.9870703125`"},
      {"83", "0.989375`"},
      {"84", "0.987890625`"},
      {"85", "0.9846875`"},
      {"86", "0.9867578125`"},
      {"87", "0.99328125`"},
      {"88", "0.9925`"},
      {"89", "0.991015625`"},
      {"90", "0.991171875`"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[2.0999999999999996`]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Function[BoxForm`e$, 
     TableForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.734512474862215*^9, 3.73451248943801*^9}, 
   3.7345125887121572`*^9, 3.7345130966726456`*^9, 3.734513654359268*^9, 
   3.734513703063389*^9, {3.7345137894785385`*^9, 3.7345138078718877`*^9}, 
   3.734514259861932*^9, 3.734514344070922*^9, 3.7345144073709564`*^9, 
   3.7345149678319626`*^9, 3.7345150778293266`*^9, 3.7345153136202087`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"d4e6fe73-6516-4544-8153-4de026af1316"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"saveNeuralNet", "[", "nNetTrained", "]"}]], "Input",
 CellChangeTimes->{{3.7345154715412407`*^9, 3.7345154825716643`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"26f5bb2f-08fe-43cc-be56-d9dcf3d3291e"],

Cell[BoxData["\<\"C:\\\\Users\\\\aliha\\\\Desktop\\\\UNET\\\\unet.wlnet\"\>"],\
 "Output",
 CellChangeTimes->{3.734515484634412*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"a475edc9-b37c-4b7c-ab15-e7a450247cf4"]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 770, 19, 84, "Input",ExpressionUUID->"764bc3ad-cfce-4f4d-9183-c9c128d4b2b7"],
Cell[1331, 41, 333, 8, 35, "Input",ExpressionUUID->"de4c9c1c-1216-4a38-bdd0-edaecb301b82"],
Cell[CellGroupData[{
Cell[1689, 53, 301, 5, 35, "Input",ExpressionUUID->"5441fa38-150b-4261-ac25-09501af2c5e9"],
Cell[1993, 60, 184843, 3511, 105, "Output",ExpressionUUID->"180cd8e5-ad49-49f0-a2d2-004277eaad11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186873, 3576, 865, 17, 35, "Input",ExpressionUUID->"a0b0f955-e14c-4f09-b35a-90d83cb33965"],
Cell[187741, 3595, 9714, 187, 214, "Output",ExpressionUUID->"69b974ef-5cab-49dd-99ae-7b0216c54465"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197492, 3787, 231, 3, 35, "Input",ExpressionUUID->"ea318cd3-342d-4270-afc4-a1d80932cd76"],
Cell[197726, 3792, 5322, 102, 272, "Output",ExpressionUUID->"34f559fc-cee5-4722-adee-446d7ace5dd5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203085, 3899, 257, 4, 35, "Input",ExpressionUUID->"9a0c1265-49d5-4df8-a747-70708854ccf4"],
Cell[203345, 3905, 181519, 3411, 105, "Output",ExpressionUUID->"d6afa352-4d8c-42e0-b241-fcc6e83b5f51"]
}, Open  ]],
Cell[384879, 7319, 1626, 34, 84, "Input",ExpressionUUID->"dc004a3a-02b4-41b9-b12a-68ad236add4c"],
Cell[CellGroupData[{
Cell[386530, 7357, 338, 7, 35, "Input",ExpressionUUID->"be13ac86-b4df-4949-8fa2-eafcbb72818d"],
Cell[386871, 7366, 30755, 513, 223, "Output",ExpressionUUID->"442820cf-534f-4697-ab2e-0edc3bf53e1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[417663, 7884, 1252, 25, 35, "Input",ExpressionUUID->"1efc66cb-cc20-43db-8f7e-a77a260498b8"],
Cell[418918, 7911, 206416, 3406, 223, "Output",ExpressionUUID->"309749d0-69b6-42c1-99df-e36b04c7073a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[625371, 11322, 858, 16, 35, "Input",ExpressionUUID->"5896264e-4c99-470b-94b1-be892b1f72df"],
Cell[626232, 11340, 3719, 112, 1906, "Output",ExpressionUUID->"d4e6fe73-6516-4544-8153-4de026af1316"]
}, Open  ]],
Cell[CellGroupData[{
Cell[629988, 11457, 225, 3, 35, "Input",ExpressionUUID->"26f5bb2f-08fe-43cc-be56-d9dcf3d3291e"],
Cell[630216, 11462, 211, 3, 40, "Output",ExpressionUUID->"a475edc9-b37c-4b7c-ab15-e7a450247cf4"]
}, Open  ]]
}
]
*)

